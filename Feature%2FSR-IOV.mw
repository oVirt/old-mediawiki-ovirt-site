<!-- {{autolang|base=yes}} -->

= SR-IOV =
{{Feature|name=SR_IOV|modules=engine,vdsm, api|version=3.6|status=Design}}

== Summary ==
This feature adds SR-IOV support to oVirt management system (which is currently available via a vdsm-hook [http://www.ovirt.org/VDSM-Hooks/sriov] only). <br>
You may also refer to [http://wiki.ovirt.org/Feature/DetailedSRIOV SR-IOV Detailed Design]

== Owner ==
* Name: [[User:alkaplan| Alona Kaplan]]
* Email: <alkaplan@redhat.com>

== Introduction ==
SR-IOV enables a Single Root Function (for example, a single Ethernet port), to appear as multiple, separate, physical devices.
SR-IOV uses two PCI functions:
* Physical Functions (PFs)-  Full PCIe device that includes the SR-IOV capabilities. 
* Virtual Functions (VFs)- ’lightweight’ PCIe functions that contain the resources necessary for data movement but have a carefully minimized set of configuration resources.
VM's nic (vNic) can be connected directly to a VF (1-1) instead of to virtual network bridge (vm network). Bypassing the  virtual networking devices on the host reduces latency and CPU utilization.<br> 
[[File:Sr-iov.png|600px]]
<BR>

=== High Level Feature Description ===
In order to connect a vNic directly to a VF of SR-IOV enabled nic the vNic's profile should be marked as a "passthrough" one.
The properties that should be configured on the VF are taken from the vNic's profile/network (vlan tag, mtu, custom properties).
Each SR-IOV enabled host-nic should have a definition of a set of networks that it is allowed to service.
When starting the VM, its vNic will be directly connected to one of the free VFs on the host.
But not all PFs are equivalent: the vNic is to be connected via a host-nic that has the vNic's network as one of its allowed networks.

<b>
Note: migration is supported only when exposing a virtualized (or VirtIO) vNic to the guest, and not when exposing the PCI device to it.
</b>

=== Affected Flows ===
==== add/edit profile ====
* <b>passthrough</b>
**  new property that will be added to the profile. 
** passthrough property cannot be changed on edit profile if the profile is attached to a vNic.
** port-mirroring is not enabled on passthrough profile.
** QoS is not enabled on passthrough profile.

==== add/update network on cluster ====
* management, display and migration properties are not relevant for the VFs configuration (e.g if a migration network is attached to nic1 via the PF configuration and also exists in the VFs configuration of nic2- the migration will take place on nic1 and NOT on the VF on nic2). 
* Same for the required property. It doesn't relevant for the VFs configuration and related just to the regular network attachments.

==== add/edit vNic ====
*<b> if the selected vNic profile is marked as passthrough</b>
** it means that the vNic will bypass the software network virtualization and will be connected  directly to the VF.
** vNic type 
*** <b>virtio</b>
**** migration is supported.
*** <b>pci passthrough</b> vNic type will be supported .
**** migration is not supported.
** the vNic profile/network represents set of properties that will be applied on the VF.

==== hot plug nic ====
* <b>plugging</b>
** hot plug of passthough vNic is possible if there is an available VF on one of the PFs that the vNic's network has in its sr-iov configuration. 
* <b>unplugging</b>
** if the vNic is passthrough the VF will be released (and free for use).

==== vNic linking ====
* <b>linking</b>
** linking of passthough vNic is possible if there is available VF on the one of the PFs the vNic's network is in its sr-iov configuration. 
* <b>unlinking</b>
** if the vNic is passthrough the VF will be released (and free for use).
 
==== sr-iov host nic management ====
* new command that will be responsible for updating the SR-IOV related data on the nic.
*<b>num of VFs</b>
** num of VFs is a new property that will be added to sr-iov capable host nic. 
** it is used  for admin to enable this number of VFs on the nic. <br> Changing this value will remove all the VFs from the nic and create new #numOFVfs VFs on the nic.
** valid value is  0 or bigger (up to the maximum supported number by this nic, as reported by getVdsCaps).
** this property can be updated just on nics that support sr-iov (as reported by getVdsCaps).
** this property can be updated just if all the VFs on the PF are free (as reported by getVdsCaps).
* <b>networks</b>
** list of  the network names that their configuration can be applied on the nic's VFs.
** just vm networks are allowed to appear in this list.
*** it means that if the network of a passthrough vNic is in the list, the vNic can be connected to a free VF on this physical nic. 
** the same network can appear in more than one nic's sr-iov network list.
** in case 'all networks allowed' is true this list is ignored.
* <b>all networks allowed</b>
** a boolean property that means there are no network restrictions and all the networks are allowed to be configured on the nic.
*<b> labels</b>
** a list of labels
** all the networks that their label is in the list will be attached to the sr-iov networks list of the nic.
** the same sr-iov label can be on more than one nic. 
** in case all networks allowed is true this list is ignored.
* configuring SR-IOV related data on nics that are slaves of a bond is permitted.

==== run vm ====
*<b>scheduling host</b>
** if the VM has a passthrough vNic, the physical nics to which the vNic's network is attached to are being checked.
*** if there are no available VFs on none of the nics, the host is filtered out from the scheduling.
*** if all the hosts were filtered out from the scheduling the running of the VM fails and an appropriate error message is displayed.
* the engine will pass the following to the vdsm-
** the PF the vNic should be connected to one of its VFs.
** the network configuration that should be applied on the VF (vlan, mtu).

==== migration ====
* supported only if there is no vNic of pci-passthrough type.
* scheduling the host- same as in run vm.
* the engine will pass to vdsm the PF the vNic should be connected to one of its VFs.

=== VDSM API ===
==== create ====
<pre> create(Map createInfo) </pre>
<pre>
params = {
 (Network VM device struct should be extended)
 {
  type: INTERFACE
  ..
  pf_name: string  <---  new property- the name of the PF the vNic should be connected to one of its VFs.
  vf_vlan: int <---  new property- the vlan id that should be applied on the VF the vnic will be connected to.
  vf_mtu: int <---  new property- the mtu that should be applied on the VF the vnic will be connected to.
 }
}
</pre>

* the selection of VFs should be done on the vdsm side, before calling the libvirt module.
* vf_vlan and vf_mtu  should be applied on the VF before starting the vm.

==== migrate ====
<pre> migrate(Map<String, String> migrationInfo, Map<String, Object>> vnics) </pre>

<pre>
vnics = {
   alias {
    pf_name: string  <---  the name of the PF the vnic should be connected to one of its VFs on the dst host.
 }
}
</pre>

* For each vnic the <b>src host</b> should pass to the <b>dst host</b> the <b>PF</b> to which's VF the vnic should be connected (as passed on the <b>migrate</b> verb from the engine).
* All the parameters (vlan, mtu, etc...) are copied from the src nic to the dst nic, so there is no need to also pass the vlan and the mtu that were applied on the VF during create vm.

==== updateSriovNumVfs ====
<pre>
updateSriovNumVfs(String nicName, int numOfVf)
</pre>

* this verb updates 'sriov_numvfs' file in sysfs (/sys/class/net/'device name'/device/sriov_numvfs) which contains the number of VFs that are enabled on this PF.
** The update is done by first changing the current value to 0 in order to remove all the existing VFs and then changing it to the desired value.
** Since changes in the 'sriov_numvfs' are not persistent across reboots the value should be stored in the vdsm's db and re-applied after each reboot.
* the update should be blocked if-
** one or more of the VFs on the nic are not free.
** the desired value is bigger than sriov_totalvfs.

==== getVdsCaps ====
* vdsCaps should report for each host-nic that supports sr-iov:
** sriov_totalvfs - contains the maximum number of VFs the device could support.
** sriov_numvfs- contains the number of VFs currently enabled on this device.
** sriov_freevfs- contains the number of VFs on the nic that are free.
* today free VFs are reported by the vdsm on getVdsCaps. It should be avoided. Just PFs should be reported.
** free VF considered as VF that a vm can be connected directly to it (no ip, no device [tap, bridge, etc]).

=== User Experience ===
==== Setup networks ====
<b>Option 1</b>
* SR-IOV capable nics
** Should have sr-iov enabled icon [[File:Nic_sr_iov.png]]
** Edit nic dialog should be expended to contain VFs managenet tab and PF tab
*** Edit PF labels <br/> [[File:Sriovphisical.png|600px]]
*** VFs managenet tab <br/> [[File:Sriovvirtual.png|600px]]
*** Edit num of VFs <br/> [[File:Sriovnumsetting.png|600px]]
*** Edit VFs networks and labels <br/> [[File:Sriovcustom network.png|600px]]
** SR-IOV capable nics which are slaves of a bond should have the same edit dialog as regular SR-IOV capable nics just without the PF tab.
** Nic which don't support sr-iov shouldn't have tab at all (should look the same as they look now, before the feature).

<b>Option 2</b>
* Adding new 'sr-iov configuration' tab to setup network dialog.
** The tab will display just sr-iov capable nics.
** The 'unassiged networks' section will be called just 'Networks'
*** It will contain all the vm networks. 
*** Since the same network can be attach to more than one nic, it won't be possible to detach a network from this section (if a network from the 'Networks' section is dragged to a nic, it will be presented on both the nic and the 'Networks' section).
** If there are no networks attached to the nic the default is 'all networks in cluster'.
** Each nic will have edit dialog for updating num of vfs.
** Hosts with no SR-IOV enabled nic will have the regular display and won't have tabs.
** TBD: mock for option 2

==== Add/Edit vNic profile ====
* Passthrough property is added to the dialog.
* If passthrough is true, port mirroring and QoS should be disabled. <br/>
[[File:Vm_interface_profile.jpg|500px]]

==== Add/Edit vNic ====
* In case the selected profile is passthrough and the selected vNic type is pci-passthrough a waring message which indicates migration is not supported should be displayed.

=== REST API ===
==== Vnic profile ====
<pre>
api/vnicprofiles/[profile_id]
</pre>
Adding 'passthrough' boolean property.

==== SR-IOV host nic management ====
The <b>VFs configuration</b> on a SR-IOV enabled nic is represented as a sub resource of a nic.<br>
<pre>
/api/hosts/[host_id]/nics/{nic:id}/vfsConfig
</pre>
*Supported actions:
**<b>GET</b> return the VFs configuration of the nic (num of VFs, allowed networks and labels).
**<b>PUT</b> updating the VFs configuration of the nic .
<pre>
<num_of_vfs>num</num_of_vfs>
<all_networks_allowed>false</all_networks_allowed>
<networks>
<network id='net_id1'>
<network id='net_id2'>
</networks>
<labels>
<label id='lbl_id1'>
<label id='lbl_id2'>
</labels>
</pre>

* 'all_networks_allowed' is false by default.
* If the 'all_networks_allowed' is true, the networks and labels lists are ignored.
* passing empty networks/labels list (i.e </networks> or </labels>) will remove all the networks/labels from the VFs config.
* doesn't passing the networks/labels list at all will remain the network/labels in the VFs config unchanged.

== Benefit to oVirt ==
* Configuration of vNics in 'passthrough' mode directly from the gui/rest.
* Configuring max-vfs on a sr-iov enabled host nic via setup networks.
* migration of vms using sr-iov.

== Limitations ==
In order for migration to be supported the passthrough vNic should be of VirtIo type.
That means the vNic is not connected in a PCI passthrough mode directly to the VF, but connected to a macVTap device which is connected to the VF. <br>
TBD- adding a performance comparison between VF+macvtap vs VF+passthrough vs PF+bridge+tap.

== Future features ==
* "Nice to have passthrough"
** Add a property to passthrough vNic profile that indicates whether connecting the vNic  directly to VF is mandatory or the vNic can be connected to a regular network bridge in case there are no available VFs on any host. 
**  A benefit of this "Nice to have passthrough" is that one could set it on vNic profiles that are already used by VMs. Once they are migrated to a new host, the passthrough-ness request would take effect.
* Displaying on passthrough vNic the VF to which it is connected, and the corresponding PF.
*  Create a common infrastracture for SR-IOV and VM-FEX.
* Applying on VF the QoS configured on profile/network.
* Support port mirroring on passthrough vNics.

== Dependencies / Related Features ==
* [http://www.ovirt.org/Features/hostdev_passthrough hostdev passthrough]
*[http://www.ovirt.org/Features/UCS_Integration UCS integration]
*[http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1789382a72a537447d65ea4131d8bcc1ad85ce7b PCI: SRIOV control and status via sysfs]
* List of drivers that support SR-IOV configure:
** [http://paste.fedoraproject.org/138021/41214685 rhel6]
** [http://paste.fedoraproject.org/138020/21468381 rhel7]

== Documentation / External references ==
* [https://bugzilla.redhat.com/869804 BZ 869804]: [RFE] [HP RHEV FEAT]: SR-IOV enablement in RHEV
* [https://bugzilla.redhat.com/984601 BZ 984601]: [RFE] [HP RHEV 3.4 FEAT]:Containment of error when an SR-IOV device encounters an error and VFs from the device are assigned to one or more guests (RHEV-M component)
* [https://bugzilla.redhat.com/848202 BZ 848202]: [RFE] Virtio over macvtap with SRIOV - RHEV Support
* [https://bugzilla.redhat.com/848200 BZ 848200]: [RFE] MAC Programming for virtio over macvtap - RHEV support

== Open issues ==
* sriov_numvfs
** how should the sriov_numvfs update be sent to the vdsm?
*** on of the setupNetworks verb (by adding a nics dictionary to the setup networks parameters).
*** on a new verb- updateSriovNumVfs.
**** will it be possible to update the num of VFs on a PF that is used by the management network?
* Is applying MTU on VF supported by libvirt?
* Setup networks gui- which option to choose 1 (editing sr-iov config of a nic on edit nic dialog) or 2 (tabed setup networks dialog)?
* migration with pci-passthrough
** instead of blocking migration in case the vm has pci-passthrough vnics, this marking can be tuned by the admin. 
If the admin requests migration despite the pci-passthrough type, Vdsm can auto-unplug the PCI device before migration, and plug it back on the destination.
That would allow some kind of migration to guests that are willing to see a PCI device disappear and re-appear.

== Notes ==
* setting properties on VF- <br> ip link set {DEVICE} vf {NUM} [ mac LLADDR ] [ vlan VLANID [ qos VLAN-QOS ] ] [ rate TXRATE ] [ spoofchk { on | off } ] [ state { auto | enable | disable} ]
* Update num of VFs
** /sys/class/net/'device name'/device/sriov_totalvfs
*** contains the num of vfs supported by the device
*** just sr-iov supported nics contain this file.
** /sys/class/net/'device name'/device/sriov_numvfs
*** contains num of VFs enabled by the nics.
*** In order to update the file the value should first be changed to 0 (i.e all the VFs should first be removed).
**** for example- echo '0' >  /sys/class/net/eth0/device/sriov_numvfs ==> echo '7' >  /sys/class/net/eth0/device/sriov_numvfs
*** just sr-iov supported nics contain this file.

[[Category:Feature]]
[[Category:Networking]]
