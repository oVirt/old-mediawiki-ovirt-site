This hook enables the use of Cisco VM Fabric Extender (VM-FEX) in oVirt.

The hook receives a VM NIC as it is defined in the engine and a FEX Port Profile name, and reattaches that NIC to the FEX Port instead of the logical network it is assigned to in the Engine. this way the NIC MACs can be controlled in the Engine, but the NIC is actually running on FEX.


Syntax:
    vmfex=NIC1:profile1,NIC2:profile2...

Will add 2 virtual nics attached to profile1 and profile2 using the vnic MAC addresses specified, replacing the actual NICs assigned to the VM.
The mapping is by order of NIC<number> in the parameters, mapped to the order of the "interface" elements in the devices of the VM xml, as well as the NICs defined for a VM in the Engine admin GUI.

Libvirt internals:
Replace the existing interface xml:
    <interface type="bridge">
        <mac address="<mac>"/>
        <model type="virtio"/>
        <source bridge="<logical network>"/>
    </interface>
    
with the following interface xml:
    <interface type='network'>
      <mac address='<mac>'/>
      <source network='direct-pool'/>
      <virtualport type='802.1Qbh'>
          <parameters profileid='<Port Profile>'/>
      </virtualport>
      <model type='virtio'/>
    </interface>
    
Note how <mac> is preserved

The hook also defines a dynamic pool of VM-FEX dynamic NICs on every host.
Dynamic network with libvirt (define a NIC pool, so libvirt can assign VMs to NICs dynamically):

      <network>
        <name>direct-pool</name>
        <forward mode="passthrough">
          <interface dev="eth3"/>
          <interface dev="eth4"/>
          <interface dev="eth5"/>
          <interface dev="eth6"/>
          <interface dev="eth7"/>
          <interface dev="eth8"/>
          <interface dev="eth9"/>
          <interface dev="eth10"/>
          <interface dev="eth11"/>
        </forward>
      </network>

Using libvirt, the network is defined like this (the hook uses libvirt python API for the same purpose):

   virsh net-define /tmp/direct-pool.xml
   virsh net-start direct-pool
   virsh net-autostart direct-pool

(where /tmp/direct-pool.xml contains the xml above)

(everything else is autogenerated, and shouldn't be specified when defining a guest (but whatever is there after definition should be left in place, e.g. the PCI address)). Note that these interface definitions are completely static - you never need to modify them due to migration, or starting up/shutting down the guest.
