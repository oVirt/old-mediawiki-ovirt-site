== Working with oVirt Gerrit ==
Gerrit is a web based code review system, facilitating online code reviews for projects using the Git version control system.<BR>
Gerrit makes reviews easier by showing changes in a side-by-side display, and allowing inline comments to be added by any reviewer.<BR>
We use Gerrit in the oVirt project in order to review new commits, as it easily enables adding comments, suggestions, ask questions, and etc.<BR>
The following sections are a step-by-step manual to set up a Gerrit environment in your development environment.<BR>
oVirt Gerrit environment is in gerrit.ovirt.org

=== Registering as a user ===
First of all you need to register as a new user to gerrit. You can do that by using any OpenID provider:

* Login page shows Google and Yahoo <BR>
* Any fedora FAS account can login as well via <BR>
https://admin.fedoraproject.org/accounts/openid/id/<username>

=== SSH configuration ===
==== Set SSH keys in Gerrit settings ====
* On your local machine, create a set of SSH keys (if you don't already have one) via 
 <nowiki>
'ssh-keygen -t rsa'
 </nowiki>
* Update via Gerrit settings the SSH public key to allow SSH to Gerrit

==== Define Gerrit in ~/.ssh/config ====
 <nowiki>
Host gerrit.ovirt.org
   HostName gerrit.ovirt.org
   Port 29418
   User <username>
 </nowiki>

==== Verify SSH configuration ====
In order to verify your SSH configuration, do the following:
 <nowiki>
ssh gerrit.ovirt.org
 </nowiki>
if you get this, it is fine:
 <nowiki>
***    Welcome to Gerrit Code Review    ****
 </nowiki>
=== Git configuration and procedures ===
==== Cloning the oVirt-engine repository ====
 <nowiki>
git clone gerrit.ovirt.org:ovirt-engine
 </nowiki>

This can also be done without registering to Gerrit, using:
 <nowiki>
git clone git://gerrit.ovirt.org/ovirt-engine
 </nowiki>
==== install the change-ID hook ====
'''You must do this before you commit anything'''<BR>
In order to easily track commit changes in Gerrit, each commit must have a change-ID. This change-ID is added automatically via a Git hook. In order to install this hook do the following:
 <nowiki>
cd ovirt-engine
scp -p gerrit.ovirt.org:hooks/commit-msg .git/hooks/
 </nowiki>

==== Rebase ====
 <nowiki>
git fetch -v
git rebase origin/master
 </nowiki>

==== Push your patch for review ====
 <nowiki>
git push gerrit.ovirt.org:ovirt-engine HEAD:refs/for/master
 </nowiki>

==== Track patch review process ====
The review process is comprised of:
* Anyone can send a patch
* A review in Gerrit can result in:
** +2 - Looks good to me, approved
** +1 - Looks good to me, but someone else must approve
**  0 - No score
** -1 - I would prefer that you didn't submit this
** -2 - Do not submit
* Anyone can code review and comment on the patch and +1/-1. This helps maintainers in reviewing the patches<BR>
* A maintainer can code review it with +2 it, which is required to commit (submit) it<BR>
* Someone (can be anyone) needs to confirm they checked the patch works and flag it as verified +1<BR>
* A maintainer can submit (commit) the patch when it has:<BR>
** Code Review: +2
** Verified: +1
* NACK-ed (-1/-2) patches should not be submitted<BR>
* A submitted patch is automatically merged to the git repository<BR>

[[Category:Documentation]]
[[Category:Development environment]]
[[Category:Git]]
[[Category:Source code repository]]

==== Submit your topic branch to gerrit ====
[http://progit.org/book/ch3-4.html topic branch] is a short-lived branch that you create and use for a single particular feature or related work.

* First, download git-review tool from openstack and copy to your project
**git-review is a tool that helps submitting git branches to gerrit for review. 
**URL: https://github.com/openstack-ci/git-review
 <nowiki>
  $ git clone git://github.com/openstack-ci/git-review.git
  $ cp git-review/git-review project/ </nowiki>

* Setting git-review:
 <nowiki>
git-review, by default, looks for a git remote called gerrit, and submits the current branch to HEAD:refs/for/master at that remote.
If the "gerrit" remote does not exist, git-review looks for a file called .gitreview at the root of the repository with information
about the gerrit remote. Assuming that file is present, git-review should be able to automatically configure your 
repository the first time it is run. </nowiki>

* Example: project/.git/config
 <nowiki>
[remote "gerrit"]
  url = http://gerrit.ovirt.org/p/project
  pushurl = ssh://username@gerrit.ovirt.org:29418/project.git
  fetch = +refs/heads/*:refs/remotes/gerrit/* </nowiki>

* Execute git-review setup
 <nowiki>
  $project> ./git-review -s </nowiki>

* Create your local branch feature
 <nowiki>
  $project> git checkout -b engine-register </nowiki>

* Check if you are under branch
 <nowiki>
  $project> git branch
  * engine-register
  master  </nowiki>

* Execute the changes and commit it
 <nowiki>
  $project> vi source.py
  $project> git add source.py
  $project> git commit  </nowiki>

* Submit the topic branch changes to gerrit
 <nowiki>
  $project>./git-review -t engine-register
  remote: Resolving deltas:   0% (0/3)
  remote: (W) fba45fe: no files changed, message updated
  To ssh://user@gerrit.ovirt.org:29418/project.git
 * [new branch]      HEAD -> refs/for/master/engine-register </nowiki>

* Now go to the gerrit url for your change and note that the topic field is changed to your topic branch name.
