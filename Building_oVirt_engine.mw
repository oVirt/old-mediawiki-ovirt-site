== Prerequisites ==
#  Linux based operating system with support for OpenJDK 1.6.0 and Maven 2. 
#  Internet connection

Note that while this guide was written and tested using Fedora other Linux Distributions can and have been used to build the ovirt-engine project. Where distribution specific packaging commands are specified in this guide use the syntax that applies for your distribution.

<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 1</span></p>

== Getting VDSM ==

Not exactly engine based, but the current vdsm packages for running a host are located [http://fsimonce.fedorapeople.org/vdsm/ here]

<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 2</span></p>
== Installing Build Tools ==
=== Installing OpenJDK ===
 
The supported Java development and runtime environments for the ovirt-engine project are provied by OpenJDK 1.6.0. Install the java-1.6.0-openjdk-devel package to obtain OpenJDK 1.6.0:

 <nowiki>
#> yum install -y java-1.6.0-openjdk-devel</nowiki>

Use the 'alternatives' command to verify that 'javac' is correctly linked to the openjdk-1.6.0 instance of the Java compiler:
 <nowiki>
$> alternatives --display javac
javac - status is auto.
 link currently points to /usr/lib/jvm/java-1.6.0-openjdk.x86_64/bin/javac
...</nowiki>

Where the link does not point to the correct instance of the Java compiler then you must update it, for example:
 <nowiki>
$> alternatives --set javac /usr/lib/jvm/java-1.6.0-openjdk.x86_64/bin/javac</nowiki>

=== Installing git ===

The ovirt-engine source code is stored in a GIT repository. As such GIT is required to obtain the latest source code.

 <nowiki>
$>yum install -y git
</nowiki>

=== Installing maven2 ===

oVirt engine is using maven version 2.2.x, maven 3.x will not work. <BR>
 <nowiki> 
yum install -y maven2
</nowiki>
Please validate mvn is in the path. Note that on some distributions, particularly recent releases of Fedora, binary for Maven 2 is in fact mvn2. You can confirm which version is in use by appending the --version parameter to the mvn or mvn2 call.

=====Maven personal settings=====

Create your ~/.m2/ directory
 <nowiki>$> mkdir ~/.m2</nowiki>

Use wget -O ~/.m2/settings.xml http://www.ovirt.org/w/images/1/18/Settings.xml.png or
Copy paste the content of the file below into ~/.m2/settings.xml

 <nowiki>
<?xml version="1.0"?>

<settings xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
          http://maven.apache.org/xsd/settings-1.0.0.xsd">

<!--**************************** PROFILES ****************************-->

        <activeProfiles>
                <activeProfile>oVirtEnvSettings</activeProfile>
        </activeProfiles>

        <profiles>
                <profile>
                        <id>oVirtEnvSettings</id>
                        <properties>
                                <jbossHome>/usr/local/jboss-5.1.0.GA</jbossHome>
                                <JAVA_1_6_HOME>/usr/lib/jvm/java-1.6.0-openjdk.x86_64</JAVA_1_6_HOME>
                        </properties>
                        <repositories>
                                 <repository>
                                    <id>jboss-public-repository-group</id>
                                    <name>JBoss Public Maven Repository Group</name>
                                    <url>https://repository.jboss.org/nexus/content/groups/public</url>
                                    <layout>default</layout>
                                    <releases>
                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>
                                    </releases>
                                    <snapshots>
                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>
                                    </snapshots>
                                </repository>
                                <repository>
                                    <id>repository.jboss.org</id>
                                    <url>http://repository.jboss.org/maven2</url>
                                    <releases>
                                    </releases>
                                    <snapshots>
                                       <enabled>false</enabled>
                                    </snapshots>
                                </repository>

                                <repository>
                                    <id>jboss-deprecated-repository-group</id>
                                    <name>JBoss Deprecated Maven Repository Group</name>
                                    <url>https://repository.jboss.org/nexus/content/repositories/deprecated/</url>
                                    <releases>
                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>
                                    </releases>
                                    <snapshots>
                                       <enabled>true</enabled>
                                       <updatePolicy>never</updatePolicy>
                                    </snapshots>
                                </repository>
                        </repositories>

                        <pluginRepositories>
                                <pluginRepository>
                                   <id>jboss-public-repository-group</id>
                                   <name>JBoss Public Maven Repository Group</name>
                                   <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
                                   <layout>default</layout>
                                   <releases>
                                      <enabled>true</enabled>
                                      <updatePolicy>never</updatePolicy>
                                   </releases>
                                   <snapshots>
                                      <enabled>true</enabled>
                                      <updatePolicy>never</updatePolicy>
                                   </snapshots>
                                </pluginRepository>
                        </pluginRepositories>
                </profile>
        </profiles>
</settings>

</nowiki>

* Do not omit the active-profiles element in the above xml, it is crucial.


<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 3</span></p>

== Installing JBoss AS ==

=== Automatically (From RPMs) ===

RPMs have been provided for Fedora 15 users. These are not however part of the Fedora 15 release and are only available from a third party repository. First, add the third part repository as a source for software:

 <nowiki>
    #> wget -P /etc/yum.repos.d/ http://ranglust.fedorapeople.org/ovirt-engine-jbossas/ovirt-engine-jbossas.repo</nowiki>

Then install the ovirt-engine-jbossas package:

 <nowiki>
    #> yum install ovirt-engine-jbossas
</nowiki>

Finally, check that the installed service runs:

 <nowiki>
    #> service jboss start
    #> ps ax | grep java
 </nowiki>

=== Manually (From Zips) ===

 <nowiki>
    $> wget http://sourceforge.net/projects/jboss/files/JBoss/JBoss-5.1.0.GA/jboss-5.1.0.GA-jdk6.zip/download
    $> unzip jboss-5.1.0.GA-jdk6.zip
    $> sudo mv jboss-5.1.0.GA /usr/local/jboss-5.1.0.GA</nowiki>

Check that it runs:

 <nowiki>
    $> /usr/local/jboss-5.1.0.GA/bin/run.sh
</nowiki>

Ensure that you have write access to $JBOSS_HOME/server/default/deploy to which oVirt-engine will be deployed.

'''Troubleshooting'''

# Some useful JAVA_OPTS:
## -Xmx512m - maximum Java heap size of 512m
## -Xdebug - include debugging
# Run with -b 0.0.0.0 to have it bind to all IP addresses;
# Make sure you've nothing bound to port 8080 or 8009
## Other relevant ports JBoss may require: 8443/8083/1090/4457
# For external connections, make sure your FW allows 8080 incoming traffic
# If your machine has and selinux policy installed, make sure it will not block JBoss
# JBoss will bind to your host's name. Make sure it's resolvable by adding it to /etc/hosts or any other method. 

=== JBoss AS Security ===

Note that JBoss AS 5.1 does not include security fixes for issues found after it was released. These fixes are rolled into later versions of JBoss AS. By default, JBoss AS permits unauthenticated access to the JMX console. It is important that the JMX console is configured to require authentication. Failure to do so will render the system vulnerable to several known exploits, including the [http://community.jboss.org/blogs/mjc/2011/10/20/statement-regarding-security-threat-to-jboss-application-server JBoss Worm] that exploits [https://access.redhat.com/kb/docs/DOC-30741 CVE-2010-0738]. Please follow [http://community.jboss.org/wiki/SecureTheJmxConsole these instructions] to secure the JMX console.

<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 4</span></p>




<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 5</span></p>

== Installing PostgreSQL ==

[[Installing_PostgreSQL_DB]]


<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 6</span></p>
== Building oVirt-engine from source ==

==== Clone oVirt-engine codebase ====

Choose a directory where you want to keep oVirt sources and 'cd' to it
 <nowiki>
$> git clone git://gerrit.ovirt.org/ovirt-engine
</nowiki>

- Let $OVIRT_HOME be <your_chosen_source_location>/ovirt-engine

'''Note:''' the above cloning is for read only, if you want to contribute you might want to skip to the section on gerrit before moving to the next steps.

==== Creating the database ====
In your git repository, run the following command

 <nowiki>
# > cd $OVIRT_HOME/backend/manager/dbscripts_postgres/
# > ./create_db_devel.sh -u postgres 
</nowiki>

On some installations you will receive an error message about uuid-ossp.sql not being found. This is an open issue.
https://bugzilla.redhat.com/750626

To work around the issue, edit the file $OVIRT_HOME/backend/manager/dbscripts_postgres/create_db.sh and change the references to uuid-ossp.sql to point to the right location.

==== Build ====

If you want only virt-engine-core and rest api:
 <nowiki>
 $> cd $OVIRT_HOME
 $> mvn clean install
</nowiki>

For compiling the web-admin and user-portal in addition to the api and engine use:
 <nowiki>
 $> cd $OVIRT_HOME
 $> mvn clean install -Pgwt-admin,gwt-user
</nowiki>

Notes:<BR>
# Compiling the webadmin and userportal takes (a long) time.<BR>
# Make sure to run this with your user, not 'root', running as root will result in a missing settings.xml file in the 'root' home directory.
# To skip the execution of the unit tests and only compile and package ovirt, add the option: -DskipTests=true  to the mvn build command
# You can reduce the build time and memory consumption - look at the temp section at the end.

==== deploy ====

The first deployment of the application to JBoss AS container should use the setup profile:

 <nowiki>
$> cd $OVIRT_HOME/ear
$> mvn clean install -Pdep,setup
</nowiki>

There is a issue with the dep and setup_postgres profiles getting in the way of each other. the setup_postgres profile will prevent the deployment of the quartz jar to the JBoss server. So after this step completes, run:

 <nowiki>
$> cd $OVIRT_HOME/ear
$> mvn clean install -Pdep
</nowiki>


From this point on, every time you deploy you can simply run:

 <nowiki>
$> cd $OVIRT_HOME/ear
$> mvn clean install -Pdep
</nowiki>

Since postgres is already set up.


<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 7</span></p>
== Testing ==

Assuming JBoss is not running, it should be started:
 <nowiki>
$> /usr/local/jboss-5.1.0.GA/bin/run.sh -b 0.0.0.0
</nowiki>

Use username '''admin@internal''' and password '''letmein!'''

Accessing the RESTful API:

 <nowiki>
wget -O - --debug --auth-no-challenge --http-user=admin@internal --http-password='letmein!' head='Accept: application/xml' http://<server name>:<port>/api/
</nowiki>
or from the browser
 <nowiki>
http://<server name>:<port>/api
</nowiki>

Accessing the web-admin: <BR> 
 <nowiki>
http://<server name>:<port>/webadmin
</nowiki>

Accessing the user-portal <BR> 
 <nowiki>
http://<server name>:<port>/UserPortal
</nowiki>


<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 8</span></p>
== Code contribution: Gerrit ==

oVirt-engine is working with Gerrit for code contribution.<BR>
More detail can be found in [[Working_with_oVirt_Gerrit]].

== Temp == 

1. Two patches for replacing a deprecated repository are needed for the build to succeed <BR>
2. For quick and dirty build you can compile GWT to work with a specific browser (that will <BR>reduce the permutation number to one).
 
Add the lines below to <BR>
$OVIRT_HOME/frontend/webadmin/modules/webadmin/src/main/java/org/ovirt/engine/ui/webadmin/WebAdmin.gwt.xml<BR>
$OVIRT_HOME/frontend/webadmin/modules/userportal/src/main/java/org/ovirt/engine/ui/userportal/UserPortal.gwt.xml

 <nowiki>
<!-- Reduce the number of permutations to compile, just for tests: -->
<set-property name="user.agent" value="gecko1_8"/>
 </nowiki>

[[Category:Draft documentation]]
[[Category:Engine]]
[[Category:How to]]
