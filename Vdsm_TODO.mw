= What Can You Do for Vdsm =

== Cleanup ==
* <tt>pylint -E `git ls-files | grep '.py$'`</tt> makes me cry. A lot of it is "only" about bad style, but we should clear it up and add it to our <tt>make check-local</tt>. We should grow up and pass <tt>pychecker</tt> too.

* Improve Vdsm portability. We are very much Fedora-centric at best. Do you want to have Vdsm on your pet distribution? Own that port!

* remove all usage of <tt>sudo</tt>, and replace with specific calls to <tt>superVdsm</tt>.

* <strike>have a logrotate-dependent logrotate.conf that works on Fedora and EL equally well.</strike> Our current 'sed' of the EL6-offensive line is good enough.

* <strike>Configure vdsm to use syslog , but now we need to stop trashing the console</strike> -- done by Mark Wu.

* <strike>Simplify the SysV init script, split most of its code to a "[http://gerrit.ovirt.org/295 vdsm-tool]"</strike>. Mostly done by Zhou ZhengSheng & Co.

* vdsm-tool should assume responsibility on hairy stuff such as [http://bugzilla.redhat.com/547424 configuring multipath], which should not be the business of Vdsm proper.

* <strike>running vdsClient from the project root dir ends with tears. Some PYTHONPATH games should fix this.</strike> done.

* <strike>require only what we actually use in libvirt, instead of the whole libvirt.rpm.</strike> done in Vdsm and mom. http://gerrit.ovirt.org/#/c/15760/

* vdsm/sampling.py: stop storing self._ifids and _rates in the thread. Rate can sit in the interfaces dict per sample.

== Testing ==
* <strike>write an automatic script that runs on each and every new change to gerrit, and adds an insulting comment if <tt>pyflakes</tt> fails for the new change.</strike> Thanks, Robert!

* enable coverage during Jenkins tests.

* extend the former script, so that it runs a complete <tt>`make distcheck && make install`</tt> in a confined environment (chroot, VM) and reports if there is an error.

* run unit and functional tests on reviewed patches (before submission).

* add more cases to vmTests.testBuildCmdLine: add more examplary vmParams and their domxml.

* make <tt>getAllVolumesTests</tt> more meaningful, not only counting the number of volumes, but testing the image structure.

== Features ==
* Support striping for disk images.

* let Vdsm install and run on hosts with no iscsid (report that iscsi is missing to Engine?)

* <strike>add hooks for device hotplug</strike> done.
* <strike>add hooks for device update http://bugzilla.redhat.com/893576</strike> done.

* add hooks for network operations

* <strike>Add configurable QoS controls on vnics http://libvirt.org/formatdomain.html#elementQoS</strike>

* <strike>Use tmpfile.d when needed.</strike>

* use <interface type='network'>. In the future, this would allow us to migrate a VM from a bridge-based network to funkier types of networks defined in http://libvirt.org/formatnetwork.html http://gerrit.ovirt.org/#/c/9441/

* <strike>make the ''macspoof'' hook of https://bugzilla.redhat.com/908704 per vnic, using http://www.ovirt.org/Features/Device_Custom_Properties</strike>

* work in conjunction with Network Manager.

* report 'bootproto' and bonding_opts not via cfg. https://bugzilla.redhat.com/987813

* a hook for fancier VM connectivity

== refactoring ==
* In vm.py, libvirtvm.py, clientIF.py  there is a mess of prepare*Path functions (end their respective teardowns), which is too complex to fathom. We have to convert all drive specifications (PDIV,GUID,path) into Drive object at the API entry.

* We store VM configuration/state in 3 different places: vm.conf (and its on-disk persistency), vm object and its vm.devices[], and within libvirt. This creates a hell of inconsistency problems. Think of Vdsm crashing right after hotpluggin a new disk. The added disk would not be monitored by Vdsm post-restart and not even by destination vdsm if the VM is migrated.

* lvm.PV.guid is devicemapper-owned piece of information; lvm has nothing to do with it, and jumps through [http://gerrit.ovirt.org/2940 hoops] to produce it. Instead, it should be produced by devicemapper and consumed directly by blockSD.

* Define an API.VMState "enumeration" and use API.VMState.UP instead of the string 'Up'.

* <strike>factor betterPopen and betterThreading out of vdsm. They deserve a pipy review under the names [https://pypi.python.org/pypi/cpopen cPopen] and [http://pypi.python.org/pypi/pthreading pthreading] respectively.
https://bugzilla.redhat.com/show_bug.cgi?id=903246</strike>

* factor the task framework out of storage. Networking may need it, too.

* make storage_mailbox testable; use bytearrays instead of 1MiB strings; use fileUtils.DirectFile instead of forking /bin/dd all the time.

* split VM monitoring threads out of core Vdsm. Monitoring process would write to a memory-mapped file the most up to date values, which can be read by Vdsm on demand. This would reduce thread contentions in Vdsm and may simplify the code.

* split fenceNode to its own testable module.

== Bugzilla ==

* pick one of the [https://bugzilla.redhat.com/buglist.cgi?action=wrap&bug_file_loc=&bug_file_loc_type=allwordssubstr&bug_id=&bug_id_type=anyexact&chfieldfrom=&chfieldto=Now&chfieldvalue=&component=vdsm&deadlinefrom=&deadlineto=&email1=&email2=&emailtype1=substring&emailtype2=substring&field0-0-0=flagtypes.name&keywords=&keywords_type=allwords&longdesc=&longdesc_type=allwordssubstr&short_desc=&short_desc_type=allwordssubstr&status_whiteboard=&status_whiteboard_type=allwordssubstr&type0-0-0=notsubstring&value0-0-0=rhel-6.2.0&votes=&=&bug_status=NEW NEW bugs], post a patch to [http://gerrit.ovirt.org gerrit], and make the bug yours.

* undersntand what is the <tt>(deleted)</tt> state of an nfs mount (in /proc/mounts) and deal with it properly in vdsm. See http://bugzill.redhat.com/807351 .

[[Category:Vdsm]]
