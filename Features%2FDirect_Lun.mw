== Introduction ==

Any block device can be used as local disk in the VM specifying it's GUID.

== Engine - VDSM API ==

A new API is added for this feature.

The API specifies a block device by GUID or UUID, instead of the PDIV quartet of a regular [[Live_Snapshots#Introduction|VDSM volume]].

Other disk device parameters are the same as in VDSM volumes.

<pre>
'devices': [   
       {'type': 'disk',
        'device': 'disk',
        'iface': 'virtio|ide',
        'index': <int>,                            <--- disk index unique per 'iface' virtio|ide
        'GUID': 'shared disk GUID',                <--- Should be passed instead the PDIV
    <--- Optional:
        'address': 'PCI|IDE address dictionary',   <--- PCI = {'type':'pci', 'domain':'0x0000', 'bus':'0x00', 'slot':'0x0c', 'function':'0x0'} ,  
                                                        IDE = {'type':'drive', 'controller':'0', 'bus':'0', 'unit':'0'}
                                                        Only after the VM was running, if you want stable addresses.
        'format': 'raw',                           <--- Only raw disks are supported.
        'bootOrder': <int>,                        <--- global boot order across all bootable devices
        'propagateErrors': 'off',
        'shared': 'True|False',                    <--- whether disk is shared
        'optional': 'True|False',                  <--- whether disk is optional (VM can be run without optional disk if inaccessible)
                                                        THIS FEATURE IS UNSUPPORTED YET!
        'readonly': 'True|False'}
</pre>

The ''GUID'' is returned in the getDeviceList response.

VM disks specified this way should support all the modes and features, i.e Shared Hot-Plug, etc.


See [[Features/Design/StableDeviceAddresses]] for the complete device interface.

== Engine considerations ==
=== The vDisk entity ===
* Engine should have an abstraction that contains: 
** Backing storage (returned by getDeviceList or equivalent)
** The image stack (history).
** Other Engine required info.

This object will be called a '''vDisk'''.

An hdisk represents the time evolution of a VM disk and extra Engine data.

It's started from a ''single'' block device returned by getDeviceList (or equivalent function).

Creating a new entity from the same block device should result in the same hDisk entity.
(Revise it: still an open question.)

Successive snapshots creates new (time stamp, image UID) entries.

The image UID can be transferred to runVM, hot-plug, etc.

== OVIRT flows ==

These flows should be supported from the GUI.
* Import disk
# Discovery targets
# Connect to the target
# Get device list
# Choose a block device:
#* default: Unattached devices
#* option: From a VM (+ plug)

* Attach to VM (+ plug)
# Select VM
# Select disk
# Plug it
