== Introduction ==

This is a draft of updated building instructions. Please refer to [[Building oVirt engine]] for the current version.

Follow these instructions to successfully build and install the oVirt Engine project in your development environment. Installation and configuration of all required tools to complete the build is also covered. For instructions on obtaining and building VDSM, the package required to turn existing systems into oVirt Nodes, see [[Vdsm Developers]]. Alternatively some binary VDSM builds are available [http://fsimonce.fedorapeople.org/vdsm/ here].

 <nowiki>
#> at the beginning of the command stands for execution as root.
$> at the beginning of the command stands for execution as user.
</nowiki>

== Prerequisites ==
#  Linux based operating system with support for OpenJDK 1.7.0, Maven and PostgreSQL 8.4.8 (or higher).
#  An Internet connection.

Note that while this guide was written and tested using Fedora 17 other Linux Distributions can and have been used to build the ovirt-engine project. Where distribution specific packaging commands are specified in this guide use the syntax that applies for your distribution.

<!--<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 1</span></p>-->

== Installing Build Tools ==
=== Installing OpenJDK ===
 
The supported Java development and runtime environments for the ovirt-engine project are provied by OpenJDK 1.7.0. Install the java-1.7.0-openjdk-devel package to obtain OpenJDK 1.7.0:

'''Fedora'''
 <nowiki>
#> yum install -y java-1.7.0-openjdk-devel</nowiki>

'''Debian'''
 <nowiki>
#> apt-get install openjdk-7-jdk</nowiki>

Use the 'alternatives' command to verify that 'javac' is correctly linked to the openjdk-1.7.0 instance of the Java compiler:
 <nowiki>
$> alternatives --display javac
javac - status is auto.
 link currently points to /usr/lib/jvm/java-1.7.0-openjdk.x86_64/bin/javac
...</nowiki>

Where the link does not point to the correct instance of the Java compiler then you must update it, for example:
 <nowiki>
$> alternatives --set javac /usr/lib/jvm/java-1.7.0-openjdk.x86_64/bin/javac</nowiki>

=== Installing git ===

The ovirt-engine source code is stored in a GIT repository. As such GIT is required to obtain the latest source code.

'''Fedora'''
 <nowiki>#> yum install -y git</nowiki>

'''Debian'''
 <nowiki>#> apt-get install git</nowiki>

=== Installing maven ===

The engine build uses maven 3.0.x.

'''Fedora'''
 <nowiki>#> yum install -y maven</nowiki>

'''Debian'''
 <nowiki>#> apt-get install maven</nowiki>

Once the installation is completed verify that the correct version of the <code>mvn</code> command is in the path:

<pre>
$> mvn --version
Apache Maven 3.0.4
...
</pre>

=====Maven personal settings=====

Create your <code>$HOME/.m2</code> directory (this is where maven stores your personal settings and the artifacts downloaded from internet repositories):

<code>
$> mkdir $HOME/.m2
</code>

You can download a complete personal settings file as follows:

<pre>
wget -O $HOME/.m2/settings.xml http://www.ovirt.org/w/images/1/18/Settings.xml.png
</pre>

Or copy & paste the content below into the file <code>$HOME/.m2/settings.xml</code>:

<pre>
<settings
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <activeProfiles>
    <activeProfile>oVirtEnvSettings</activeProfile>
  </activeProfiles>

  <profiles>
    <profile>
      <id>oVirtEnvSettings</id>
      <properties>
        <jbossHome>/home/myuser/jboss-as</jbossHome>
      </properties>
    </profile>
  </profiles>

</settings>
</pre>

* Do not omit the <code>active-profiles</code> element in the above file, it is crucial.
* Remember also to change the <code>jbossHome</code> property to the directory where you have the application server installed (more instructions later in this document).

== Installing JBoss AS ==

Note that development environments should install the application server using the zip files, not the operating system packages. The reason is that this allows the developer to use its own unprivileged user to run the application server without needing to use root privileges.

=== Downloading and installing the application server ===

Select and create the directory where you want to install the application server. Many developers use <code>/usr/share/jboss-as</code>, but you can use any directory you like, for example <code>$HOME/jboss-as</code>. From now on we will refer to that directory with the environment variable <code>JBOSS_HOME</code>:

<pre>
$> export JBOSS_HOME=$HOME/jboss-as
$> mkdir -p $JBOSS_HOME
</pre>

'''''Note''': It might be convenient to add that variable to your <code>$HOME/.bash_profile</code> file, so that you get it automatically whenever you log in.''

Download and install version 7.1.1 of the application server:

<pre>
$> cd $JBOSS_HOME
$> wget http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip
$> unzip jboss-as-7.1.1.Final.tar.gz
$> mv jboss-as-7.1.1.Final/* .
$> rmdir jboss-as-7.1.1.Final
</pre>

Update the <code>jbossHome</code> property in your personal maven settings file <code>$HOME/.m2/settings.xml</code>.

Check that the application server starts correctly:

<pre>
$> cd $JBOSS_HOME/bin
$> ./standalone.sh
</pre>

Ensure that you have write access to <code>$JBOSS_HOME/standalone/deployments</code> to which the engine will be deployed.

===Troubleshooting===

# Some useful <code>JAVA_OPTS</code>, these can be manually added to the <code>$JBOSS_HOME/bin/standalone.conf</code> script as required:
## <code>-Xmx512m</code> - maximum Java heap size of 512 MiB
## <code>-Xdebug</code> - include debugging
# Run with <code>-b 0.0.0.0</code> to have it bind to all IP addresses (by default it binds to the 127.0.0.1 address only).
# Make sure you've nothing bound to port 8080 or 8009.
## Other relevant ports JBoss may require: 8443/9990/9999/4447.
# For external connections, make sure your firewall allows 8080 incoming traffic.
# If your machine has and selinux policy installed, make sure it will not block JBoss.
# JBoss will bind to your host's name. Make sure it's resolvable by adding it to <code>/etc/hosts</code> or any other method.

== Installing PostgreSQL ==

[[Installing_PostgreSQL_DB]]

<!--<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 6</span></p>-->

== Building oVirt-engine from source ==

==== Clone oVirt-engine codebase ====

Choose a directory where you want to keep the engine sources and <code>cd</code> to it. Use the <code>git</code> command to clone the engine repository into the current working directory:

<pre>
$> git clone git://gerrit.ovirt.org/ovirt-engine
</pre>

This will create a new <code>ovirt-engine</code> directory containing the cloned repository. For further instructions let the variable <code>$OVIRT_HOME</code> point to the directory where you have cloned the repository:

<pre>
$> export OVIRT_HOME=$PWD/ovirt-engine
</pre>

'''''Note:''' It migtht be convenient to add this environment variable to your <code>$HOME/.bash_profile</code> file to have it automatically whenever you log in.''

'''''Note:''' The above cloning is for read only, if you want to contribute you might want to skip to [[#Code contribution: Gerrit]] before moving to the next steps.''

==== Creating the database ====

Change into your git repository:

<pre>
$> cd $OVIRT_HOME/backend/manager/dbscripts
</pre>

Then run the following command, as root, to create the database:

<pre>
#> ./create_db_devel.sh -u postgres
</pre>

'''''Note:''' In case <code>create_db_devel.sh</code> keeps asking postgres password, create the following file:''

<pre>
$> echo "*:*:*:postgres:YOUR_POSTGRES_PASSWORD" > $HOME/.pgpass 
$> chmod 0600 ~/.pgpass
</pre>

On some installations you will receive an error message about <code>uuid-ossp.sql</code> not being found. This is an open issue: https://bugzilla.redhat.com/750626

To work around the issue, edit the file <code>$OVIRT_HOME/backend/manager/dbscripts_postgres/create_db.sh</code> file and change the references to <code>uuid-ossp.sql</code> to point to the right location.

==== Build ====

If you only want to build virt-engine-core and REST API then:
 <nowiki>
 $> cd $OVIRT_HOME
 $> mvn clean install
</nowiki>

For compiling the web-admin and user-portal in addition to the api and engine use:
 <nowiki>
 $> cd $OVIRT_HOME
 $> mvn clean install -Pgwt-admin,gwt-user
</nowiki>

Notes:<BR>
# Compiling the webadmin and userportal takes (a long) time, please visit [[Advanced_oVirt_Engine_Build_Notes#GWT_Compilation_Configuration|GWT Compilation Configuration]] if you want to speed the web compilation process during development time<BR>
# Make sure to run this with your user, not 'root', running as root will result in a missing settings.xml file in the 'root' home directory.
# To skip the execution of the unit tests and only compile and package ovirt, add the option: -DskipTests=true  to the mvn build command
# You can reduce the build time and memory consumption - look at the temp section at the end.
# If you receive "java.lang.OutOfMemoryError: PermGen space" error, use the MAVEN_OPTS environment variable to set a higher heap and permanent generation stack size, then try again:
 <nowiki>$> export MAVEN_OPTS="-XX:MaxPermSize=128m"</nowiki>


For advanced build notes, please visit [[Advanced oVirt Engine Build Notes]]

==== Deploy ====

The first deployment of the application to JBoss AS container should use the setup profile:

 <nowiki>
$> cd $OVIRT_HOME/ear
$> mvn clean install -Pdep,setup</nowiki>

There is a issue with the dep and setup_postgres profiles getting in the way of each other. the setup_postgres profile will prevent the deployment of the quartz jar to the JBoss server. So after this step completes, run:

 <nowiki>
$> cd $OVIRT_HOME/ear
$> mvn clean install -Pdep</nowiki>


From this point on, every time you deploy you can simply run:

 <nowiki>
$> cd $OVIRT_HOME/ear
$> mvn clean install -Pdep</nowiki>

Since postgres is already set up.

<!--<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 7</span></p>-->

== Copying vdsm bootstrap files ==
In case you like to do a full bootstrap installation (InstallVds = True into the database), these steps will be required. Otherwise, can be ignored.
 <nowiki>
    #> su - -c 'mkdir -p /usr/share/vdsm-bootstrap'
    #> git clone git://gerrit.ovirt.org/vdsm
    #> cd vdsm
    #> ./autogen.sh --system && make
    #> cp vdsm_reg/deployUtil.py /usr/share/vdsm-bootstrap
    #> cp vds_bootstrap/vds_bootstrap_complete.py /usr/share/vdsm-bootstrap
    #> cp vds_bootstrap/vds_bootstrap.py /usr/share/vdsm-bootstrap
    #> psql engine postgres -c "update vdc_options set option_value = 'http://YOUR_ENGINE_HOST_HERE:8080/Components/vds' where option_name = 'VdcBootStrapUrl';"</nowiki>

== Deploying engine-config & engine-manage-domains ==

 <nowiki>
$> cd $OVIRT_HOME
$> make create_dirs
$> make install_tools
$> make install_config</nowiki>

== Testing ==

Assuming JBoss is not running, it should be started:
 <nowiki>
    #> systemctl start ovirt-engine.service (or restart if you already started above for tests)
    #> ps ax | grep java</nowiki>

or 

 <nowiki>
#> /usr/share/ovirt-engine/scripts/engine-service.py start</nowiki>

Use username '''admin@internal''' and password '''letmein!'''

Accessing the RESTful API:

 <nowiki>
wget -O - --debug --auth-no-challenge --http-user=admin@internal --http-password='letmein!' head='Accept: application/xml' http://<server name>:<port>/api/</nowiki>

(by default, the port is 8080).

or from the browser
 <nowiki>
http://<server name>:<port>/api</nowiki>

Accessing the web-admin: <BR> 
 <nowiki>
http://<server name>:<port>/webadmin</nowiki>

Accessing the user-portal <BR> 
 <nowiki>
http://<server name>:<port>/UserPortal</nowiki>
<!--<p style="border:1px solid #AAA;background:#f3f3f3;padding:100;font-size:150%;line-height:2">
<span style="background:#333333;color:#FFF;text-decoration:overline">$> Step 8</span></p>-->

== Setting Public Key environment (recommended to oVirt Node environment) ==
Follow this page: http://www.ovirt.org/wiki/Engine_Node_Integration#Engine_core_machine

== Enable 8443 (SSL) into Jboss ==
 <nowiki>
$ cd /usr/share/jboss-as/
$ keytool -genkey -alias jboss -keyalg RSA -keysize 1024 -keystore .keystore -validity 3650  (Keep in mind the password to the next step)
$ chown jboss-as:jboss-as .keystore
$ /usr/share/jboss-as/bin/jboss-admin.sh --connect (CLI will open)

[standalone@localhost:9999 /] (type the below command)
/subsystem=web/connector=https:add(socket-binding=https, scheme=https, protocol="HTTP/1.1", ssl = {"name"=>"ssl", "key-alias"=>"jboss", "password"=>"PASSWORD_PROVIDED_ABOVE","certificate-key-file"=>".keystore"})
[standalone@localhost:9999 /] exit

# service jboss-as restart </nowiki>

For additional info: https://docs.jboss.org/author/display/AS7/Admin+Guide#AdminGuide-HTTPSConnectors

== I have made a change into ovirt engine code, how can I deploy it?==
This will build the engine, rebuilding the admin console and then creates the ear and deploys it to jboss
 <nowiki>
    #> mvn clean install -Pgwt-admin -DskipTests && cd ear && mvn clean install -Pdep
    #> service jboss-as restart</nowiki>

== Advanced features ==

* Registering an oVirt Node
** By default development setup works with hosts based on base distro's such as Fedora.
** In order to be able to work with oVirt Node, you'll need to setup a Public Key environment.
** More details on Engine and oVirt Node integration can be found here: [[Engine_Node_Integration]].


== Code contribution: Gerrit ==

* oVirt-engine is working with Gerrit for code contribution.<BR>
** More detail can be found in [[Working_with_oVirt_Gerrit]].


== Getting latest ==

If you have a working development environment and after a while you want <BR>
to update the code and take latest, you need to do:

# git fetch -v
# git rebase origina/master
# Compile the code
# Upgrade your DB schema

 <nowiki>
$> cd $OVIRT_HOME/backend/manager/dbscripts/
$> ./upgrade.sh -u postgres</nowiki>

== Is there an IDE? ==
Yes! Take a look in: [[Building_Ovirt_Engine/IDE]]

== More information ==

* Engine setup on Gentoo can be found here: https://wiki.gentoo.org/wiki/OVirt
* [[Ovirt build on debian/ubuntu]]

== Troubleshooting ==
=== Host Non-Responsive ===
* Make sure you have both (vdsm and ovirt-engine) with ssl disabled or enabled.
* If you have enabled ssl anytime and want move to ssl=false, you must reconfigure vdsm and start the daemon again.

Example setting ssl false:

* (ovirt Node side)
  $ vi /etc/vdsm/vdsm.conf
  ssl = false
  
  $ /lib/systemd/systemd-vdsmd reconfigure
  $ sudo service vdsmd start
* (ovirt Engine side)
  $ psql engine -U postgres -c "UPDATE vdc_options set option_value = 'false' where option_name = 'SSLEnabled'"
  $ psql engine -U postgres -c "UPDATE vdc_options set option_value = 'false' where option_name = 'UseSecureConnectionWithServers'"
  $ sudo service jboss-as restart

=== Install Failed ===

Actions:

* Host side:
  Look /tmp/vds* files

* Engine side:
  Look /usr/share/jboss-as/standalone/log/engine/engine.log

* Have you created /var/lock/ovirt-engine/.openssl.exclusivelock with 777 perm ?

=== Logs ===

* (oVirt Node)
  /var/log/vdsm/vdsm.log
  /var/log/vdsm-reg/vdsm-reg.log

* (Fedora/Any other distro)
  /tmp/vds* (bootstrap)
  /var/log/vdsm/vdsm.log
  /var/log/vdsm-reg/vdsm-reg.log

* (oVirt Engine side)
  /usr/share/jboss-as/standalone/log/server.log
  /usr/share/jboss-as/standalone/log/engine/engine.log

[[Category:Draft documentation]]
[[Category:Engine]]
[[Category:How to]]
