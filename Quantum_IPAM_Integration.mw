= Quantum IPAM integration =
== Overview ==

<!-- Quantum offers a few services in addition to a high-level abstraction of network management and pluggable architecture.
which includes a DHCP server to serve the addresses.
Quantum offers some layer 3 Network services, one of the services is IP Address Management (IPAM).
On a very low-res, Quantum acts as a network manager where all the nodes are presumed to be linked together by some sort of L2 connectivity. 
The Quantum Service is responsible for managing the networks, subnets, and ports on that "big network".
One or more Quantum DHCP agents can be running on one of the nodes in the network, and receive notifications about the changes from the Quantum service.
-->

Quantum offers layer 3 Network services which are not yet available in oVirt.

This page is a proposal for oVirt-Quantum integration focused on leveraging the IP Address Management service offered by Quantum.

== How it works in Quantum ==

[[File:QuantumDHCPOverview.png|600px|Quantum IPAM general overview]]

<missing some general flow description>

=== Port creation dynamics ===

V2 API: http://wiki.openstack.org/Quantum/APIv2-specification#Create_Port

When a port is created it is assigned to a network.

The MAC address of the port can either be specified or generated automatically by Quantum Service.

If the network has subnets then the port will be assigned an IP on the subnet:

* Automatically on some subnet if no subnet id is specified
* Directly on a specific subnet if the subnet id is specified
* Directly on a subnet & with a given IP if both subnet id & IP are specified

The port is then part of the quantum DB.

Summary:
* The port MAC & IP are determined/known by the user, before the VM is up.

=== DHCP Agent dynamics ===
[[File:QuantumDHCPNotifications.png|thumb|100px|Quantum DHCP Agent notification handling]]
Quantum's DHCP Agent syncs with the network/subnet/port state on it's start from the Quantum service.

For each Network with DHCP enabled and defined subnet(s), the DHCP Agent:
* Submits a network creation request to the layer 3 driver plugin.
* Write port definitions (MAP + IP) to a conf file
* Spawn a dnsmasq instance with the defined ranges (CIDRs) and the conf file

After the initial sync, the DHCP Agent is getting notifications from the quantum service on each network/subnet and port change.
In case of an error the DHCP initiates new sync process.

This process occurs for '''ALL''' networks defined in the quantum service.

Notes:
* The dnsmasq is a lightweight DHCP server, which can lease DHCP addresses.
* According to the DHCP protocol, there can be several DHCP servers active in a network without interfering with each other.

Summary:
* One or more Quantum DHCP Agents can run simultaneously for each network, serving the addresses defined in Quantum Service.

== Integrating with oVirt ==

==== Difference in architecture ====

Whereas Quantum is designed for the homogeneous hardware use-case, to manage one physical network on which multiple virtual networks are created by tenants, 
oVirt is designed to support also the heterogeneous hardware use-case which means:
* Not all the virtual networks share the same physical layer 
* Not all networks are available on all hosts
* Not all virtual networks are implemented using the same technology.

==== Issues with quantum design ====

The asynchronous nature of Quantum Service & Quantum DHCP Agent communication can result in a race between the VM start and the DHCP server ability to serve the VM it's IP address.

When port is created, the quantum service allocates ip for that port sends a notification for the DHCP Agent and returns.
The DHCP receives the port-create notification asynchronously, updates the dnsmasq configuration file and reloads the configuration.

If the VM was able to start before the dnsmasq is updated then the vNIC might fail to acquire an IP from the DHCP.

This means that in order to gain IPAM capabilities,

[[File:OneDoesNotSimplyIntegrateQuantumIntoOvirt.jpg]]

=== One host to rule them all ===

The simplest solution is to have the Quantum Service sit in oVirt with a "fake plugin" that will not change anything in the physical network.

This way oVirt can talk to Quantum Service locally and we have a single copy of the data of Quantum (perhaps Quantum can query the network/subnet/port data from oVirt?).

Also if we run the Quantum DHCP Agent on the same machine then we can easily deploy all together, and integration is easier (only 2 additional services to manage overall).



The downsides to this approach:

* Major: All the networks that require the IPAM capability will have to be connected to this host.
** This is not plausible in the virtualization use-case.
* Minor: We cannot have multiple DHCP servers running for HA, so if for some reason the DHCP fails then we can't allocate IP addresses.



=== DHCP Agent per network ===

[[File:OVirtQuantumFlow.png|thumb|400px|Flow of oVirt operations mapped to Quantum actions]]

A general outline of the approach:

[[File:QuantumIPAMIntegration.png|border|1000px]]

As in the previous solution, the oVirt host will also run Quantum Service & the "fake plugin",

For each network there will be possible to configure at least one DHCP server should be available.

A new VDSM verb will allow to set for which networks the DHCP server should be active:
* If list is empty, turn off Quantum DHCP Agent.
* If list is not empty:
** Save list items (id + net name) to a file.
*** ID would probably need to be Quantum ID.
** Turn on the Quantum DHCP Agent.


The Quantum DHCP agent has a driver which is responsible for creating the network interface the DHCP server is connected to.

The driver will be a "fake" driver which will read the file written by VDSM to determine if the network should have DHCP on this host or not.


There would be a DHCPManager class which is responsible for the management of the DHCP servers.
* If a DHCP server is needed (Host went offline for some reason) then start one on another host with this network.
* If a DHCP server is no longer needed then stop it from a host.


The downsides to this approach:

* Moderate: Quantum needs to be installed on each host (at least DHCP agent requirements).

* Moderate/Minor: The host now needs to know at least the Quantum Service URI in order to communicate with it.
