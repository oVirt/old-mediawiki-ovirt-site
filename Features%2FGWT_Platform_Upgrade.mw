<!-- {{autolang|base=yes}} -->

= GWT Platform Upgrade =

== Summary ==
This feature provides an upgrade to existing UI technology stack shared by oVirt web applications.

== Owner ==
* Name: [[User:Vszocs|Vojtech Szocs]]
* Email: <vszocs@redhat.com>

== Current status ==
* Change documentation - complete
* Essential upgrade changes - complete
* Non-essential upgrade changes - in progress

== Overview ==
oVirt web applications share common UI technology stack:
* [http://en.wikipedia.org/wiki/Google_Web_Toolkit Google Web Toolkit] (GWT) - web client SDK
* [https://github.com/ArcBees/GWTP GWT Platform] (GWTP) - provides [http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter Model-View-Presenter] architecture
* [http://code.google.com/p/google-gin/ GWT INjection] (GIN) - provides [http://en.wikipedia.org/wiki/Dependency_injection Dependency Injection] implementation

== Component versions ==
Following table lists UI technology components with their current (in use) and target versions.

{| class="wikitable"
! Component
! Current version
! Target version
! Contains changes relevant for oVirt web applications
! Contains breaking changes for oVirt web applications
|-
| GWT
| 2.3.0
| 2.5.1
| <span style="color:red">yes</span>
| <span style="color:green">no</span>
|-
| GWTP
| 0.6 Beta
| 1.0
| <span style="color:red">yes</span>
| <span style="color:red">yes</span>
|-
| GIN
| 1.5
| 2.0
| <span style="color:green">no</span>
| <span style="color:green">no</span>
|}

== GWT Changes ==
=== Essential ===
{| class="wikitable"
! Description
! Action
|-
| Editor driver generator is more strict when checking subeditor paths to resolve getter and setter methods
| Modify @Path annotation values, i.e. @Path("OS") for getOS and setOS methods
|-
| Deferred binding generators locate relevant resources via ClassLoader.getResource(String) method
| Ensure resources such as src/main/resources are included on the classpath for GWT compilation
|-
| GWT now provides HTML5 drag'n'drop classes as part of DOM client API
| Remove DnD classes that were originally copied from GWT 2.4 trunk, remove DnDPanel and modify subclasses to extend FocusPanel, utilize Element.setDraggable(String) method for controlling DnD behavior
|}

=== Non-essential ===
{| class="wikitable"
! Priority
! Description
! Notes
|-
| <span style="color:red">CodeCleanup</span>
| Get rid of primitive-to-string type conversions when using GWT Editor framework
| Refactor code such as TemplateGeneralModelForm.doEdit method which currently does TextBoxLabel.setText(x) where x is String converted from a primitive value, i.e. Integer.toString(value). Instead of using TextBoxLabel, we should use NumberLabel or BooleanLabel.
|-
| <span style="color:green">NiceToHave</span>
| [http://code.google.com/p/google-web-toolkit/issues/detail?id=188 #188] Scrolling DataGrid: The new DataGrid widget supports vertical scrolling with a fixed header (above) and footer (below)
| Can be challenging since AbstractActionTable uses CellTable with lots of custom overrides which might not be available for DataGrid
|-
| <span style="color:green">NiceToHave</span>
| [http://code.google.com/p/google-web-toolkit/issues/detail?id=6040 #6040] Editor framework does not support is / has methods
| Investigate code where UiCommon model contains primitive boolean is / has methods that are bound to view via editor framework
|-
| <span style="color:green">NiceToHave</span>
| The GWT tools can now run on JDK 7. (However, no JDK 7 language or library features are available in GWT code yet.)
| Investigate enabling Java 7 source/target compliance for GWT compilation, however note that Java 7 language features aren't supported by GWT compiler yet
|-
| <span style="color:green">NiceToHave</span>
| [http://code.google.com/p/google-web-toolkit/issues/detail?id=7715 #7715] Widgets and Editors - Fixed a bug in SplitLayoutPanel.setWidgetHidden
| Investigate if we currently use a workaround for this bug and modify code as necessary
|-
| <span style="color:green">NiceToHave</span>
| [http://code.google.com/p/google-web-toolkit/issues/detail?id=2467 #2467] Widgets and Editors - Added Tree.setScrollIntoViewEnabled
| Investigate if we should utilize this method in System Tree or other tree-based widgets / views
|-
| <span style="color:green">NiceToHave</span>
| [http://code.google.com/p/google-web-toolkit/source/detail?r=11442 r11442] HTML, CSS, resource files - Added "debug" obfuscation style for CSS
| Investigate if we could utilize this style for GWT development purposes
|-
| <span style="color:gray">MaybeRelevant</span>
| New compiler optimizations from [https://developers.google.com/closure/compiler/ Closure]
| Investigate impacts of enabling Closure compiler optimizations as part of GWT compilation
|-
| <span style="color:gray">MaybeRelevant</span>
| Allow absolute paths in ui:style's src attribute
| Investigate code where UiBinder template uses ui:style's src attribute with relative path
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://code.google.com/p/google-web-toolkit/source/detail?r=10435 r10435] [http://code.google.com/p/google-web-toolkit/source/detail?r=10581 r10581] Addition of CellTableBuilder API, and an API for custom headers and footers in CellTables
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://www.gwtproject.org/articles/superdevmode.html Super Dev Mode]: a replacement for Development Mode (experimental)
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://www.gwtproject.org/articles/elemental.html Elemental library]: efficient DOM access and HTML5 API's (experimental)
|-
| <span style="color:gray">MaybeRelevant</span>
| Support for [http://www.gwtproject.org/doc/latest/DevGuideValidation.html JSR-303 validation] is improved, documented, and no longer considered experimental
| Investigate feasibility of using JSR-303 validation API in existing code
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://code.google.com/p/google-web-toolkit/issues/detail?id=4911 #4911] HTML, CSS, resource files - Added CSS support for media types
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://code.google.com/p/google-web-toolkit/source/detail?r=10675 r10675] ui:with now supports the nested ui:attribute element for setting property values on a provided type
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://code.google.com/p/google-web-toolkit/source/detail?r=10753 r10753] Added option to compile out logging calls below SEVERE and WARN
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://code.google.com/p/google-web-toolkit/source/detail?r=10667 r10667] CssResource @defs now support multiple values
|-
| <span style="color:gray">MaybeRelevant</span>
| [http://code.google.com/p/google-web-toolkit/source/detail?r=10412 r10412] [http://code.google.com/p/google-web-toolkit/source/detail?r=10476 r10476] Significant speedups in development refresh time as a result of generator result caching for the ClientBundle and RPC generators. Addition of a result caching API that generator writers can use.
| Investigate feasibility of using result caching API in existing custom generators, i.e. UiCommonEditorDriverGenerator and ElementIdHandlerGenerator
|}

== GWTP Changes ==
=== Essential ===
{| class="wikitable"
! Description
! Action
|-
| [http://code.google.com/p/gwt-platform/issues/detail?id=350 #350] Migrate to bindery event system
| Modify EventBus binding to support both legacy (com.google.gwt.event.shared.EventBus) and actual (com.google.web.bindery.event.shared.EventBus) type bound to same SimpleEventBus implementation. This is because some core GWT interfaces suchas Has*Handlers still work with legacy HandlerRegistration interface.
|-
| [http://code.google.com/p/gwt-platform/issues/detail?id=364 #364] Manual bound checking for getCurrentPlaceRequest in PlaceManagerImpl
| Remove ApplicationPlaceManager.getCurrentPlaceRequest() override since the relevant ArrayIndexOutOfBoundsException fix landed in GWTP PlaceManagerImpl
|-
| You can now set your content slot in your presenter constructor and remove revealInParent method
| Modify all presenters to specify parent presenter's slot or root presenter reveal type via constructor instead of overriding void revealInParent() method
|-
| Support for dynamic tabbed presenters with user data
| Modify all TabContainerPresenter subclasses to support changing tab information during runtime via @ChangeTab mechanism. Modify AbstractTabPanel and AbstractTabPanelView to implement TabPanel.changeTab method.
|-
| IsWidget support. This is breaking in overriding classes.
| Modify abstract views due to GWTP View / ViewImpl changes, i.e. methods dealing with slots use IsWidget instead of Widget
|-
| ViewImpl change, by adding widget to it. Allows for initWidget(widget...)
| Modify AbstractView & AbstractPopupView to utilize ViewImpl.initWidget and ViewImpl.asWidget methods
|-
| Ginjector is now [https://github.com/ArcBees/GWTP/wiki/Bootstrapping#extending-the-generated-ginjector auto-generated] by GWTP generator, but we still reference Ginjector (ClientGinjector) in application code
| All classes @Inject-ing ClientGinjector now @Inject specific dependencies instead, abstract classes working with ClientGinjector now work with specific dependencies instead. All classes using ClientGinjectorProvider.instance.getEventBus now use ClientGinjectorProvider.getEventBus (for example) - utilize GIN requestStaticInject on ClientGinjectorProvider.
|-
| [https://github.com/ArcBees/GWTP/wiki/Bootstrapping#entrypoint EntryPoint-less bootstrap] is supported, we can now use MvpWithEntryPoint instead of Mvp module
| Modify GwtCommon.gwt.xml to inherit com.gwtplatform.mvp.MvpWithEntryPoint instead of com.gwtplatform.mvp.Mvp and remove WebAdmin & UserPortal GWT EntryPoint classes
|-
| [https://github.com/ArcBees/GWTP/wiki/Bootstrapping#tabinfo @TabInfo methods] now support any @Inject-able types, we should use this to reduce coupling with ClientGinjector
| Modify all static @TabInfo methods to use specific dependencies instead of ClientGinjector
|}

=== Non-essential ===
{| class="wikitable"
! Priority
! Description
! Notes
|-
| <span style="color:red">CodeCleanup</span>
| Get rid of deprecated ClientGinjectorProvider classes in WebAdmin & UserPortal
| Refactor code in order not to rely on ClientGinjectorProvider static methods so that we can get rid of ClientGinjectorProvider classes entirely.
|-
| <span style="color:green">NiceToHave</span>
| [https://github.com/ArcBees/GWTP/wiki/Bootstrapping#creating-a-bootstrapper Bootstrapper] and [https://github.com/ArcBees/GWTP/wiki/Bootstrapping#creating-a-prebootstrapper PreBootstrapper] hooks to customize application bootstrap
| Investigate if some eager singletons (such as ApplicationInit) can be implemented as Bootstrappers. Investigate if custom PreBootstrapper can be used to implement global uncaught exception handler.
|-
| <span style="color:green">NiceToHave</span>
| [https://github.com/ArcBees/GWTP/wiki/Bootstrapping#proxycodesplitbundle @ProxyCodeSplitBundle] to optimize code splitting by bundling multiple presenters together
| Investigate if related presenters can be grouped together using @ProxyCodeSplitBundle to avoid "fetch one fragment per presenter" situation which isn't good for slow connections.
|-
| <span style="color:gray">MaybeRelevant</span>
| [https://github.com/ArcBees/GWTP/wiki/Route-Place-Tokens Route Place Tokens]
|-
| <span style="color:gray">MaybeRelevant</span>
| [https://github.com/ArcBees/GWTP/wiki/Presenter-Proxy#notifying-the-user-of-code-split-requests Code split request notification]
| Investigate feasibility of "Loading" indicator based on code split (fragment) processing, i.e. situation when application starts to fetch new fragment and UI interaction should be avoided.
|}
