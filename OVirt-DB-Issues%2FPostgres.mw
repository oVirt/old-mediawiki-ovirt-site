== Installation ==
We are using version 9.1.x <br>
[http://www.ovirt.org/wiki/Installing_PostgreSQL_DB Installation Guide]

== Authentication ==
Trust<br>
Password<br>
GSSAPI<br>
SSPI<br>
Kerberos<br>
Ident<br>
Peer<br>
LDAP<br>
RADIUS<br>
Certificate<br>
PAM<br>

details:<br>
[http://www.postgresql.org/docs/9.1/static/auth-methods.html Authentication Methods]

== Creating a new user ==
[http://www.postgresql.org/docs/9.1/static/sql-createrole.html  Create Role]<br>
[http://www.postgresql.org/docs/9.0/static/sql-createuser.html  Create User]<br>
[http://www.postgresql.org/docs/9.0/static/libpq-pgpass.html    The password file]<br>

== Configuration ==

===postgresql.conf===
   [http://www.postgresql.org/docs/current/static/view-pg-settings.html defaults]<br>
   [http://www.postgresql.org/docs/current/static/sql-reset.html reset]<br>
=== reload configuration ===
If you are making modifications to the Postgres configuration file postgresql.conf (or similar), and you want to new settings to take effect without needing to restart the entire database, there are two ways to accomplish this.

option 1 <br>
  su - postgres /usr/bin/pg_ctl reload
option 2 <br>
  echo "SELECT pg_reload_conf();" | psql -U <user> <database>

=== SIGHUP ===
  pg_ctl reload

[http://www.postgresql.org/docs/current/static/runtime-config-connection.html Connection parameters]<br>
=== Remote access (listen_addresses) ===
  [http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html pg_hba.conf]<br>

=== max_connections ===
The maximum number of client connections allowed. This is very important to some of the below parameters (particularly work_mem) because there are some memory resources that are or can be allocated on a per-client basis, so the maximum number of clients suggests the maximum possible memory use. Generally, PostgreSQL on good hardware can support a few hundred connections. If you want to have thousands instead, you should consider using connection pooling software to reduce the connection overhead.

=== shared_buffers ===
The shared_buffers configuration parameter determines how much memory is dedicated to PostgreSQL use for caching data. One reason the defaults are low because on some platforms (like older Solaris versions and SGI) having large values requires invasive action like recompiling the kernel. Even on a modern Linux system, the stock kernel will likely not allow setting shared_buffers to over 32MB without adjusting kernel settings first.

If you have a system with 1GB or more of RAM, a reasonable starting value for shared_buffers is 1/4 of the memory in your system. If you have less ram you'll have to account more carefully for how much RAM the OS is taking up, closer to 15% is more typical there. There are some workloads where even larger settings for shared_buffers are effective, but given the way PostgreSQL also relies on the operating system cache it's unlikely you'll find using more than 40% of RAM to work better than a smaller amount.

=== work_mem ===
Specifies the amount of memory to be used by internal sort operations and hash tables before writing to temporary disk files. The value defaults to one megabyte (1MB). Note that for a complex query, several sort or hash operations might be running in parallel; each operation will be allowed to use as much memory as this value specifies before it starts to write data into temporary files. Also, several running sessions could be doing such operations concurrently. Therefore, the total memory used could be many times the value of work_mem; it is necessary to keep this fact in mind when choosing the value. Sort operations are used for ORDER BY, DISTINCT, and merge joins. Hash tables are used in hash joins, hash-based aggregation, and hash-based processing of IN subqueries.
=== maintenance_work_mem ===
Specifies the maximum amount of memory to be used by maintenance operations, such as VACUUM, CREATE INDEX, and ALTER TABLE ADD FOREIGN KEY. It defaults to 16 megabytes (16MB). Since only one of these operations can be executed at a time by a database session, and an installation normally doesn't have many of them running concurrently, it's safe to set this value significantly larger than work_mem. Larger settings might improve performance for vacuuming and for restoring database dumps.

=== synchronous_commit ===
=== Guidlines  dedicated / shared ===
=== pgtune ===
