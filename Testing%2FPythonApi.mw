== Create a Basic Environment using ovirt-engine-sdk ==

In order to connect to ovirt-engine using the ovirt-engine-sdk (python api which uses REST-API), the following details are required:

* URL - The URL consists of http method, ovirt-engine's ip, ovirt-engine's port and the api's entry point. The http method and and port are usually https/8443 for secure connection (default), or http/8080 for insecure connection. The insecure connection is usually used in development environments. The api's entry point is fixed - "/api"

* User/Password - The user consists of username, the "@" sign and domain name. You can use both either the internal user's account or any of your LDAP users that has login permissions and of course permissions to perform your requests.



* '''import the relevant modules and get an API object'''
Add the following to you python script, remember to set the URL/USERNAME/PASSWORD constants accordingly

    #! /usr/bin/python
    
    from ovirtsdk.api import API
    from ovirtsdk.xml import params
    
    URL = 'https://192.168.1.1:8443/api'
    USERNAME = 'my_user@my.domain.com'
    PASSWORD = 'my_password'
    
    api = API(url=URL, username=USERNAME, password=PASSWORD)


* '''Create iSCSI Data Center'''

    try:
        if api.datacenters.add(params.DataCenter(name='my_datacenter', storage_type='iscsi', version=params.Version(major='3', minor='0'))):
            print 'iSCSI Data Center was created successfully'
    except Exception as e:
        print 'Failed to create iSCSI Data Center:\n%s' % str(e)


* '''Create Cluster'''
Note that the CPU type should be chosen according to your host's CPU.

    CPU_TYPE = 'Intel Nehalem Family'
    
    try:
        if api.clusters.add(params.Cluster(name='my_cluster', cpu=params.CPU(id=CPU_TYPE), data_center=api.datacenters.get('my_datacenter'), version=params.Version(major='3', minor='0'))):
            print 'Cluster was created successfully'
    except Exception as e:
        print 'Failed to create Cluster:\n%s' % str(e)


* '''Install Host'''

    HOST_ADDRESS = 'hostname.my.domain.com'
    ROOT_PASSWORD = 'root_password'
    
    try:
            if api.hosts.add(params.Host(name='my_host', address=HOST_ADDRESS, cluster=api.clusters.get('my_cluster'), root_password=ROOT_PASSWORD)):
                print 'Host was installed successfully'
    except Exception as e:
            print 'Failed to install Host:\n%s' % str(e)
    
    print 'Waiting for host to reach the Up status'
    while api.hosts.get('my_host').status != 'up':
        pass


* '''Create iSCSI Storage Domain on Data Center'''

    STORAGE_ADDRESS = 'storage_server.my.domain.com'
    TARGET_NAME = 'target_name'
    LUN_GUID = 'lun_guid'
    
    sdParams = params.StorageDomain(name='my_iscsi',
                      data_center=api.datacenters.get('my_datacenter'),
                      type_='data',
                      host=api.hosts.get('my_host'),
                      storage = params.Storage(type_='iscsi',
                                       volume_group=params.VolumeGroup(logical_unit=[params.LogicalUnit(id=LUN_GUID,
                                                           address=STORAGE_ADDRESS,
                                                           port=3260,
                                                           target=TARGET_NAME)]))  )
    
    try:
        if api.storagedomains.add(sdParams):
            print 'iSCSI Storage Domain was created successfully'
    except Exception as e:
        print 'Failed to create iSCSI Storage Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get(name='my_datacenter').storagedomains.add(api.storagedomains.get(name='my_iscsi')):
            print 'iSCSI Storage Domain was attached successfully'
    except Exception as e:
        print 'Failed to attach iSCSI Storage Domain:\n%s' % str(e)


* '''Attach ISO domain to Data Center'''

You can either create a new ISO Storage Domain or import an existing ISO Storage Domain that was configured during ovirt-engine's installation wizard (both options uses the same code below).
Please upload the following ISO file to the ISO Storage Domain once the ISO Storage Domain was created: http://distro.ibiblio.org/tinycorelinux/4.x/x86/release/TinyCore-current.iso

    ISO_ADDRESS = 'my_ovirt_engine_ip'
    ISO_PATH = '/path/to/iso/domain'
    
    isoParams = params.StorageDomain(name='my_iso',
                                        data_center=api.datacenters.get('my_datacenter'),
                                        type_='iso',
                                        host=api.hosts.get('my_host'),
                                        storage = params.Storage(   type_='nfs',
                                                                    address=ISO_ADDRESS,
                                                                    path=ISO_PATH  )  )
    
    try:
        if api.storagedomains.add(isoParams):
            print 'ISO Domain was created/imported successfully'
    except Exception as e:
        print 'Failed to create/import an ISO Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get('my_datacenter').storagedomains.add(api.storagedomains.get('my_iso')):
            print 'ISO Domain was attached successfully'
    except Exception as e:
        print 'Failed to attach ISO Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get('my_datacenter').storagedomains.get('my_iso').activate():
            print 'ISO Domain was activated successfully'
    except Exception as e:
        print 'Failed to activate ISO Domain:\n%s' % str(e)


* '''Attach Export domain to Data Center'''

    EXPORT_ADDRESS = 'ip_of_export_domain_storage'
    EXPORT_PATH = '/path/to/export/domain'
    
    isoParams = params.StorageDomain(name='my_export',
                                        data_center=api.datacenters.get('my_datacenter'),
                                        type_='export',
                                        host=api.hosts.get('my_host'),
                                        storage = params.Storage(   type_='nfs',
                                                                    address=EXPORT_ADDRESS,
                                                                    path=EXPORT_PATH  )  )
    try:
        if api.storagedomains.add(isoParams):
            print 'Export Domain was created/imported successfully'
    except Exception as e:
        print 'Failed to create/import an Export Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get('my_datacenter').storagedomains.add(api.storagedomains.get('my_export')):
            print 'Export Domain was attached successfully'
    except Exception as e:
        print 'Failed to attach Export Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get('my_datacenter').storagedomains.get('my_export').activate():
            print 'Export Domain was activated successfully'
    except Exception as e:
        print 'Failed to activate Export Domain:\n%s' % str(e)


* '''Create VM with one NIC and one Disk'''

    VDISKSIZE = 5368709120
    
    
    try:
        if api.vms.add( params.VM(name='my_vm',
                                  memory=2147483648,
                                  cluster=api.clusters.get('my_cluster'),
                                  template=api.templates.get('Blank')) ):
            print 'vm created successfully'
    except Exception as e:
        print 'Failed to create vm:\n%s' % str(e)
    
    
    try:
        if api.vms.get('my_vm').nics.add( params.NIC(name='eth0',
                                                     network=params.Network(name='ovirtmgmt'),
                                                     interface='virtio')):
            print 'NIC was added to vm successfully'
    except Exception as e:
        print 'Failed to add NIC to vm:\n%s' % str(e)
    
    
    try:
        if api.vms.get('my_vm').disks.add( params.Disk(storage_domains=params.StorageDomains(storage_domain=[api.storagedomains.get('my_iscsi')]),
                                                       size=VDISKSIZE,
                                                       type_='system',
                                                       status=None,
                                                       interface='virtio',
                                                       format='cow',
                                                       sparse=True,
                                                       bootable=True)  ):
            print 'Disk was added to vm successfully'
    except Exception as e:
        print 'Failed to add disk to vm:\n%s' % str(e)


* '''Start/hibernate/resume/stop vm'''

    try:
        if api.vms.get('my_vm').start():
            print 'Start VM'
    except Exception as e:
        print 'Failed to Start VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Up status'
    while api.vms.get('my_vm').status.state != 'up':
        pass

    try:
        if api.vms.get('my_vm').suspend():
            print 'Hibernate VM'
    except Exception as e:
        print 'Failed to Hibernate VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Suspended status'
    while api.vms.get('my_vm').status.state != 'suspended':
        pass

    try:
        if api.vms.get('my_vm').start():
            print 'Resume VM'
    except Exception as e:
        print 'Resume VM:\n%s' % str(e)
    
    print 'Waiting for vm to Resume'
    while api.vms.get('my_vm').status.state != 'up':
        pass

    try:
        if api.vms.get('my_vm').stop():
            print 'Stop VM'
    except Exception as e:
        print 'Stop VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while api.vms.get('my_vm').status.state != 'down':
        pass


* '''Export vm (into Export Domain)'''

    try:
        if api.vms.get('my_vm').export(params.Action(storage_domain=api.storagedomains.get('my_export'))):
            print 'VM was exported successfully'
    except Exception as e:
        print 'Failed to export vm:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while api.vms.get('my_vm').status.state != 'down':
        pass


* '''Delete vm'''

    try:
        if api.vms.get('my_vm').delete():
            print 'VM was removed successfully'
    except Exception as e:
        print 'Failed to remove VM:\n%s' % str(e)
    
    print 'Waiting for vm to be acctually deleted'
    while api.vms.get('my_vm') in api.vms.list():
       pass


* '''Create a snapshot to vm'''

    try:
        if api.vms.get('my_vm').snapshots.add(params.Snapshot(description='my_snapshot', vm=api.vms.get('my_vm'))):
            print 'Creating a Snapshot'
    except Exception as e:
        print 'Failed to Create a Snapshot:\n%s' % str(e)
    
    print 'Waiting for Snapshot creation to finish'
    while api.vms.get('my_vm').status.state == 'image_locked':
        pass


* '''Create a Template from VM'''

    try:
        if api.templates.add(params.Template(name='my_template', vm=api.vms.get('my_vm'), cluster=api.clusters.get('my_cluster'))):
            print 'Creating a Template from vm'
    except Exception as e:
        print 'Failed to Create a Template from vm:\n%s' % str(e)
