== Create a Basic Environment using ovirt-engine-sdk ==

Ovirt-Engine-SDK is an auto-generated python API which uses REST-API to perform operations against ovirt-engine.
In order to connect to ovirt-engine using ovirt-engine-sdk and get the API proxy (reference instance to REST-API), the following connection information is required:

* URL - The URL consists of HTTP method, ovirt-engine's IP or FQDN, ovirt-engine's TCP PORT and the REST-API's entry point. The HTTP method and the PORT are usually HTTPS/8443 for secure connection (default installation option), or HTTP/8080 for insecure connection (in use mostly in development environments). The REST-API's entry point is fixed - "/api"

* User and Password - The user consists of a username, the "@" sign and domain name. You can use either the default internal user's account or any of your LDAP users that has both login permissions and of course also has permissions to execute the desired operations.



=== Importing the relevant modules and obtaining an API object ===
Add the following to you python script, remember to set the URL/USERNAME/PASSWORD constants accordingly

    #! /usr/bin/python
    
    from ovirtsdk.api import API
    from ovirtsdk.xml import params
    
    URL =           'https://192.168.1.1:8443/api'
    USERNAME =      'my_user@my.domain.com'
    PASSWORD =      'my_password'

    DC_NAME =       'my_datacenter'
    CLUSTER_NAME =  'my_cluster'
    HOST_NAME =     'my_host'
    STORAGE_NAME =  'my_storage'
    EXPORT_NAME =   'my_export'
    VM_NAME =       'my_vm'
    
    api = API(url=URL, username=USERNAME, password=PASSWORD)


=== Create iSCSI Data Center ===

    try:
        if api.datacenters.add(params.DataCenter(name=DC_NAME, storage_type='iscsi', version=params.Version(major='3', minor='0'))):
            print 'iSCSI Data Center was created successfully'
    except Exception as e:
        print 'Failed to create iSCSI Data Center:\n%s' % str(e)


=== Create Cluster ===
Note that the CPU type should be chosen according to your host's CPU.

    CPU_TYPE = 'Intel Nehalem Family'
    
    try:
        if api.clusters.add(params.Cluster(name=CLUSTER_NAME, cpu=params.CPU(id=CPU_TYPE), data_center=api.datacenters.get(DC_NAME), version=params.Version(major='3', minor='0'))):
            print 'Cluster was created successfully'
    except Exception as e:
        print 'Failed to create Cluster:\n%s' % str(e)


=== Install Host ===

    HOST_ADDRESS = 'hostname.my.domain.com'
    ROOT_PASSWORD = 'root_password'
    
    try:
            if api.hosts.add(params.Host(name=HOST_NAME, address=HOST_ADDRESS, cluster=api.clusters.get(CLUSTER_NAME), root_password=ROOT_PASSWORD)):
                print 'Host was installed successfully'
    except Exception as e:
            print 'Failed to install Host:\n%s' % str(e)
    
    print 'Waiting for host to reach the Up status'
    while 1:
        try:
            if api.hosts.get(HOST_NAME).status.state == 'up':
                break
        except:
            pass


== Working with storages ==
=== Create iSCSI Storage Domain on Data Center ===

    STORAGE_ADDRESS = 'storage_server.my.domain.com'
    TARGET_NAME = 'target_name'
    LUN_GUID = 'lun_guid'
    
    sdParams = params.StorageDomain(name=STORAGE_NAME,
                      data_center=api.datacenters.get(DC_NAME),
                      storage_format='v2',
                      type_='data',
                      host=api.hosts.get(HOST_NAME),
                      storage = params.Storage(type_='iscsi',
                                       volume_group=params.VolumeGroup(logical_unit=[params.LogicalUnit(id=LUN_GUID,
                                                           address=STORAGE_ADDRESS,
                                                           port=3260,
                                                           target=TARGET_NAME)]))  )
    
    try:
        if api.storagedomains.add(sdParams):
            print 'iSCSI Storage Domain was created successfully'
    except Exception as e:
        print 'Failed to create iSCSI Storage Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get(name=DC_NAME).storagedomains.add(api.storagedomains.get(name=STORAGE_NAME)):
            print 'iSCSI Storage Domain was attached successfully'
    except Exception as e:
        print 'Failed to attach iSCSI Storage Domain:\n%s' % str(e)


=== Attach ISO domain to Data Center ===

You can either create a new ISO Storage Domain or import an existing ISO Storage Domain that was configured during ovirt-engine's installation wizard (both options uses the same code below).
Please upload the following ISO file to the ISO Storage Domain once the ISO Storage Domain was created: http://distro.ibiblio.org/tinycorelinux/4.x/x86/release/TinyCore-current.iso

    ISO_ADDRESS = 'my_ovirt_engine_ip'
    ISO_PATH = '/path/to/iso/domain'
    ISO_NAME = 'my_iso'
    
    isoParams = params.StorageDomain(name=ISO_NAME,
                                        data_center=api.datacenters.get(DC_NAME),
                                        type_='iso',
                                        host=api.hosts.get(HOST_NAME),
                                        storage = params.Storage(   type_='nfs',
                                                                    address=ISO_ADDRESS,
                                                                    path=ISO_PATH  )  )
    
    try:
        if api.storagedomains.add(isoParams):
            print 'ISO Domain was created/imported successfully'
    except Exception as e:
        print 'Failed to create/import an ISO Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get(DC_NAME).storagedomains.add(api.storagedomains.get(ISO_NAME)):
            print 'ISO Domain was attached successfully'
    except Exception as e:
        print 'Failed to attach ISO Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get(DC_NAME).storagedomains.get(ISO_NAME).activate():
            print 'ISO Domain was activated successfully'
    except Exception as e:
        print 'Failed to activate ISO Domain:\n%s' % str(e)


=== Attach Export domain to Data Center ===

    EXPORT_ADDRESS = 'ip_of_export_domain_storage'
    EXPORT_PATH = '/path/to/export/domain'
    
    isoParams = params.StorageDomain(name=EXPORT_NAME,
                                        data_center=api.datacenters.get(DC_NAME),
                                        type_='export',
                                        host=api.hosts.get(HOST_NAME),
                                        storage = params.Storage(   type_='nfs',
                                                                    address=EXPORT_ADDRESS,
                                                                    path=EXPORT_PATH  )  )
    try:
        if api.storagedomains.add(isoParams):
            print 'Export Domain was created/imported successfully'
    except Exception as e:
        print 'Failed to create/import an Export Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get(DC_NAME).storagedomains.add(api.storagedomains.get(EXPORT_NAME)):
            print 'Export Domain was attached successfully'
    except Exception as e:
        print 'Failed to attach Export Domain:\n%s' % str(e)
    
    try:
        if api.datacenters.get(DC_NAME).storagedomains.get(EXPORT_NAME).activate():
            print 'Export Domain was activated successfully'
    except Exception as e:
        print 'Failed to activate Export Domain:\n%s' % str(e)


== Virtual Machines ==
=== Create VM with one NIC and one Disk ===

    VDISKSIZE = 5368709120
    
    
    try:
        if api.vms.add( params.VM(name=VM_NAME,
                                  memory=2147483648,
                                  cluster=api.clusters.get(CLUSTER_NAME),
                                  template=api.templates.get('Blank')) ):
            print 'vm created successfully'
    except Exception as e:
        print 'Failed to create vm:\n%s' % str(e)
    
    
    try:
        if api.vms.get(VM_NAME).nics.add( params.NIC(name='eth0',
                                                     network=params.Network(name='ovirtmgmt'),
                                                     interface='virtio')):
            print 'NIC was added to vm successfully'
    except Exception as e:
        print 'Failed to add NIC to vm:\n%s' % str(e)
    
    
    try:
        if api.vms.get(VM_NAME).disks.add( params.Disk(storage_domains=params.StorageDomains(storage_domain=[api.storagedomains.get(STORAGE_NAME)]),
                                                       size=VDISKSIZE,
                                                       type_='system',
                                                       status=None,
                                                       interface='virtio',
                                                       format='cow',
                                                       sparse=True,
                                                       bootable=True)  ):
            print 'Disk was added to vm successfully'
    except Exception as e:
        print 'Failed to add disk to vm:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'down':
                break
        except:
            pass


=== Start/hibernate/resume/stop vm ===

    try:
        if api.vms.get(VM_NAME).start():
            print 'Start VM'
    except Exception as e:
        print 'Failed to Start VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Up status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'up':
                break
        except:
            pass

    try:
        if api.vms.get(VM_NAME).suspend():
            print 'Hibernate VM'
    except Exception as e:
        print 'Failed to Hibernate VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Suspended status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'suspended':
                break
        except:
            pass

    try:
        if api.vms.get(VM_NAME).start():
            print 'Resume VM'
    except Exception as e:
        print 'Resume VM:\n%s' % str(e)
    
    print 'Waiting for vm to Resume'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'up':
                break
        except:
            pass

    try:
        if api.vms.get(VM_NAME).stop():
            print 'Stop VM'
    except Exception as e:
        print 'Stop VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'down':
                break
        except:
            pass



=== Export vm (into Export Domain) ===

    try:
        if api.vms.get(VM_NAME).export(params.Action(storage_domain=api.storagedomains.get(EXPORT_NAME))):
            print 'VM was exported successfully'
    except Exception as e:
        print 'Failed to export vm:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'down':
                break
        except:
            pass


=== Delete vm ===

    try:
        if api.vms.get(VM_NAME).delete():
            print 'VM was removed successfully'
    except Exception as e:
        print 'Failed to remove VM:\n%s' % str(e)
    
    print 'Waiting for vm to be deleted'
    while 1:
        try:
            if VM_NAME not in [vm.name for vm in api.vms.list()]:
                break
        except:
            pass


=== Import vm (from Export Domain) ===

    try:
        if api.storagedomains.get(EXPORT_NAME).vms.get(VM_NAME).import_vm(params.Action(storage_domain=api.storagedomains.get(STORAGE_NAME), cluster=api.clusters.get(name=CLUSTER_NAME))):
            print 'VM was imported successfully'
    except Exception as e:
        print 'Failed to import VM:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'down':
                break
        except:
            pass


=== Create a snapshot to vm ===
    SNAPSHOT_NAME = 'my_snapshot'
    try:
        if api.vms.get(VM_NAME).snapshots.add(params.Snapshot(description=SNAPSHOT_NAME, vm=api.vms.get(VM_NAME))):
            print 'Creating a Snapshot'
    except Exception as e:
        print 'Failed to Create a Snapshot:\n%s' % str(e)
    
    print 'Waiting for Snapshot creation to finish'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'image_locked':
                break
        except:
            pass


=== Create a Template from VM ===

    TEMPLATE_NAME = 'my_template'
    try:
        if api.templates.add(params.Template(name=TEMPLATE_NAME, vm=api.vms.get(VM_NAME), cluster=api.clusters.get(CLUSTER_NAME))):
            print 'Creating a Template from vm'
    except Exception as e:
        print 'Failed to Create a Template from vm:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'down':
                break
        except:
            pass

=== Create VM from Template ===

    try:
        if api.vms.add( params.VM(name='my_vm_from_template',
                                 cluster=api.clusters.get(CLUSTER_NAME),
                                 template=api.templates.get(TEMPLATE_NAME)) ):
            print 'VM was created from Template successfully'
    except Exception as e:
        print 'Failed to create VM from Template:\n%s' % str(e)
    
    print 'Waiting for vm to reach Down status'
    while 1:
        try:
            if api.vms.get(VM_NAME).status.state == 'down':
                break
        except:
            pass

== All commands aggregated in one block ==

<pre>
#! /usr/bin/python

import time
from ovirtsdk.api import API
from ovirtsdk.xml import params


# Constants - need to be adjusted to your environment

URL = 'https://192.168.1.1:8443/api'
USERNAME = 'my_user@my.domain.com'
PASSWORD = 'my_password'

CPU_TYPE = 'Intel Nehalem Family'

HOST_ADDRESS = 'hostname.my.domain.com'
ROOT_PASSWORD = 'root_password'

STORAGE_ADDRESS = 'storage_server.my.domain.com'
TARGET_NAME = 'target_name'
LUN_GUID = 'lun_guid'

ISO_ADDRESS = 'my_ovirt_engine_ip'
ISO_PATH = '/path/to/iso/domain'

EXPORT_ADDRESS = 'ip_of_export_domain_storage'
EXPORT_PATH = '/path/to/export/domain'

VDISKSIZE = 5368709120

DC_NAME =       'my_datacenter'
CLUSTER_NAME =  'my_cluster'
HOST_NAME =     'my_host'
STORAGE_NAME =  'my_storage'
EXPORT_NAME =   'my_export'
VM_NAME =       'my_vm'


# Get an API object

api = API(url=URL, username=USERNAME, password=PASSWORD)


# Create iSCSI Data Center

try:
    if api.datacenters.add(params.DataCenter(name=DC_NAME, storage_type='iscsi', version=params.Version(major='3', minor='0'))):
        print 'iSCSI Data Center was created successfully'
except Exception as e:
    print 'Failed to create iSCSI Data Center:\n%s' % str(e)


# Create Cluster

try:
    if api.clusters.add(params.Cluster(name=CLUSTER_NAME, cpu=params.CPU(id=CPU_TYPE), data_center=api.datacenters.get(DC_NAME), version=params.Version(major='3', minor='0'))):
        print 'Cluster was created successfully'
except Exception as e:
    print 'Failed to create Cluster:\n%s' % str(e)


# Install Host

try:
    if api.hosts.add(params.Host(name=HOST_NAME, address=HOST_ADDRESS, cluster=api.clusters.get(CLUSTER_NAME), root_password=ROOT_PASSWORD)):
        print 'Host was installed successfully'
except Exception as e:
    print 'Failed to install Host:\n%s' % str(e)

print 'Waiting for host to reach the Up status'
while 1:
    try:
        if api.hosts.get(HOST_NAME).status.state == 'up':
            break
    except:
        pass


# Create iSCSI Storage Domain on Data Center

sdParams = params.StorageDomain(name=STORAGE_NAME,
                 data_center=api.datacenters.get(DC_NAME),
                 storage_format='v2',
                 type_='data',
                 host=api.hosts.get(HOST_NAME),
                 storage = params.Storage(type_='iscsi',
                                  volume_group=params.VolumeGroup(logical_unit=[params.LogicalUnit(id=LUN_GUID,
                                                      address=STORAGE_ADDRESS,
                                                      port=3260,
                                                      target=TARGET_NAME)]))  )

try:
    if api.storagedomains.add(sdParams):
        print 'iSCSI Storage Domain was created successfully'
except Exception as e:
    print 'Failed to create iSCSI Storage Domain:\n%s' % str(e)

try:
    if api.datacenters.get(name=DC_NAME).storagedomains.add(api.storagedomains.get(name=STORAGE_NAME)):
        print 'iSCSI Storage Domain was attached successfully'
except Exception as e:
    print 'Failed to attach iSCSI Storage Domain:\n%s' % str(e)


# Attach ISO domain to Data Center

isoParams = params.StorageDomain(name=ISO_NAME,
                                   data_center=api.datacenters.get(DC_NAME),
                                   type_='iso',
                                   host=api.hosts.get(HOST_NAME),
                                   storage = params.Storage(   type_='nfs',
                                                               address=ISO_ADDRESS,
                                                               path=ISO_PATH  )  )

try:
    if api.storagedomains.add(isoParams):
        print 'ISO Domain was created/imported successfully'
except Exception as e:
    print 'Failed to create/import an ISO Domain:\n%s' % str(e)

try:
    if api.datacenters.get(DC_NAME).storagedomains.add(api.storagedomains.get(ISO_NAME)):
        print 'ISO Domain was attached successfully'
except Exception as e:
    print 'Failed to attach ISO Domain:\n%s' % str(e)

try:
    if api.datacenters.get(DC_NAME).storagedomains.get(ISO_NAME).activate():
        print 'ISO Domain was activated successfully'
except Exception as e:
    print 'Failed to activate ISO Domain:\n%s' % str(e)


# Attach Export domain to Data Center

isoParams = params.StorageDomain(name=EXPORT_NAME,
                                   data_center=api.datacenters.get(DC_NAME),
                                   type_='export',
                                   host=api.hosts.get(HOST_NAME),
                                   storage = params.Storage(   type_='nfs',
                                                               address=EXPORT_ADDRESS,
                                                               path=EXPORT_PATH  )  )
try:
    if api.storagedomains.add(isoParams):
        print 'Export Domain was created/imported successfully'
except Exception as e:
    print 'Failed to create/import an Export Domain:\n%s' % str(e)

try:
    if api.datacenters.get(DC_NAME).storagedomains.add(api.storagedomains.get(EXPORT_NAME)):
        print 'Export Domain was attached successfully'
except Exception as e:
    print 'Failed to attach Export Domain:\n%s' % str(e)

try:
    if api.datacenters.get(DC_NAME).storagedomains.get(EXPORT_NAME).activate():
        print 'Export Domain was activated successfully'
except Exception as e:
    print 'Failed to activate Export Domain:\n%s' % str(e)


# Create VM with one NIC and one Disk

try:
    if api.vms.add( params.VM(name=VM_NAME,
                             memory=2147483648,
                             cluster=api.clusters.get(CLUSTER_NAME),
                             template=api.templates.get('Blank')) ):
        print 'vm created successfully'
except Exception as e:
    print 'Failed to create vm:\n%s' % str(e)


try:
    if api.vms.get(VM_NAME).nics.add( params.NIC(name='eth0',
                                                network=params.Network(name='ovirtmgmt'),
                                                interface='virtio')):
        print 'NIC was added to vm successfully'
except Exception as e:
    print 'Failed to add NIC to vm:\n%s' % str(e)


try:
    if api.vms.get(VM_NAME).disks.add( params.Disk(storage_domains=params.StorageDomains(storage_domain=[api.storagedomains.get(STORAGE_NAME)]),
                                                  size=VDISKSIZE,
                                                  type_='system',
                                                  status=None,
                                                  interface='virtio',
                                                  format='cow',
                                                  sparse=True,
                                                  bootable=True)  ):
        print 'Disk was added to vm successfully'
except Exception as e:
    print 'Failed to add disk to vm:\n%s' % str(e)

print 'Waiting for vm to reach Down status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'down':
            break
    except:
        pass


# Start VM

try:
    if api.vms.get(VM_NAME).start():
        print 'Start VM'
except Exception as e:
    print 'Failed to Start VM:\n%s' % str(e)

print 'Waiting for vm to reach Up status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'up':
            break
    except:
        pass

time.sleep(20) # workaround for bug that vm is reported as Up before it's actually Up


# Hibernate VM

try:
    if api.vms.get(VM_NAME).suspend():
        print 'Hibernate VM'
except Exception as e:
    print 'Failed to Hibernate VM:\n%s' % str(e)

print 'Waiting for vm to reach Suspended status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'suspended':
            break
    except:
        pass


# Resume VM

try:
    if api.vms.get(VM_NAME).start():
        print 'Resume VM'
except Exception as e:
    print 'Resume VM:\n%s' % str(e)

print 'Waiting for vm to Resume'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'up':
            break
    except:
        pass

time.sleep(20) # workaround for bug that vm is reported as Up before it's actually Up


# Stop VM

try:
    if api.vms.get(VM_NAME).stop():
        print 'Stop VM'
except Exception as e:
    print 'Stop VM:\n%s' % str(e)

print 'Waiting for vm to reach Down status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'down':
            break
    except:
        pass


# Export vm (into Export Domain)

try:
    if api.vms.get(VM_NAME).export(params.Action(storage_domain=api.storagedomains.get(EXPORT_NAME))):
        print 'VM was exported successfully'
except Exception as e:
    print 'Failed to export vm:\n%s' % str(e)

print 'Waiting for vm to reach Down status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'down':
            break
    except:
        pass


# Delete vm

try:
    if api.vms.get(VM_NAME).delete():
        print 'VM was removed successfully'
except Exception as e:
    print 'Failed to remove VM:\n%s' % str(e)

print 'Waiting for vm to be deleted'
while 1:
    try:
        if VM_NAME not in [vm.name for vm in api.vms.list()]:
            break
    except:
        pass


# Import vm (from Export Domain)

try:
    if api.storagedomains.get(EXPORT_NAME).vms.get(VM_NAME).import_vm(params.Action(storage_domain=api.storagedomains.get(STORAGE_NAME), cluster=api.clusters.get(name=CLUSTER_NAME))):
        print 'VM was imported successfully'
except Exception as e:
    print 'Failed to import VM:\n%s' % str(e)

print 'Waiting for vm to reach Down status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'down':
            break
    except:
        pass


# Create a snapshot to vm

SNAPSHOT_NAME = 'my_snapshot'
try:
    if api.vms.get(VM_NAME).snapshots.add(params.Snapshot(description=SNAPSHOT_NAME, vm=api.vms.get(VM_NAME))):
        print 'Creating a Snapshot'
except Exception as e:
    print 'Failed to Create a Snapshot:\n%s' % str(e)

print 'Waiting for Snapshot creation to finish'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'image_locked':
            break
    except:
        pass


# Create a Template from VM

TEMPLATE_NAME = 'my_template'
try:
    if api.templates.add(params.Template(name=TEMPLATE_NAME, vm=api.vms.get(VM_NAME), cluster=api.clusters.get(CLUSTER_NAME))):
        print 'Creating a Template from vm'
except Exception as e:
    print 'Failed to Create a Template from vm:\n%s' % str(e)

print 'Waiting for vm to reach Down status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'down':
            break
    except:
        pass


# Create VM from Template

try:
    if api.vms.add( params.VM(name='my_vm_from_template',
                            cluster=api.clusters.get(CLUSTER_NAME),
                            template=api.templates.get(TEMPLATE_NAME)) ):
        print 'VM was created from Template successfully'
except Exception as e:
    print 'Failed to create VM from Template:\n%s' % str(e)

print 'Waiting for vm to reach Down status'
while 1:
    try:
        if api.vms.get(VM_NAME).status.state == 'down':
            break
    except:
        pass
</pre>
