{{autolang|base=yes}}

<!-- The actual name of your feature page should look something like: Features/YourFeatureName.  This keeps all features in the same namespace -->
= Host Power Management Proxy Preferences =

== Summary ==
<!-- A sentence or two summarizing what this feature is and what it will do.  This information is used for the overall feature summary page for each release. -->

When Power Management is defined on the Host and the host becomes non-responding , the engine will attempt to restart the Host after a graceful period is passed<br>
The Host non-responding treatment is doing the following actions <br>
   Send a Stop command 
   Wait for status 'off' 
     (controlled by FenceStopStatusDelayBetweenRetriesInSec,FenceStopStatusRetries configuration values)
   Send a Start command
   Wait for status 'on' 
     (controlled by FenceStartStatusDelayBetweenRetriesInSec,FenceStartStatusRetries configuration values)

The current implementation of PM proxy selection is based on selection of host from the data center with 'UP' status.<br>

This implementation is not robust enough, since fence action such as 'RestartVds' which is comprised of two fence actions (stop & start) might be able to complete the first action, but fails to detect a proxy for the second. In some cases the entire DC becomes non-responsive or even stopped. In that case no host on DC could act as a proxy.

This document describes an extension to the current proxy selection algorithm that enables each Host to define its proxy chain as a priority list.

Specifically, the local host may be chosen as a proxy for fencing operations <br>
This may be achieved by installing a full VDSM packages on the local machine  by using<br>
[http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#Local_VDSM Local VDSM]

An alternative to installing a lightweight local VDSM is writing a [http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#Fence_Wrapper Fence Wrapper]

And finally , we can also implement it by additional [http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#VDSM_Instance VDSM Instance]

== Owner ==
<!--This should link to your home wiki page so we know who you are-->
* Feature owner: [[User:emesika| Eli Mesika]]
:* GUI Component owner: [[User:emesika| Eli Mesika]]
:* REST Component owner: [[User:emesika| Eli Mesika]]
:* Engine Component owner: [[User:emesika| Eli Mesika]]
:* QA Owner: [[User:ykaul| Yaniv Kaul]] 

<!-- Include you email address that you can be reached should people want to contact you about helping with your feature, status is requested, or  technical issues need to be resolved-->
* Email: emesika@redhat.com

== Current status ==
* Target Release: 3.2
* Status: Design
* Last updated date: Nov 4 2012

== Detailed Description ==
<!-- Provide the details of the feature. What is it going to include. See the sections below. -->
<!-- New entities and changes in existing entities. -->


== CRUD ==
Adding a pm_proxy_preferences column to vds_static table.<br>
this column represents a comma separated proxy preferences lists per Host<br>
The default value for this column will be : 'CLUSTER,DC,ENGINE'<br>
So, if this value is for example the default value, a Host that is in non-responsive state and has Power Management configured will be fenced using the first UP Host in Cluster then the first UP Host in the Data Center then the engine.

Modify views vds and vds_with_tags to include pm_proxy_preferences<br>
Update InsertVdsStatic and UpdateVdsStatic SPs to handle pm_proxy_preferences<br>

=== DAO ===
Adding handling of pm_proxy_preferences to <br>
VdsStaticDAODbFacadeImpl<br>
VdsDAODbFacadeImpl

=== Metadata ===
Adding test for the new pm_proxy_preferences field in VdsStaticDAOTest <br>
Adding test data in fixtures.xml

== Configuration ==
A new configuration value will be added named PROXY_DEFAULT_PREFERENCES , for backward compatibility it will be version dependant:<br>
  For 3.1 - the value will be : DC
  For 3.2 - the value will be : CLUSTER,DC,ENGINE

This configuration value should be exposed to the engine-config tool.

== Business Logic == 
Add pmProxyPreferences field to VdsStatic<br>
Add pmProxyPreferences field to VDS<br>

FencingExecutor::FindVdsToFence<br>
------------------------------------
Apply the logic of searching for the proxy according to the pmProxyPreferences value<br>



=== Flow ===

Start/Stop commands are passed to the Host fencing agent via a proxy machine, in this case <br>
The pm_proxy_preferences of the Host that is in non-responding state is examined<br>
for each entry in the  comma-separated values for this field we are trying to send the fencing command (Start/Stop) via the proxy<br>
In the case that the proxy is the local engine , a validation phase of checking existence of local installed fence-agents package is issued<br>
The first proxy on the pm_proxy_preferences chain that succeeded to execute the command takes <br>
If all proxies in the pm_proxy_preferences chain fails to execute the fencing operation , an ERROR is written to the log.<br>
Actual proxy used in a fencing operation should be logged as well.

== API ==
<!-- describe changes in REST API and SDK -->

The REST API will be enhanced to include the new Proxy Preferences as follows<br>

   <host>
     <power_management>
        <proxies>
           <proxy>
              <predefined>engine</predefined>
           </proxy>
           <proxy>
              <predefined>cluster</predefined>
           </proxy>
          <proxy>
              <predefined>datacenter</predefined>
           </proxy>
        </proxies>
     </power_management>
  </host>

To achieve that we should do the following: <br>
in api.xsd (schema) define new elements:<br>
   ''proxy'' which contains one field : predefined 
   ''proxies'' which contains a list of proxy
Add enum PreDefinedFenceType {ENGINE,CLUSTER,DATACENTER} in org.ovirt.engine.api.model package<br>
Add PreDefinedFenceType enum to capabilities (BackendCapabilitiesResource)<br>
Add enum validations<br>
Add custom mapping for these new power-management fields in HostMapper.java, for both REST-->Backend and Backend-->REST directions)<br>
Add metadata to rsdl_metadata_v-3.1.yaml

== User Experience ==
<!-- Describe user experience related issues. For example: We need a wizard for ...., the behaviour is different in the UI because ....., etc. -->

A new list will be added to the Power Management Tab when adding a new Host or modifying existing Host<br>
The list will have by default the entries : CLUSTER ,DC and ENGINE(in 3.2)<br>

The user may also use the UP and DOWN buttons to change items order inside the list(item order = priority)<br>

See [http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#Open_Issues pre-defined values]  for details.

[[File:ProxyPreferences.png]]

== Installation/Upgrade ==
<!-- Describe how the feature will effect new installation or existing one. -->
Add the new pm_proxy_preferences column in the upgrade script.<br>
Adding configuration values as described in [http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#Configuration Configuration]

=== User work-flows ===
<!-- Describe the high-level work-flows relevant to this feature. -->

== Enforcement ==


== Dependencies / Related Features and Projects ==
<!-- What other packages (RPMs) depend on this package?  Are there changes outside the developers' control on which completion of this feature depends?  -->
=== Affected oVirt projects ===

[http://wiki.ovirt.org/wiki/Features/HostPMMultipleAgents Host Power Management Multiple Agents]

== Documentation / External references ==
<!-- Is there upstream documentation on this feature, or notes you have written yourself?  Link to that material here so other interested developers can get involved. Links to RFEs. -->
[[Features/HostPMProxyPreferences]]

== Future Directions ==
The user may add other existing Host by pressing the ADD button, this will open a drop-down list of all available Hosts defined in the Data Center except the currently edited/added Host<br>

We are skipping that for the first phase since it has complexities when a Host is removed or moved to another Cluster etc.

== Open Issues ==
<!-- Issues that we haven't decided how to take care of yet. These are issues that we need to resolve and change this document accordingly. -->

=== pre-defined values ===
Are pre-defined values applied implicitly?<br>
Meaning, if a user modified the PM Proxy Preferences to be for example only : IP1,IP2 <br>
Does this means that this is the actual chain and if both IP1 & IP2 fails to serve as proxies the Power Management operation fails?<br>
or, we should say that this actually implies IP1,IP2,engine,cluster,dc implicitly?<br>
In case of that, what should we apply if user set PM Proxy Preferences to be engine,IP1,IP2 ?<br>
Suggestion:<br>
engine,cluster,dc should be applied implicitly and missing definitions from the original default (engine,cluster.dc) will be applied using the same priority<br>
Examples:<br>
engine,IP1,IP2 => engine,IP1,IP2,cluster,dc
IP1,dc,IP2     => IP1,dc,IP2,engine,cluster


=== Local VDSM ===

In the case that engine is selected as a proxy, we may want a separate service (temporary name : local vdsm) that will run on the local host and expose only the fencing functionality from VDSM<br>

This option has major affect on the effort/cost and time-line of this feature since we need to write a new service for that, package it , install it etc.

=== Fence Wrapper ===
A script or standalone program that will call the fence-agents package scripts directly<br>
An option is to use the separation of fenceAgent.py from API.py as suggested [http://gerrit.ovirt.org/#/c/7190/7/vdsm/API.py here]<br>
(Invocation in this case from [http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#JNA JNA] )<br>
In this case we do not need a [http://wiki.ovirt.org/wiki/Features/Design/DetailedHostPMProxyPreferences#Local_VDSM Local VDSM]

=== VDSM Instance ===
A separate instance of vdsm, listening on a separate port.


== JNA ==
Java Native Access provides Java programs easy access to native shared libraries without using the Java Native Interface. 

Example:<br>
The following program loads the local C standard library implementation and uses it to call the printf function.

 import com.sun.jna.Library;
 import com.sun.jna.Native;
 import com.sun.jna.Platform;
 
 /** Simple example of native library declaration and usage. */
 public class HelloWorld {
    public interface CLibrary extends Library {
        CLibrary INSTANCE = (CLibrary) Native.loadLibrary(
            (Platform.isWindows() ? "msvcrt" : "c"), CLibrary.class);
        void printf(String format, Object... args);
    }
 
    public static void main(String[] args) {
        CLibrary.INSTANCE.printf("Hello, World\n");
        for (int i = 0; i < args.length; i++) {
            CLibrary.INSTANCE.printf("Argument %d: %s\n", i, args[i]);
        }
    }
 }
[[Category: Feature]]
