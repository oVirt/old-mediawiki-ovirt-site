== oVirt Scheduler ==
=== Summary ===
As long oVirt is progressing and continue to gather features, there is an ever growing actual need for better scheduling: configurable, <br />
customized and flexible, both in the programmatic and functionality levels.<br />
It is known that the scheduling problem has NP-complete complexity, therefore there's a need to optimize the problem solution,<br />
to do that each scheduler implementation should focus on it's own subjective needs. To accomplish that we propose to have a scheduling<br />
API, in which the users can have their own private optimized schedulers by adding / modifying the default oVirt scheduler.<br />
This page includes the high-level design for the new scheduling model.

=== Owner ===
* Name: [[User:gchaplik| Gilad Chaplik]]
** Email: <gchaplik@redhat.com>
* Name: [[User:Doron| Doron Fediuck]]
** Email: <dfediuck@redhat.com>

=== Current status ===
Status: design

Last updated: {{CURRENTMONTHNAME}} {{CURRENTDAY}}, {{CURRENTYEAR}}<!--This is markup for current date, do not change-->

=== Benefit to oVirt ===
* Allow others to integrate with oVirt's Scheduler.
* Allow users to add their own scheduling logic.
* Should allow other languages (Python), run as script/dynamically.
* Load balancing policies can be overwritten.
* Provides internal modularity and boundaries.

=== Description ===
====oVirt Scheduler concepts====
The new oVirt scheduler will use a process that gets a VM scheduling request, and will apply hard constraints<br />
and soft constraints to get the optimal host for that request at this point of time.

* Filter: a basic logic unit which filters out hypervisors who do not satisfy the hard constraints for placing a given VM.
* Cost function: a function that gives a score to a given host based on its internal logic. This is a way to implement soft constraints in the scheduling process.

# The scheduling process will take all relevant hosts and run them through the relevant filters
## Note that from one filter to another the host number may decrease
## Filter order is meaningless
# The filtered host list will then be used as an input to the relevant cost functions, which will create a cost table
## The cost table indicates the host with the lowest cost, which is the optimal solution for the given request.
## Cost function results may be prioritized using a factor.

[[File:Hosts.png]]

==== Load Balancing ====

Load balancing logic is a separate logic functionality based on the balancing policy.<br />
The scheduler has a balance function that implements the policy. The internal load balancing<br />
policies oVirt scheduler supports, are based on VM migration. However, any user may implement<br />
a policy which balances the load base on taking a network-related action or even shutting down<br />
a physical server.<br />
<br />
So the key insight here, is that load balancing is a general term based on the load the user would like to handle.<br />
Another key insight is the fact that scheduling is strongly related to balancing. The reason is that we would<br />
like on going scheduling to work in synergy with the balancing policy. For example, there's no point of placing<br />
a VM on a host we would like to shutdown to save power (power saving policy), as this will force the balancing<br />
logic to migrate this VM next time it runs.<br />
<br />
The way to express the balancing-scheduling relation is by correlating both in the following way:<br />
The balancing logic calculates over-utilized hosts based on the relevant policy. Then it can pick a VM<br />
to be migrated from each overloaded host. Additionally, the same balancing logic can calculate the<br />
under-utilized hosts. So once we know which VM(s) we want to migrate and where they should move to,<br />
the process will run the standard scheduling process, using the VM balancing wants to move and the<br />
under-utilized hosts. This is the only way to ensure we have no conflicts between scheduling and balancing.<br />
<br />
Finally, it is important to understand that balancing can be also expressed by filters and / or cost function.<br />
For example we can implement power saving policy by using a cost function that returns the number of VMs<br />
running on every host. This will give hosts running many VMs a higher grade which most likely to be used<br />
again. In this way every new VM will run on a host running other VMs, and every balancing iteration will migrate<br />
VMs to hosts running more VMs. The end result is a few hosts running most of the VMs and hosts running no VMs<br />
at all.

==== Using external code ====
The new design will be written in Java, but will allow users to add their own logic in Python.<br />
This will allow users to use the Python SDK for Filters, Functions and Balancing. In order to achieve<br />
that, the scheduling process needs to serialize parameters when calling the Python code. Past experience<br />
demonstrated this is a heavy load operation. So in order to reduce the number of serializations, the oVirt<br />
scheduler will have a Python proxy running the Python code, and the invocation to it will be done once for<br />
every request.<br />
So the expected flow is:<br />

    scheduling request -> Scheduler<br />
                                                   -> Java Filtering process<br />
                                                   -> Python Filtering process<br />
                                                   -> Java cost process<br />
                                                   -> Python cost process<br />
    <- Scheduling response

For safety reasons the proxy will run the external code in a safe way to may sure it does not crash<br />
if the external code crashes.<br />
<br />
It is expected that multiple Python logic will delay the scheduling process. So if performance needed,<br />
it's adviced to add your logic in Java. Either way the scheduler will timeout if unable to satisfy a request<br />
in a given time period. So readers should be aware of the implications of slowing down the scheduling<br />
process.

=== Detailed Design ===
The specific API and design details  can be found in the following page: [[ Features/oVirtSchedulerAPI ]]

=== References ===
Some of the concepts in this design are related to the filter scheduler Nova Scheduler is using.<br />
http://docs.openstack.org/trunk/openstack-compute/admin/content/filter-scheduler.html<br />
The idea is to possibly allow logic and potentially some code sharing between these sub-projects,<br />
even though both use different implementations and architectures.

[[Category:Feature]]
[[Category:SLA]]
