<!-- {{autolang|base=yes}} -->
<!-- The actual name of your feature page should look something like: "Your feature name". Use natural language to name the pages. -->
== WebSocketProxy on a separate host <!-- The name of your feature --> ==
{{Feature|name=WebSocketProxy on a separate host|modules=websocket-proxy|status=Design|version=3.5.0}}

=== Summary ===
<!-- A sentence or two summarizing what this feature is and what it will do.  This information is used for the overall feature summary page for each release. -->
The aim of this feature is to enhance the engine setup being able to install and configure the WebSocketProxy on a second machine, where engine does not run, in a fully automated way.

=== Owner ===
<!--This should link to your home wiki page so we know who you are-->
* Name: [[User:stirabos| Simone Tiraboschi]]
<!-- Include you email address that you can be reached should people want to contact you about helping with your feature, status is requested, or  technical issues need to be resolved-->
* Email: <stirabos@redhat.com>

=== Current status ===
* Design
* Last updated on {{REVISIONYEAR}}-{{REVISIONMONTH}}-{{REVISIONDAY2}} by [[User:{{urlencode:{{REVISIONUSER}} | WIKI}}]] <!--This is markup for the date on which the current page was last changed, do not change-->

=== Detailed Description ===
<!-- Expand on the summary, if appropriate.  A couple sentences suffices to explain the goal, but the more details you can provide the better. -->
The noVNC client used for VM web console utilizes websockets for passing VNC data. However, VNC server in qemu doesn't support websockets natively and there must be a websocket proxy placed between the client and VNC server. This proxy can run either on any node that has access to the host network but, currently, the engine-setup is only able to install and configure the WebSocketProxy on the node that runs the engine.

It's currently already possible run the WebSocketProxy  on a separate host but it requires a manual procedure [http://www.ovirt.org/Features/noVNC_console#Setup_Websocket_Proxy_on_a_Separate_Machine]. What we are proposing will automate a bit the setup process making it easier but still requiring some manual actions on both the machine.

Assumption:
* The user still needs to install the needed RPMs on both the machine; the user have to install only the required RPMs, installing a not required RPM on one of the two machine can broken the process 
* The user still need to run engine-setup on both the machine 
* The user knows the root password of the  first machine when on the second

Under this assumptions it can works this way:

*On the first node:
*# Via yum, the user installs the required RPMs on the first machine (the engine one) ensuring to don't install ovirt-engine-websocket-proxy
*# Then the can launch engine-setup
*# Acknowledging that  ovirt-engine-websocket-proxy RPM is not install, the engine-setup asks to the user if he/she wants to install the WebSocketProxy on a different machine.
*# If so, the engine-setup asks for a fqdn and and port of the machine that will run the WebSocketProxy
*# engine-setup on the first machine generates and signs also the cert for the WebSocketProxy one storing them on a well defined path: having it running on a different host with a different fdqn requires an additional SSL cert

* On the second node:  
*# Via yum user install only ovirt-engine-websocket-proxy being sure to not install ovirt-engine (if so the engine-setup will run as for an installation with the engine and the websocket-proxy on a single node)
*# Then the can launch engine-setup
*# Acknowledging that  ovirt-engine-websocket-proxy RPM is install but ovirt-egine no, the engine-setup asks:
*#* The fqdn of the engine node
*#* The fqdn of the WebSocketProxy (current) node
*#* The port to bind on
*# engine-setup ask the user for the engine machine root password to download its own certs signed by the CA and also the private key with scp 
*# Than engine-setup downloads CA and engine public cert for data validation over https
*# engine-setup configures the service editing /etc/ovirt-engine/ovirt-websocket-proxy.conf.d/10-setup.conf
*# engine-setup starts the WebSocketProxy service

Engine setup currently asks:
'Configure websocket proxy on the machine' accepting

=== Benefit to oVirt ===
<!-- What is the benefit to the oVirt project?  If this is a major capability update, what has changed?  If this is a new feature, what capabilities does it bring? Why will oVirt become a better distribution or project because of this feature?-->
The installation process will become easier for who needs to install the WebSocketProxy on a separate engine cause it will not require any successive manual procedure.

=== Dependencies / Related Features ===
<!-- What other packages depend on this package?  Are there changes outside the developers' control on which completion of this feature depends?  In other words, completion of another feature owned by someone else and might cause you to not be able to finish on time or that you would need to coordinate? Other Features that might get affected by this feature? -->
The WebSocketProxy is already able to run on a different host, only the engine setup should be improved to allow it being automatically configured.  

=== Documentation / External references ===
<!-- Is there upstream documentation on this feature, or notes you have written yourself?  Link to that material here so other interested developers can get involved. Links to RFEs. -->
* [RFE] Allow setup of ovirt-websocket-proxy on separate machine - [https://bugzilla.redhat.com/show_bug.cgi?id=1080992]
* [RFE] rhevm-websocket-proxy - using as standalone service - automatic configuration - [https://bugzilla.redhat.com/show_bug.cgi?id=985945]

=== Testing ===
A tester should perform a full oVirt installation choosing to install the WebSocketProxy on a different host. The The tester should be able to connect to any running machine via the noVNC web client.

=== Comments and Discussion ===
<!-- This below adds a link to the "discussion" tab associated with your page.  This provides the ability to have ongoing comments or conversation without bogging down the main feature page -->
* Refer to [[Talk:WebSocketProxy on a separate host]]  <!-- This adds a link to the "discussion" tab associated with your page.  This provides the ability to have ongoing comments or conversation without bogging down the main feature page -->

[[Category:Feature]]
