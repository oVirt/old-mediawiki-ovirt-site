= Development Environment =

<b>Please notice:</b> Most updated certified documentation is available within source tree at [http://gerrit.ovirt.org/gitweb?p=ovirt-engine.git;a=blob;f=README.developer;hb=HEAD README.developer].

This page is mostly to absorb community experience into the certified procedures.

== Prerequisites ==

=== RPM based ===

Set up nightly repository:

'''Option 1:''' Install the repository file for Fedora (replace <code>fedora</code> with <code>el</code> for RHEL or equivalent distribution):
 <nowiki># yum install http://ovirt.org/releases/ovirt-release-fedora.noarch.rpm</nowiki>
'''Option 2:''' Create manually at  <code>/etc/yum.repos.d/ovirt-nightly.repo</code>, replace <code>Fedora</code> with <code>EL</code> if you are using RHEL or an equivalent distribution:
 <nowiki>[ovirt-nightly]
name=ovirt-nightly
baseurl=http://resources.ovirt.org/releases/nightly/rpm/Fedora/$releasever/
enabled=1
gpgcheck=0
priority=1
protect=1</nowiki>

Install 3rd party packages:
 <nowiki># yum install git java-devel maven openssl postgresql-server \
    m2crypto python-psycopg2 python-cheetah python-daemon libxml2-python \
    jboss-as unzip</nowiki>

Install ovirt packages:
 <nowiki># yum install --enablerepo ovirt-nightly ovirt-host-deploy</nowiki>

Make sure openjdk is the java preferred:
 <nowiki># alternatives --config java
# alternatives --config javac</nowiki>

=== Debian based ===

Install 3rd party packages:
 <nowiki># apt-get install git openjdk-7-jdk maven openssl postgresql \
    python-m2crypto python-psycopg2 python-cheetah python-daemon \
    jboss-as unzip</nowiki>

Download jboss-as-7.1.1 from [http://www.jboss.org/jbossas/downloads/ jboss site] and extract to $HOME.

Install ovirt packages:
  TODO

Make sure openjdk is the java preferred:
 <nowiki># update-alternatives --config java</nowiki>

=== Database ===

On Fedora 19,  you need to enable postgresql service:
 <nowiki># chkconfig postgresql on </nowiki>

Based on your distribution it may be that you require to initialize the database.

 <nowiki>Fedora: # postgresql-setup initdb
Gentoo: # emerge --config postgresql-server</nowiki>

Configure PostgreSQL to accept network connection by locating <code>pg_hba.conf</code> file, locations includes:
{| class="wikitable"
|-
|Fedora||/var/lib/pgsql/data/pg_hba.conf
|-
|Debian||/etc/postgresql/*/main/pg_hba.conf
|-
|Gentoo||/etc/postgresql-*/pg_hba.conf
|}

Locate: 127.0.0.1/32 and ::1/128 and allow "password" authentication for IPv4 and IPv6 connections, and "ident" authentication for unix domain socket connections.
 <nowiki>
# IPv4 local connections:
host    all             all             127.0.0.1/32            password
# IPv6 local connections:
host    all             all             ::1/128                 password
# "local" is for Unix domain socket connections only
local   all             all                                     ident
</nowiki>

Restart PostgreSQL service for definitions to take effect:
 <nowiki>service postgresql restart</nowiki>

Create database and user, usually using the following commands as root:
 <nowiki>su - postgres -c "psql -d template1 -c \"create user engine password 'engine';\""
su - postgres -c "psql -d template1 -c \"create database engine owner engine;\""</nowiki>

It basically logins into PostgreSQL database using privileged user, creates a user and creates a database owned by the user.

=== Source ===

Checkout source:
 <nowiki>cd $HOME
$ git clone git://gerrit.ovirt.org/ovirt-engine</nowiki>

== Usage ==

<font color=red><b>WARNING:</b> DO NOT RUN ENVIRONMENT UNDER ROOT ACCOUNT</font>

Once prerequisites are in place, you are ready to build and use ovirt-engine.

Build product and install at <code>$HOME/ovirt-engine</code>, execute the following as unprivileged user while residing within source repository:
 <nowiki>$ make install-dev PREFIX="$HOME/ovirt-engine"</nowiki>

Build may be customized, refer to [http://gerrit.ovirt.org/gitweb?p=ovirt-engine.git;a=blob;f=README.developer;hb=HEAD README.developer] for further information.

Setup product by executing the following command and replying to questions, if you followed the database creation above then your database user is 'engine', its password is 'engine' and the database name is 'engine':
 <nowiki>$ $HOME/ovirt-engine/bin/engine-setup</nowiki>

If jboss is installed at alternate location, add the following while JBOSS_HOME contains the location: <code>--jboss-home="${JBOSS_HOME}"</code>

When product is successfully set up, execute the ovirt-engine service:
 <nowiki>$ $HOME/ovirt-engine/share/ovirt-engine/services/ovirt-engine/ovirt-engine.py start</nowiki>

The service will not exit as long as engine is up, to stop press <Ctrl>C.

Access your engine using:
* http://localhost:8080
* https://localhost:8443

Debug port is available via port <code>8787</code>, to be used by Eclipse or any other debugger. 

When performing code change which do not touch modify database, there is no need to re-execute the setup, just execute:
 <nowiki>$ make install-dev PREFIX="$HOME/ovirt-engine"</nowiki>

And start the engine service.

To rebuild everything use:

 make clean install-dev PREFIX="$HOME/ovirt-engine"

To rebuild a single artifact, for example utils:

 make clean install-dev PREFIX=$HOME/ovirt-engine \
     EXTRA_BUILD_FLAGS="-pl org.ovirt.engine.core:utils"

Now make a single artifact that resides within the ear (bll,etc):

 make clean install-dev PREFIX=$HOME/ovirt-engine \
     EXTRA_BUILD_FLAGS="-pl org.ovirt.engine.core:bll,org.ovirt.engine:engine-server-ear"

Now your updated artifact is in place.

== Advanced Usage ==

=== Enable Unit Tests ===

 <nowiki>$ make install-dev PREFIX="$HOME/ovirt-engine" BUILD_UT=1</nowiki>

=== Enable DAO Tests ===

''Optional:'' Create database, provided the user is engine, password engine:

 <nowiki># su - postgres -c "psql -d template1 -c \"create database engine_dao_tests owner engine;\""
$ PGPASSWORD=engine ./packaging/dbscripts/create_schema.sh -d engine_dao_tests -u engine</nowiki>

Build with tests:

 <nowiki>$ make maven BUILD_GWT=0 BUILD_UT=1 EXTRA_BUILD_FLAGS="-P enable-dao-tests \
    -D engine.db.username=engine \
    -D engine.db.password=engine \
    -D engine.db.url=jdbc:postgresql://localhost/engine_dao_tests"</nowiki>

=== Upgrade Test database ===

If you do not wish to drop database and create it again, or you want do test the upgrade cycle of the database, run the following command, assumption of credentials are the same as in create:

 <nowiki>$ PGPASSWORD=engine ./packaging/dbscripts/upgrade.sh -u engine -d engine_dao_tests </nowiki>

=== GWT Debug ===

 $ make install-dev PREFIX="$HOME/ovirt-engine"
 $ make gwt-debug DEBUG_MODULE=<module>

While <module> is webadmin or userportal-gwtp.

Debug port is 8000, usage instructions are available at[[https://developers.google.com/web-toolkit/doc/latest/DevGuideCompilingAndDebugging 1]].

Common URLs, provided components running on same machine:
:{|
|-
| WebAdmin || http://127.0.0.1:8080/webadmin/webadmin/WebAdmin.html?gwt.codesvr=127.0.0.1:9997
|-
| UserPortal || http://127.0.0.1:8080/UserPortal/org.ovirt.engine.ui.userportal.UserPortal/UserPortal.html?gwt.codesvr=127.0.0.1:9997
|}

= Packaging =

== RPM packaging ==

Build system supports standard RPM packaging out of source tarball.

Create source tarball by executing:
 <nowiki>$ make dist</nowiki>

Install build dependencies, replacing <code>@x@</code> with file names, this should be executed second time only if build dependencies are changed:
 <nowiki>$ rpmbuild -ts @tarball@
# yum-builddep @srpm@</nowiki>

Build RPMS:
 <nowiki>$ rpmbuild -tb @tarball@</nowiki>

RPM customization is supported refer to [http://gerrit.ovirt.org/gitweb?p=ovirt-engine.git;a=blob;f=ovirt-engine.spec.in;hb=HEAD ovirt-engine.spec.in].

{| class="wikitable"
|-
!Variable||Default||Description||Usage
|-
|ovirt_build_quick||0||build as quickly as we can||syntax checks
|-
|ovirt_build_minimal||0||minimal build||development fully functional for firefox only
|-
|ovirt_build_gwt||1||gwt enablement||build or skip
|-
|ovirt_build_locales||1||build extra locales||production build
|}

Example:
 <nowiki>rpmbuild -D"ovirt_build_minimal 1" -tb @tarball@</nowiki>

= Troubleshooting =
  First, check if all prerequisites are installed.
  http://www.ovirt.org/OVirt_Engine_Development_Environment#Prerequisites

There are issues when building oVirt engine using the IBM JDK, more details can be found in the following page:
https://code.google.com/p/google-web-toolkit/issues/detail?id=7530

The workaround to this problem is removing all the .gwtar files that are inside the gwt-user.jar package and building the project using the "-Dgwt.usearchives=false" parameter in maven.

[[Category:Engine]]
[[Category:How to]]
