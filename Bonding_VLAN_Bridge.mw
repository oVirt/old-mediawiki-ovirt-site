== How set up an enterprise network configuration manually. ==

Start by disabling <code>NetworkManager</code> and enable the good ol' <code>network</code> service.

Fedora:
<pre># systemctl stop NetworkManager
# systemctl disable NetworkManager
# systemctl enable network
# systemctl start network</pre>

CentOS:
<pre># service NetworkManager stop
# chkconfig --level 2345 NetworkManager off
# chkconfig --level 2345 network on
# service network start</pre>
<br />

Define to load bonding at boot:
<pre># cat > /etc/modprobe.d/bonding.conf << EOF
alias bond0 bonding
EOF</pre>
<br />

Then define the bond. This is LACP mode:
<pre># cat > /etc/sysconfig/network-scripts/ifcfg-bond0 << EOF
DEVICE=bond0
NM_CONTROLLED=no
USERCTL=no
BOOTPROTO=none
BONDING_OPTS="mode=4 miimon=100"
TYPE=Ethernet
MTU=9000
EOF</pre>
<br />

Then "enslave" the physical NICs to the bond:
<pre># cat > /etc/sysconfig/network-scripts/ifcfg-em1 << EOF
NM_CONTROLLED="no"
BOOTPROTO="none"
DEVICE="em1"
ONBOOT="yes"
USERCTL=no
MASTER=bond0
SLAVE=yes
EOF

# cat > /etc/sysconfig/network-scripts/ifcfg-em2 << EOF
NM_CONTROLLED="no"
BOOTPROTO="none"
DEVICE="em2"
ONBOOT="yes"
USERCTL=no
MASTER=bond0
SLAVE=yes
EOF</pre>
<br />

Then create VLAN interfaces ontop of the bond. In this example, I´m using VLAN ID 1 and 2:
<pre># cat > /etc/sysconfig/network-scripts/ifcfg-bond0.1 << EOF
DEVICE=bond0.1
VLAN=yes
BOOTPROTO=none
NM_CONTROLLED=no
BRIDGE=br0
MTU=1500
EOF

# cat > /etc/sysconfig/network-scripts/ifcfg-bond0.2 << EOF
DEVICE=bond0.2
VLAN=yes
BOOTPROTO=none
NM_CONTROLLED=no
BRIDGE=ovirtmgmt
MTU=9000
EOF</pre>
<br />

Lastly, create the bridges ontop of the VLAN interfaces. The names can be whatever you want, except one needs to be called "ovirtmgmt" of course:
<pre># cat > /etc/sysconfig/network-scripts/ifcfg-ovirtmgmt << EOF
TYPE=Bridge
NM_CONTROLLED="no"
BOOTPROTO="none"
DEVICE="ovirtmgmt"
ONBOOT="yes"
IPADDR=XXX.XXX.XXX.XXX
NETMASK=255.255.255.0
EOF

# cat > /etc/sysconfig/network-scripts/ifcfg-br0 << EOF
TYPE=Bridge
NM_CONTROLLED="no"
BOOTPROTO="none"
DEVICE="br0"
ONBOOT="yes"
IPADDR=XXX.XXX.XXX.XXX
NETMASK=255.255.255.0
EOF</pre>
<br />

Gateway goes into:
<pre># cat > /etc/sysconfig/network << EOF
GATEWAY=XXX.XXX.XXX.XXX
EOF</pre>
<br />

Last thing is to restart the network for the changes to take effect.

Fedora:
<pre># systemctl restart network</pre>

CentOS:
<pre># service network restart</pre>
<br />

This way, you can have almost(4096) as many interfaces as you want with only two physical NICs. I also gave an example on how you tune Jumbo Frames to be active on some interfaces, and have regular window size on the rest.

When adding more networks, start by adding them in all of your Hosts before defining the new "Logical Network" in Engine, it´ll get cranky:)
<pre># cp /etc/sysconfig/network-scripts/ifcfg-bond0.1 /etc/sysconfig/network-scripts/ifcfg-bond0.3
# sed -i -e 's/DEVICE=bond0.1/DEVICE=bond0.3/' -e 's/BRIDGE=br0/BRIDGE=NFS/' /etc/sysconfig/network-scripts/ifcfg-bond0.3
# cp /etc/sysconfig/network-scripts/ifcfg-br0 /etc/sysconfig/network-scripts/ifcfg-NFS
# sed -i -e 's/DEVICE="br0"/DEVICE="NFS"/' -e 's/IPADDR=XXX.XXX.XXX.XXX/IPADDR=YYY.YYY.YYY.YYY/' /etc/sysconfig/network-scripts/ifcfg-NFS</pre>
<br />

No need to restart the entire network, just <code>ifup</code> the new interfaces:
<pre># ifup bond0.3
# ifup NFS</pre>
<br />

Oh, and <code>vdsmd</code> needs to be restarted to pick it up. You ''can'' do this while Host is up, but again, Engine will get cranky. More elegant is to put Host in maintenance before.

Fedora:
<pre># systemctl restart vdsmd</pre>

CentOS:
<pre># service vdsmd restart</pre>
<br />

'''Please note!''' Jumbo Frames must only be active on interfaces that aren´t routed, since the default routing size is 1500.
