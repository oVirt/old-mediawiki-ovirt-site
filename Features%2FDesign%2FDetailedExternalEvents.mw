{{autolang|base=yes}}

<!-- The actual name of your feature page should look something like: Features/YourFeatureName.  This keeps all features in the same namespace -->
= Adding External Events to Audit Log  =

== Summary ==
<!-- A sentence or two summarizing what this feature is and what it will do.  This information is used for the overall feature summary page for each release. -->
Currently all events audited in system are internal events. That means that all events are inserted to the Audit Log by the application. <br>
This document describes a requirement to enable injection of External Events to the system via API.<br>

== Owner ==
<!--This should link to your home wiki page so we know who you are-->
* Feature owner: [[User:emesika| Eli Mesika]]
:* GUI Component owner: [[User:emesika| Eli Mesika]]
:* REST Component owner: [[User:emesika| Eli Mesika]]
:* Engine Component owner: [[User:emesika| Eli Mesika]]
:* QA Owner: [[User:ykaul| Yaniv Kaul]] 

<!-- Include you email address that you can be reached should people want to contact you about helping with your feature, status is requested, or  technical issues need to be resolved-->
* Email: emesika@redhat.com

== Current status ==
* Target Release: 3.2
* Status: Design
* Last updated date: Nov 8 2012

== Detailed Description ==
<!-- Provide the details of the feature. What is it going to include. See the sections below. -->
<!-- New entities and changes in existing entities. -->
Enable plug-ins to inject their own events to the system using API<br>
This will be done by adding a new ''AddExternalEvent'' command and expose it to the REST API<br>
External events should be displayed in the Events tab in UI and may be searched as any other event.<br>
External Events are classified as application events based on severity values of NORMAL, WARNING ERROR or ALERT<br>
Alerts that are deleted from the system are only marked as deleted in the ''audit_log'' table and not removed permanently from the database<br>
External Events can not use application variables, therefore no '$' expressions should appear in the Event/Alert free message text<br>

== CRUD ==
Adding deleted boolean field to audit_log with a default value of ''false''<br>
Adding vendor varchar field to audit_log with a default value of ''oVirt'' [1]<br> 
Adding custom_event_id integer field to audit_log with a default value of ''-1'' [2]<br>
Adding event_flood_in_sec integer field to audit_log with a default value of ''30'' [3]<br>

[1] ''vendor'' is a unique string that identifies the vendor<br>
[2] ''custom_event_id'' is a sequential number that identifies the event/alert instance<br>
[3] ''event_flood_in_sec'' value will not affect application events<br>

Update relevant views to return the additional fields.<br>


=== DAO ===
Adding additional fields to AuditLog BE<br>
Handling additionalfields in AuditLogDAODbFacadeImpl<br>

=== Metadata ===
Modifying AuditLogDAOTest to include the added fields<br>
Adding additional fields to fixtures.xml

== Business Logic == 

Adding additional fields to ''AuditLog'' BE<br>

Adding the following types to AuditLogType
   EXTERNAL_EVENT_NORMAL  
   EXTERNAL_EVENT_WARNING 
   EXTERNAL_EVENT_ERROR   
   EXTERNAL_ALERT

Adding severities for the new types in AuditLogDirector<br>
Adding AddExternalEvent command<br>
Adding AddExternalEventParameters with the following fields
   AuditLogSeverity [Mandatory]
   Message [Mandatory]
   Vendor  [Mandatory]
   CustomEventId [Mandatory]
   EventFloodInSec[[Optional] -- 30 sec if not defined
   UserId [Optional]
   DataCenterId [Optional]
   StorageDomainId [Optional]
   ClusterId [Optional]
   HostId [Optional]
   VmId [Optional]
   TemplateId [Optional]
   GlusterVolumeId [Optional]

== Search Engine ==
Adding support for searching events by:<br>

  is_external
  deleted
  vendor
  custom_event_id

== Flow ==
''Add Event/Alert'' Flow: <br>
Invoke ''..api/events/add'' API giving at least AuditLogType, Severity, Vendor & CustomEventId <br>

''Delete Alert'' Flow: <br>
Invoke ..api/events/delete API giving at least AuditLogType, Severity, Vendor & CustomEventId 
Mark the relevant entry of the Alert in DB with ''deleted = true''<br>
Add a NORMAL event on the Alert deletion with all relevant details (user, time etc.)<br>

== Permissions ==

=== Command Permissions ===

A new permission to access this command will be added by default only to superuser role. (Admin can add it to other custom roles)<br>

=== Permissions on Entities ===

Inject with single entity - requires permission for this action on the relevant entity).<br>
Inject with multiple entities - need to check the permission for each entity.<br>
Inject with no entity - requires system level permission to inject.<br>
(this by default would only be in super user role.)

== API ==
<!-- describe changes in REST API and SDK -->
We will use the existing events URL (.../api/events) and the existing Event business-entity in the API and open the possibility to add (POST) a new event or delete an alert (engine will off course impose permissions check on this operation). <br>

1) Add REST-->Backend mapping in EventMapper (right now only the other direction exists).<br>
2) Add add() method declaration to EventsResource (this is the interface)<br>
3) Add add() method implementation to BackendEvenetsResource (take example of creation implementation in BackendHostsResource)<br>
4) Add delete() method declaration to EventsResource (forced for Alerts only in canDoAction)<br>
5) Add delete() method implementation to BackendEvenetsResource <br>
6) Add signatures to meta-data file (rsdl_metadata_v-3.1.yaml)<br>
7) Add tests<br>
''Note that no update is required.<br>''

== User Experience ==
<!-- Describe user experience related issues. For example: We need a wizard for ...., the behaviour is different in the UI because ....., etc. -->


Global External Events will be displayed on the Global Events TAB<br>
Entity instance External Events will be displayed on the Events TAB when selecting the Entity instance<br>

== Installation/Upgrade ==
<!-- Describe how the feature will effect new installation or existing one. -->
Add additional fields to audit_log table upon upgrade
=== User work-flows ===
<!-- Describe the high-level work-flows relevant to this feature. -->

== Enforcement ==


== Dependencies / Related Features and Projects ==
<!-- What other packages (RPMs) depend on this package?  Are there changes outside the developers' control on which completion of this feature depends?  -->
=== Affected oVirt projects ===

== Documentation / External references ==
<!-- Is there upstream documentation on this feature, or notes you have written yourself?  Link to that material here so other interested developers can get involved. Links to RFEs. -->

[https://bugzilla.redhat.com/show_bug.cgi?id=866123 RFE1]<br>
[https://bugzilla.redhat.com/show_bug.cgi?id=873223 RFE2]<br>

[[Features/ExternalEvents]]

== Open Issues ==
<!-- Issues that we haven't decided how to take care of yet. These are issues that we need to resolve and change this document accordingly. -->

=== Future directions ===
External Event types should be exposed to the engine-notification tool in future releases<br> 
Gathering Events/Alerts by the History ETL should be considered in future releases<br>


[[Category: Feature]]

=== Resetting an Alert ===
How an external ALERT disappears from the system after problem is resolved.<br>
Options:<br>

1) Support EXTERNAL_ALERT_ON EXTERNAL_ALERT_OFF<br>
2) Have a time period for each ALERT and clean the ALERT when this time is passed.
