<code>MockConfigRule</code> is JUnit <code>@Rule</code> that handles mocking of the Config class. 
This removes the need of PowerMoclomg <code>Config</code>, and considerably speeds up the test.

= Creating the Rule =
Like with any <code>@Rule</code>, the only thing you need to do in order to incorporate it in your test class is to declare a public member annotated with <code>@Rule</code>:

<pre>
@Rule
public static final MockConfigRule mcr = new MockConfigRule();
</pre>

= Mocking Different Config Values per Tets =
Now that you have the <code>MockConfigRule</code> defined, you can call the <code>mockConfig</code> method to mock a configuration value. E.g.:
<pre>
public void testSomethingRegardingLDAP() {
   mcr.mockConfig(ConfigValues.LDAPSecurityAuthentication, Config.DefaultConfigurationVersion, "SIMPLE");
   // rest of the test the relies on the LDAPSecurityAuthentication configuraion.
}
</pre>

Note that if you ommit the version parameter, <code>Config.DefaultConfigurationVersion</code> will be used by default:
<pre>
public void testSomethingRegardingLDAP() {
   mcr.mockConfig(ConfigValues.LDAPSecurityAuthentication, "SIMPLE");
   // rest of the test the relies on the LDAPSecurityAuthentication configuraion.
}
</pre>

= Mocking The Same Config Values for the Entire Test Suite =
The above appoarch is comfortable when each test requires a different configuration, but sometimes, you'd like you entire test-suite to use the same configurations. This can be done with a <code>@Before</code> annotation, but that would be  tedious and repetitive.
<code>MockConfigRule</code> provides an easier way to do this, in the <code>@Rule</code>'s construction tume, using the <code>mockConfig</code> static creator, e.g.:
<pre>
@Rule
public static final MockConfigRule mcr = new MockConfigRule(
                    mockConfig(ConfigValues.LDAPSecurityAuthentication, "SIMPLE"),
                    mockConfig(ConfigValues.SearchResultsLimit, 100),
                    mockConfig(ConfigValues.AuthenticationMethod, "LDAP"),
                    mockConfig(ConfigValues.DBEngine, "postgres")
            );
</pre>
[[Category:Unit Testing Utilities]]
