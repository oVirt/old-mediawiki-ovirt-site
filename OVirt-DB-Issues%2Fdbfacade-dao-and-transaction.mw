== What is the usage of DbFacadeLocator? ==
Create a datasource from the standalone.xml configuration<br>
Create the DbFacade instance and configure it<br>
Create a dialect<br>
Create a jdbcTemplate and associate it with the DbFacade instance<br>

== What is the usage of Db Facade? ==
Holds a map of all entity as a key and DAO implementation as a value.<br>
Used mainly to get a DAO object to work with<br>

== What is a dialect used for? ==
A dialect is used in order to handle in a generic way DB engine differences on multi DB engine applications<br>
We had used that in the past to handle both MS SQL & Postgres <br>
Example 
  A table T with columns c1 and c2 where c1 is the primary key
  Suppose that we have a getT(c1) function that returns a record that matches the key
  In Postgres function parameters can not have the same name as table columns so we will have to choose another name for c1 parameter.
  we can achieve that by defining the function as get(v_c1) and implementing getParamNamePrefix in the PostgresDbEngineDialect to add the "v_" prefix.

We will see that a dialect is also used in the search engine to identify and prevent SQL Injection

== How do we cache postgres catalog objects? ==
We had found that Postgres uses heavily its PG CATALOG objects and this affected performance in mid to large systems<br>
Solution was to cache those calls and use the cache when possible<br>
This is done by the SimpleJdbcCallsHandler

== Business Entities ==

=== How to create a new BE ? ===

Create BE tables as an upgrade script<br>
Create BE views in original create_views.sql file<br>
Create BE CRUD Stored Procedures file<br>
Create BE Class <br>
Create DAO interface and implementation for the BE , inherit GenericDAO, ReadDAO or ModificationDAO<br>
ADD DAO to DB Facade<br>
Create tests for all DAO implementation calls, inherit BaseGenericDaoTestCase/BaseReadDaoTestCase/BaseDaoTestCase<br>
Create test data for your BE in fixtures.xml file<br>
ADD DAO to engine-daos.properties<br>
ADD any Query and Query Parameter objects needed for accessing the BE data from clients and add them to VdcQueryType <br>
Run the upgrade script<br>
Run the BE tests and verify that your BE is working as expected<br>

=== How to Modify an existing BE ? ===
Most of BE modifications are adding a field to a BE (removing is very similar)<br>
Create BE tables changes as an upgrade script<br>
Modify BE views in original create_views.sql file to reflect the changes<br>
Modify BE CRUD Stored Procedures file to reflect the changes<br>
Modify the BE Class to reflect the changes<br>
Modify DAO interface and implementation for the BE<br>
Modify tests for all relevant DAO implementation calls<br>
Modify test data for your BE in fixtures.xml file<br>
Modify any Query objects/parameters needed for accessing the BE data from clients<br>
Run the upgrade script<br>
Run the BE tests and verify that your BE is working as expected<br>

== Queries ==

=== How to create a new query? ===
Add the function/SP in database that returns the requested data<br>
Test your function/SP from psql<br>
Add a method that access your new function/SP from the relevant DAO and DAO implementation class<br>
Add a test method in the DAO test class that access your new DAO method<br>
Create your Query class<br>
Create your Query parameters class<br>
Add your query type to the VdcQueryType enum<br>
Run the relevant DAO tests and verify that all tests are passed<br>
Implement UI/REST API calls to your query and test that it works<br>

== Commands ==

=== How to get data on command execution via DAOs ? ===

== Search Engine ==

=== A brief overview ===
=== What should I do if I have to change something? ===
[http://wiki.ovirt.org/wiki/Development/Introducing_Entity_Search step-by-step Guide]

=== SQL Injection prevention. ===


== Trouble Shooting  ==

=== Can not connect to the database. ===
Check that you postgresql service is up<br>
If you are using remote database, check Postgres configuration for listening to remote connections<br>
Check JBOSS standalone.xml and verify that user/database<br> and all relevant settings are OK<br>
Check the JBOSS server log for detailed error message.
Check the postgres error log for detailed error message.<br>

=== JBoss is crashing on start giving a SQL Error  ===
Check server log
Check engine log
Compensation & async tasks data
Check schema version

=== My database is deleted each time I run the tests.  ===
Verify that your database engine name is not engine<br>
When you run mvn with tests the fixtures.xml is used to create a engine database for each test, this will drop and create your engine database.<br>
You can rename your default database in JBOSS standalone.xml configuration file.
