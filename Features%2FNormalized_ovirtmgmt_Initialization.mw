== Normalized ovirtmgmt Initialization ==

=== Summary ===
Generate <tt>ovirtmgmt</tt> network based on DC definitions using <tt>setupNetworks</tt> and not during new host deployment.

=== Owner ===

* Name: [[User:Danken| Dan Kenigsberg]]

* Email: <danken@redhat.com>

=== Current status ===
* Not yet scheduled to a specific release
* Last updated: {{CURRENTMONTHNAME}} {{CURRENTDAY}}, {{CURRENTYEAR}}<!--This is markup for current date, do not change-->

=== Detailed Description ===
==== Current condition ====
The management network, named ovirtmgmt, is created during host
bootstrap. It consists of a bridge device, connected to the network
device that was used to communicate with Engine (nic, bonding or vlan).
It inherits its ip settings from the latter device.

==== Why Is the Management Network Needed? ====
Understandably, some may ask why do we need to have a management
network - why having a host with IPv4 configured on it is not enough.
The answer is twofold:
# In oVirt, a network is an abstraction of the resources required for connectivity of a host for a specific usage. This is true for the management network just as it is for VM network or a display network. The network entity is the key for adding/changing nics and IP address.
# In many occasions (such as small setups) the management network is used as a VM/display network as well.

==== Problems in current condition ====
According to alonbl of ovirt-host-deploy fame, and with no conflict to 
my own experience, creating the management network is the most fragile,
error-prone step of bootstrap.

Currently it always creates a bridged network (even if the DC requires a
non-bridged ovirtmgmt), it knows nothing about the defined MTU for
ovirtmgmt, it uses ping to guess on top of which device to build (and
thus requires Vdsm-to-Engine reverse connectivity), and is the sole
remaining user of the <tt>addNetwork</tt>/<tt>vdsm-store-net-conf</tt> scripts.

==== Suggested feature ====
Bootstrap would avoid creating a management network. Instead, after
bootstrapping a host, Engine would send a <tt>getVdsCaps</tt> probe to the
installed host, receiving a complete picture of the network
configuration on the host. Among this picture is the device that holds
the host's management IP address.

Engine would send <tt>setupNetwork</tt> command to generate <tt>ovirtmgmt</tt> with
details devised from this picture, and according to the DC definition of
ovirtmgmt.  For example, if Vdsm reports:

* vlan bond4.3000 has the host's IP, configured to use dhcp.
* bond4 is comprises eth2 and eth3
* ovirtmgmt is defined as a VM network with MTU 9000

then Engine sends the likes of:
  setupNetworks(ovirtmgmt: {bridged=True, vlan=3000, iface=bond4,
                bonding=bond4: {eth2,eth3}, MTU=9000)

A call to <tt>setSafeNetConfig</tt> would wrap the network configuration up.

Currently, the host undergoes a reboot as the last step of bootstrap.
This allows us to verify immediately if the host would be accessible
post-boot using its new network configuration. If we want to maintain
this, Engine would need to send a <tt>fenceNode</tt> request.

=== Benefit to oVirt ===
* Simplified bootstrapping
* Simplified <tt>ovirt-node</tt> registration (similar ovirtmgmt-generation logic lies there).
* Host installation ends with an ovirtmgmt network that matches DC definition (bridged-ness, mtu, vlan).
* vdsm-to-engine connectivity is not required.

=== Dependencies / Related Features ===
<!-- What other packages depend on this package?  Are there changes outside the developers' control on which completion of this feature depends?  In other words, completion of another feature owned by someone else and might cause you to not be able to finish on time or that you would need to coordinate? Other Features that might get affected by this feature? -->

==== Vdsm ====
Already reports all relevant network devices, as well lastClientIface (the interface used to receive the current client communication).
According to this information, <tt>Engine</tt> can deduce the structure of the management network <tt>ovirtmgmt</tt>.

==== ovirt-host-deploy ====
Already has <tt>VDSM/managementBridgeName </tt> environment variable defined. If missing, no management network would be created.

==== Engine ====
Most of the work lies here, where the output of <tt>getVdsCaps</tt> should be parsed, and a <tt>setupNetworks</tt> command should be transmitted after a new host is added to the data center.

# start host deployment with
#* ODEPLOY/forceReboot = False
#* VDSM/managementBridgeName undefined
# after <tt>otopi</tt> finishes, start to poll host with <tt>getVdsCaps</tt> or <tt>ping</tt>. If timeout expires, fail host deployment.
# installation ends here, by trying to activate the newly-added host.

When a host is activated Engine should
# call getVdsCaps
# check if management network <tt>ovirtmgmt</tt> configured on host
## if already defined, confirm network compliance and declare success.
## else acquire <tt>lastClientInterface</tt> and devise network definition for <tt>ovirtmgmt</tt>. Simon suggested that the Engine learns the vlan ID of <tt>ovirtmgmt</tt> from the first host added to the DC, but with no consensus about this, Engine would use its DB definition of network as configured on DC level. If <tt>lastClientInterface</tt> is none of host nic, bond or vlan, activation should fail. Activation fails also if it is a vlan with a mismatching vlan tag.
## send <tt>setupNetworks</tt> with the new management network definition with the  <tt>lastClientInterface</tt> only.
## on success, send <tt>setSafeNetConfig</tt>. On failure show an event to the user. the host would be left non-operational, and may need manual network configuration.
# if the user requested post-installation reboot, fence the newly-added host.

=== Documentation / External references ===

* mailing-list discussion about this feature: http://lists.ovirt.org/pipermail/arch/2012-December/001101.html

=== Comments and Discussion ===

* Refer to [[Talk:Normalized ovirtmgmt Initialization]]  <!-- This adds a link to the "discussion" tab associated with your page.  This provides the ability to have ongoing comments or conversation without bogging down the main feature page -->

[[Category:Feature]]
