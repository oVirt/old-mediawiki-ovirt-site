<!-- {{autolang|base=yes}} -->

= UI Plugins Crash Course: oVirt Space Shooter =

== Introduction ==
Welcome, space traveler! This tutorial will walk you through the basics of creating your first [[Features/UIPlugins|UI plugin]] for oVirt web administration application (WebAdmin).

The ''oVirt Space Shooter'' plugin we will create is based on [https://github.com/cykod/AlienInvasion Alien Invasion], sample HTML5 game developed by [https://github.com/cykod Pascal Rettig] and released under both GPL and MIT license. For those who are impatient, you can play the game [http://cykod.github.io/AlienInvasion/ here].

No prior [http://en.wikipedia.org/wiki/JavaScript JavaScript] programming experience is required, just make sure you have an oVirt Engine [http://www.ovirt.org/Installing_ovirt-engine_from_rpm up and running] on your system. Oh, and once we're done creating our plugin, be prepared to blast some aliens!

Download complete plugin: [[media:Space-shooter-ui-plugin-06062013.tar.gz|oVirt Space Shooter]] (6.6.2013)

== Level 1: I Can Has UI Plugin ==
Our journey starts in <code>/usr/share/ovirt-engine/ui-plugins</code> directory, home of plugin meta-data and other plugin resources. Let's go ahead and create [[Features/UIPlugins#Plugin_descriptor|descriptor]] for our plugin inside this directory:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter.json</code>
<pre>
{
        "name": "space-shooter",
        "url": "/webadmin/webadmin/plugin/space-shooter/start.html",
        "resourcePath": "space-shooter-resources"
}
</pre>


For those who are curious about the meaning of each attribute:
* <code>name</code> is the unique name of our plugin, think of it as plugin ID
* <code>url</code> points to [[Features/UIPlugins#Plugin_host_page|plugin host page]] which is basically an HTML page that bootstraps plugin code
* <code>resourcePath</code> tells Engine where to find plugin resource files, such as the plugin host page


Note that <code>url</code> generally follows <code>/webadmin/webadmin/plugin/<pluginName>/<relativePath></code> pattern so you can use this to fetch plugin resource files that reside under <code>resourcePath</code> directory. In other words, '''you don't have to run your own custom web server to serve plugin resource files''', Engine does this for you out-of-the-box.

Having the plugin descriptor in place, all that remains is plugin host page. Let's create <code>space-shooter-resources</code> sub-directory along with plugin host page inside this directory:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html</code>
<pre>
<!DOCTYPE html>
<html>
<head>
<script type='text/javascript'>

	// Obtain plugin-specific API object for interacting with plugin infrastructure
	var api = parent.pluginApi('space-shooter');

	// Register event handler functions that serve as callbacks on specific events
	api.register({
		UiInit: function() {
			alert('Woohoo!');
		}
	});

	// Tell plugin infrastructure that we are good to go, expect UiInit callback
	api.ready();

</script>

</head>
<body></body>
</html>
</pre>


And that's about it! '''It takes only two files to create a minimal UI plugin.'''
: ''Simple things should be simple, complex things should be possible.'' ([http://en.wikiquote.org/wiki/Alan_Kay Alan Kay])

Without even restarting Engine, reload WebAdmin in your browser, log in and embrace the awesome ''Woohoo!'' alert window.

As you can see, plugin host page is your typical HTML web page with some JavaScript to interact with plugin API. As you may have guessed, with JavaScript around, the sky is the limit - '''design and implement your plugin your way'''. Want to use popular JavaScript libraries like [http://jquery.com/ jQuery] or tools like [http://coffeescript.org/ CoffeeScript]? You can. Want to write your plugin using vanilla JavaScript? You can. Plugin API is designed to be simple and not to get in your way, regardless of how you choose to write your plugin.

Note that there's no HTML markup within the plugin host page and for a good reason - the purpose of this page is to bootstrap actual plugin code. WebAdmin evaluates plugin host page via invisible <code>iframe</code> element attached to HTML DOM, so '''any UI extensions should be done via plugin API'''.

== Level 2: Must Blast Some Aliens ==
Let's take the ''Alien Invasion'' game and integrate it into WebAdmin with our plugin. Sounds a bit more complicated than ''Woohoo!'' alert window, but is it really that complicated?

Download the game and put its files under <code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/game</code> directory. Since the game relies on specific HTML5 features that might not be available in older browsers, download and use [http://modernizr.com/ Modernizr] for detecting these features.


Plugin file structure should now look like this:
* /usr/share/ovirt-engine/ui-plugins/space-shooter.json
* /usr/share/ovirt-engine/ui-plugins/space-shooter-resources/game/...
* /usr/share/ovirt-engine/ui-plugins/space-shooter-resources/modernizr.custom.js
* /usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html


Let's open plugin host page and add some more JavaScript:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html</code>
<pre>
<!DOCTYPE html>
<html>
<head>
	<!-- Use Modernizr for detecting necessary HTML5 features like Canvas -->
	<script type='text/javascript' src='/webadmin/webadmin/plugin/space-shooter/modernizr.custom.js'></script>
</head>
<body>

<!-- Put plugin code in HTML body to ensure required scripts like Modernizr execute before the page gets rendered -->
<script type='text/javascript'>

	var api = parent.pluginApi('space-shooter');

	var openDialog = function() {
		// Show modal dialog with actual game content
		api.showDialog(
                        'Aliens are attacking', // Title
			'space-shooter-dialog', // Unique token
                        '/webadmin/webadmin/plugin/space-shooter/game/index.html', // Content URL
                        '340px', // Width
                        '560px' // Height
                );
	};

	var browserRocks = function() {
		// Detect necessary HTML5 features via Modernizr
		return Modernizr.canvas && Modernizr.canvastext;
	};

	api.register({
		UiInit: function() {
			if (browserRocks()) {
				openDialog();
			}
		}
	});

	api.ready();

</script>

</body>
</html>
</pre>


We moved plugin code to <code>body</code> due to Modernizr usage, but other than that, it's pretty much straight-forward. <code>UiInit</code> callback performs HTML5 feature detection and calls <code>openDialog</code> if successful. <code>api.showDialog</code> takes care of opening new modal dialog with content loaded from the given URL. Notice that the URL points to game's <code>index.html</code> under <code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/game/</code> directory.

Reload WebAdmin in your browser, log in and see what happens! Don't spend too much time playing the game, though. There's always more to learn.

[[File:OVirt_Space_Shooter_1.png]]

== Level 3: Data Center Under Attack ==
Opening new modal dialog upon login is just too easy. What if the aliens from outer space wanted to invade your precious Data Centers? Let's make this happen and move the battle from generic dialog into Data Center main tab in WebAdmin.


Here, we want to do following things:
* Allow opening game dialog only if the user selects a specific Data Center
* Since a shooter game might distract admins from doing their work, allow opening game dialog only via context-menu item
* Once opened, the dialog cannot be closed unless you win at least once
* Those who cannot beat the game (it can happen!) can use Cheat button<code>*</code>
<code>*</code> Cheating works in video games. In real life, cheaters always lose.


Implementing these improvements seems like a lot of work, but how much code does it really take?


First, we need to register some more event handler callbacks:
* <code>DataCenterSelectionChange</code> triggered when item selection changes in Data Center main tab
* <code>MessageReceived</code> triggered when custom content (game) sends us a message<code>*</code>
<code>*</code> To facilitate game â†’ plugin communication, we will use HTML5 [http://en.wikipedia.org/wiki/Web_Messaging postMessage] API.


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html</code>
<pre>
	api.options({
		// Configure source origin(s), i.e. protocol://domain:port, from which
		// message events will be accepted (by default, this option is empty)
		allowedMessageOrigins: ['http://127.0.0.1:8700']
	});

	var victory = false; // Has player won at least one game in the current game dialog?
	var dataCenter = null; // Data Center entity associated with the current game dialog
	var gameContentWindow = null; // Reference to game dialog content's Window object

	api.register({

		// Plugin init callback, ideal for one-time UI extensions
		UiInit: function() {
			if (browserRocks()) {
				init(); // Defined later on
			}
		},

		// Data Center main tab item selection callback, useful for keeping track
		// of currently selected Data Center entity in the corresponding main tab
		DataCenterSelectionChange: function() {
			if (arguments.length == 1) {
				// If there is single entity selected, remember it
				dataCenter = arguments[0];
			} else {
				// Otherwise, forget the entity
				dataCenter = null;
			}
		},

		// HTML5 message event callback, ideal for cross-window communication that
		// works across different origins, i.e. unconstrained by Same-Origin Policy
		MessageReceived: function(data, sourceWindow) {
			// If we get here, we already passed allowed source origin check
			switch (data) {
				// Game content HTML just loaded in the dialog
				case 'GameInit':
					gameContentWindow = sourceWindow;
					break;
				// User just won the game
				case 'GameWin':
					victory = true;
					break;
			}
		}

	});
</pre>


Since we want the game to notify our plugin upon specific occasions, we use <code>api.options</code> to configure source origin(s) from which HTML5 <code>message</code> events will be accepted. Above snippet uses http://127.0.0.1:8700 so we assume Engine runs on localhost and WebAdmin is available at port 8700 over HTTP protocol.


The <code>DataCenterSelectionChange</code> callback receives currently selected items (entities) as function <code>arguments</code>. Since we only care for single Data Center selected in the main tab, we check <code>arguments.length</code> and remember or forget current selection.


The <code>MessageReceived</code> callback is used to process two kinds of messages sent by the game:
* <code>GameInit</code> fired right after game HTML document gets loaded, right before the game initializes its [http://en.wikipedia.org/wiki/Canvas_element Canvas]
* <code>GameWin</code> fired right after user wins the game, i.e. beats all levels


We use <code>GameInit</code> to keep the reference to game content's <code>Window</code> object in order to call functions on this object later on. In other words, we establish '''two-way communication between game and plugin''', with game being the initiator of this communication.


Let's modify <code>game.js</code> under <code>game</code> directory to add the missing bits:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/game/game.js</code>
<pre>
...
var winGame = function() {
	Game.setBoard(3,new TitleScreen("You win!",  "Press fire to play again", playGame));
	parent.postMessage('GameWin', '*');
};
...
window.addEventListener("load", function() {
	parent.postMessage('GameInit', '*');
	Game.initialize("game",sprites,startGame);
});
...
</pre>


Since game content is shown via  <code>iframe</code> element attached to HTML DOM, <code>parent</code> refers to WebAdmin <code>Window</code> object.

Remember the missing <code>init</code> function used inside our <code>UiInit</code> callback? Let's add this function and complete our plugin:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html</code>
<pre>
	var dialogToken = 'space-shooter-dialog';
	var dialogUrl = '/webadmin/webadmin/plugin/space-shooter/game/index.html';

	var init = function() {
		// Add new action button to Data Center main tab
		api.addMainTabActionButton(
			'DataCenter', // To which main tab the button should be added to
			'Protect DataCenter from Alien Invasion', // Label
			// Callbacks and extra options for addMainTabActionButton function
			{
				isEnabled: function() {
					// Enable button only when selecting single Data Center
					return arguments.length == 1;
				},
				onClick: function() {
					// Reset victory flag and open new game dialog
					victory = false;
					openDialog();
				},
				location: 'OnlyFromContext' // Make button available only from context menu
			});
	};

	var openDialog = function() {
		// Show modal dialog with actual game content
		api.showDialog(dataCenter.name + ' under attack',
			dialogToken, dialogUrl, '340px', '560px',
			// Extra options for showDialog function
			{
				closeIconVisible: false, // Remove the close icon in top-right corner of the dialog
				closeOnEscKey: false, // Prevent closing the dialog when user hits Escape
				resizeEnabled: true, // Allow resizing the dialog with mouse, just in case
				buttons:
				[
					{
						label: 'Cheat',
						onClick: cheatGame
					},
					{
						label: 'Get me outta here',
						onClick: closeDialog
					}
				]
			});
	};

	var closeDialog = function() {
		if (victory) {
			api.closeDialog(dialogToken);
		} else {
			alert('Not so fast! Destroy the aliens at least once.');
		}
	};

	var cheatGame = function() {
		if (gameContentWindow != null) {
			// Invoke function on Window object representing game content
			gameContentWindow.winGame();
		}
	};
</pre>


Instead of showing new modal dialog with game content right away, the <code>init</code> function adds new ''action button'' to Data Center main tab via <code>api.addMainTabActionButton</code>. Think of action button as a button located in corresponding main tab's upper panel. For example, ''New'', ''Edit'' and ''Remove'' are all action buttons living inside Data Center main tab. Each action button usually gets reflected into context menu for given main tab, but there can be exceptions.

[[File:OVirt_Space_Shooter_2.png]]

In our case, we want the ''Protect DataCenter from Alien Invasion'' button to be visible only via context-menu item, so we customize <code>location</code> within <code>addMainTabActionButton</code> options. Each time item selection changes in Data Center main tab, <code>isEnabled</code> callback will be fired to determine whether the button should be enabled or disabled. In case the button is enabled, <code>onClick</code> callback will be fired when a user clicks the button. Note that both callbacks receive currently selected items (entities) as function <code>arguments</code>.

The <code>openDialog</code> function is pretty much straight-forward, we just pass some extra options to customize the dialog and add some buttons to it. On the other hand, <code>cheatGame</code> shows an interesting pattern - utilizing two-way communication between game and plugin by invoking function (<code>winGame</code>) on game content's <code>Window</code> object.

[[File:OVirt_Space_Shooter_3.png]]

== Secret Level: Making Things Configurable ==
Blasting through waves of aliens is nice, but what if someone accessed WebAdmin from a remote machine? Assuming WebAdmin would be exposed at https://engine-machine:8080, someone would need to modify <code>allowedMessageOrigins</code> inside plugin host page to ensure that communication between game and plugin works properly. Of course, we could still use <code>*</code> as the value for <code>allowedMessageOrigins</code> to accept <code>message</code> events from any origin, however doing this would open back door for malicious JavaScript to exploit our plugin.

To make things a bit more configurable, let's add new configuration option right into plugin descriptor:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter.json</code>
<pre>
{
	...
	// Default plugin-specific configuration, can be overridden via "config"
	// attribute in /etc/ovirt-engine/ui-plugins/space-shooter-config.json
	"config": {
		"allowedOrigins": ["http://127.0.0.1:8700"]
	}
	...
}
</pre>


The <code>config</code> attribute is completely optional and can be used to contain default (plugin-specific) configuration. '''Users shouldn't modify plugin descriptor directly''' - if you need to override default configuration, create [[Features/UIPlugins#Plugin_user_configuration_.28optional.29|plugin user configuration]] inside <code>/etc/ovirt-engine/ui-plugins</code> directory (using <code>-config</code> suffix):


<code>/etc/ovirt-engine/ui-plugins/space-shooter-config.json</code>
<pre>
	"config": {
		"allowedOrigins": ["http://127.0.0.1:8700", "https://engine-machine:8080"]
	}
</pre>


Each time our plugin gets loaded in WebAdmin, UI plugin infrastructure takes care of merging user configuration (if any) on top of default configuration (if any). In our case, <code>allowedOrigins</code> from user configuration would override <code>allowedOrigins</code> from default configuration.

Accessing plugin configuration at runtime is as easy as calling <code>api.configObject</code>:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html</code>
<pre>
	// Obtain plugin-specific config object containing merged (default + user) configuration
	var config = api.configObject();

	api.options({
		// Note: config.allowedOrigins is JSON array that maps directly to JavaScript array
		allowedMessageOrigins: config.allowedOrigins
	});
</pre>

== Level 4: Insert Coin And Keep The Score ==
Let's add one more feature to our plugin: the ability to track score (games won) per each Data Center via custom sub tab under Data Center main tab. Heroic deeds of admins blasting through waves of aliens shouldn't be forgotten, right?


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/start.html</code>
<pre>
	var subTabWindow = null; // Reference to custom sub tab content's Window object

	var subTabToken = 'space-shooter-dc-score';
	var subTabUrl = '/webadmin/webadmin/plugin/space-shooter/dc-score.html';

	var init = function() {
		// Add new action button to Data Center main tab
		api.addMainTabActionButton(...);

		// Add new sub tab under Data Center main tab
		api.addSubTab(
			'DataCenter', // To which main tab the sub tab should be added to
			'Space Shooter Score', // Label
			subTabToken, // Unique token
			subTabUrl // Content URL
		);
	};

	var getKey = function() {
		// Calculate unique key (string) for storing and retrieving game score for
		// given user + Data Center combination, i.e. admin@internal_dc123_DCScore
		return dataCenter != null ? api.loginUserName() + "_" + dataCenter.id + "_DCScore" : null;
	};

	var getScore = function() {
		// Return current score as string, or 0 if there is no score yet
		return localStorage.getItem(getKey()) || '0';
	};

	var incScore = function() {
		// Increment current score by 1, store the result as string
		localStorage.setItem(getKey(), (parseInt(getScore(), 10) + 1) + '');
	};

	var updateSubTab = function() {
		if (subTabWindow == null || dataCenter == null) {
			return;
		}

		// Get the current user score
		var score = getScore();
		var intScore = parseInt(score, 10);

		// Calculate rank based on user score
		var rank, rankColor;
		switch (true) {
			case (intScore >= 10):
				rank = 'Laser Master';
				rankColor = 'green';
				break;
			case (intScore >= 3):
				rank = 'Veteran';
				rankColor = 'orange';
				break;
			case (intScore >= 1):
				rank = 'Survivor';
				rankColor = 'red';
				break;
			default:
				rank = 'Newbie';
				rankColor = 'gray';
				break;
		}

		// Update the custom sub tab
		subTabWindow.update(dataCenter.name, score, rank, rankColor);
	};

	api.register({
		...
		MessageReceived: function(data, sourceWindow) {
			switch (data) {
				// Game content HTML just loaded in the dialog
				case 'GameInit':
					gameContentWindow = sourceWindow;
					break;
				// User just won the game
				case 'GameWin':
					victory = true;
					incScore();
					updateSubTab();
					break;
				// Custom sub tab asks for current user score
				case 'GetDataCenterScore':
					subTabWindow = sourceWindow;
					updateSubTab();
					break;
			}
		}
		...
	});
</pre>


Just like with game content, we use the same technique to establish two-way communication between custom sub tab and plugin.

To keep things simple, <code>getScore</code> and <code>incScore</code> functions utilize HTML5 [http://en.wikipedia.org/wiki/Web_storage#Local_and_session_storage Local Storage] to fetch and persist score locally in browser.


Finally, we need to add <code>dc-score.html</code> representing custom sub tab content:


<code>/usr/share/ovirt-engine/ui-plugins/space-shooter-resources/dc-score.html</code>
<pre>
<!DOCTYPE html>
<html>
<head></head>
<body>

<p>
Score for Data Center <span id='dataCenterName'>?</span>: <span id='score'>?</span> (<span id='rank'>?</span>)
</p>

<script type='text/javascript'>

	// Ask the plugin for current user score
	parent.postMessage('GetDataCenterScore', '*');

	// The plugin should call this function in response to GetDataCenterScore message
	function update(dataCenterName, score, rank, rankColor) {
		document.getElementById('dataCenterName').innerHTML = '<em>' + dataCenterName + '</em>';
		document.getElementById('score').innerHTML = '<b>' + score + '</b>';
		document.getElementById('rank').innerHTML = '<b>' + rank + '</b>';
		document.getElementById('rank').style.color = rankColor;
	};

</script>

</body>
</html>
</pre>


And we're done! Take a break from coding and play the game to see new score and ranking feature in action.

[[File:OVirt_Space_Shooter_4.png]]

== Mission Accomplished ==
Congratulations! You've made it past all the levels, you should have a pretty good understanding of UI plugins now.

See [[Features/UIPlugins|UI plugin feature page]] for detailed information on UI plugin infrastructure, plugin API reference and other information necessary to write plugins.

[[Category:Tutorial]]
