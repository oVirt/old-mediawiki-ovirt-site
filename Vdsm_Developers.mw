==Getting the source==
Our public git repo is located on [http://gerrit.ovirt.org/gitweb?p=vdsm.git oVirt.org]

you can clone it with
 git clone http://gerrit.ovirt.org/p/vdsm.git

==Building a Vdsm RPM==
Vdsm uses autoconf and automake as it's build system.

  Fedora users should verify the following packages are installed before attempting to build:
  yum install autoconf automake pyflakes logrotate gcc python-pep8 libvirt-python python-devel python-nose rpm-build sanlock-python

To configure the build env:
 ./autogen.sh --system

To create an RPM do:
 make rpm

or

 make NOSE_EXCLUDE=.* rpm  (As development only, avoid the unittests validation)

Vdsm automatically builds using the latest tagged version. If you want to explicitly define a version use
 make rpmversion=4.9 rpmrelease=999.funkyBranch

==Code Style==
* variables and arguments are in mixedCase
* class names are in CamelCase
* all indentation is made of space characters
* a space character follows any comma
* spaces surround operators, but
* no spaces between
 def f(arg=its_default_value)
* lines longer than 80 chars are frowned upon
* whitespace between functions and within stanza help to breath while reading code
* a space char follows a comment's hash char
* let logging method do the formatting for you:
 logging.debug('hello %s', 'world')
rather than
 logging.debug('hello %s' % 'world')

==Sending patches==
Send them to [http://gerrit.ovirt.org our gerrit server] ([[Working with oVirt Gerrit|see how]]). With your first major patch, do not forget to add yourself to the AUTHORS file. Do not be shy - it gives you a well-deserved recognition, and it shows to the team that you stand behind your code.

General development discussions are in <tt>vdsm-devel@lists.fedorahosted.org</tt>.

[[Category:Vdsm]]
[[Category:Documentation]]
[[Category:Development environment]]

== Creating local yum repo to test vdsm changes  ==

1) First you will need to generate the rpm with your changes, from the vdsm source directory:
 <nowiki>#vdsm> ./autogen.sh --system
#vdsm> make
#vdsm> make rpm</nowiki>

'''Note''': all rpm files will be generated at rpmbuild dir, usually: /home/your-user/rpmbuild/RPMS

2) Setting environment:
* Install required package
 <nowiki># yum install createrepo -y</nowiki>
* Enable httpd service
 <nowiki># chkconfig httpd on</nowiki>
or 
 <nowiki># ln -s '/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'</nowiki>
* Create the directory that will hold the rpm files (repo)
 <nowiki># mkdir /var/www/html/my-vdsm-changes</nowiki>
* Copy the vdsm packages to repo
 <nowiki># cp /home/your-user/rpmbuild/RPMS/noarch/* /var/www/html/my-vdsm-changes</nowiki>
 <nowiki># cp /home/your-user/rpmbuild/RPMS/x86_64/* /var/www/html/my-vdsm-changes</nowiki>
* Create the repo inside the yum.repos.d
 <nowiki># vi /etc/yum.repos.d/my-vdsm-changes.repo
[my-vdsm-changes]
name = my vdsm changes
baseurl = http://127.0.0.1/my-vdsm-changes
enabled = 1
gpgcheck = 0</nowiki>
* Execute createrepo tool
 <nowiki># createrepo /var/www/html/my-vdsm-changes</nowiki>
* Start httpd service
 <nowiki># service httpd start</nowiki>
* List all repos and see your new repo  
 <nowiki># yum repolist</nowiki>

'''Note''': SELinux might throw permission denied to repo located at /var/www/html/

== Using VM console == 
If you want to use the console for a VM using the Spice protocol (VNC is not supported right now)
Run the following command on the host running ovirt-engine:

<pre># psql -U postgres engine -c "update vdc_options set option_value = 'false' 
where option_name = 'UseSecureConnectionWithServers';"</pre>

== Fake KVM Support ==

As developer you might need to add many hosts into your environment for tests. VDSM provides a functionality called 'fake_kvm_support' for '''VDSM quality assurance/developers''' emulate a real host/kvm hardware without running real guests.

* 1) Create a guest as Fedora 17 (Tested on Fedora 17 but should work in higher versions as well)

* 2) Install required packages
 <nowiki># yum install vdsm vdsm-hook-faqemu -y </nowiki>

* 3) Change vdsm config file to enable this feature
 <nowiki># vi /etc/vdsm/vdsm.conf 
 [vars]

 fake_kvm_support = true  </nowiki>

* 4) Restart the vdsmd daemon
 <nowiki># systemctl restart vdsmd.service </nowiki>

* 5) Open the oVirt Engine portal and add the new 'Fake' Host 
  Login with your admin user -> Hosts -> New 

* 6) The host should be UP

===Troubleshooting Fake KVM Support===

'''Failed: Server does not support virtualization'''

If during the installation of the host you received the message "Server does not support virtualization" from oVirt Engine, it's probably because your vdsm version doesn't include the patch: http://gerrit.ovirt.org/#/c/5611/3 (might be a bug as well).<br> This patch add the 'fake kvm' support to vds_bootstrap.

There are several ways to update your vds_bootstrap, for example: 

* Yum update in '''oVirt Engine''' machine (if the repo is not updated, use the others approaches)
  <nowiki># yum update vdsm-bootstrap </nowiki>

* Clone vdsm tree and create an updated vdsm-bootstrap rpm and update the '''oVirt Engine''' system

  <nowiki> # git clone git://gerrit.ovirt.org/vdsm
  # cd vdsm
  (if required increase the Version/Release from vdsm.spec.in)
  # ./autogen.sh --system && make && make rpm
  # rpm -Uvh ~/rpmbuild/RPMS/noarch/vdsm-bootstrap* </nowiki>

* Clone the vdsm tree, execute autogen/make and copy the vds_bootstrap/vds_bootstrap.py to /usr/share/vds_bootstrap 

  <nowiki> # git clone git://gerrit.ovirt.org/vdsm
  # cd vdsm
  # ./autogen.sh --system && make
  # cp vds_bootstrap/vds_bootstrap.py /usr/share/vds_bootstrap </nowiki>
            
* Manually backport the above patch to your current vds_bootstrap (/usr/share/vds_bootstrap)

  <nowiki> # vi /usr/share/vds_bootstrap/vds_bootstrap.py
  Make the changes manually</nowiki>

'''Non Responsive status'''
* Check if vdsm and libvirt daemons are running
* Firewall?

'''Default networks, the following networks are missing on host 'ovirtmgmt' '''

Something goes wrong setting the bridge ovirtmgmt, check the logs (/tmp/vds*.log) in the host side.<br>
If required, use the manual process to create the bridge and re-add the host: http://www.ovirt.org/wiki/Installing_VDSM_from_rpm#Configuring_the_bridge_Interface
