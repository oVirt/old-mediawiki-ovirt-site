== Authentication, Authorization and Accounting at oVirt (3.5) ==

=== Summary ===
Introducing a new architecture to AAA.


=== Owner ===
* Name: [[User:Yair Zaslavsky|Yair Zaslavsky]]
* Email: <yzaslavs@redhat.com>
* Name: [[User:alonbl|Alon Bar Lev]]
* Email: <alonbl@redhat.com>

=== Current status ===
* Target Release: 3.5
* Status: work in progress
* Last updated: {{CURRENTMONTHNAME}} {{CURRENTDAY}}, {{CURRENTYEAR}}

=== Main Benefit to oVirt ===
* Clear separation of authentication from authorization.
* Providing a developer API to develop custom extensions for authentication and authorization
** Introducing of other authentication mechanisms - it will be possible to authenticate not using kerberos
** Introducing non ldap providers for directories - for example, a JDBC provider can ease the definition of internal users 
** Usage of configuration files and not the database for configuration of providers
** Introduction of profiles will allow to associate different authentication mechanims with the same auhotization (directory) mechanism

=== Detailed Description ===
Currently the authentication and authorization mechanisms in engine are:
* a. based on DB configuration (entries at vdc_options table).
* b. We have only internal mechanism based on single user defined in db, and a Kerberos/Ldap mechanaism.
* c. Tighltly coupled in BLL code

In order to change that we suggest to provide a mechanism that is based on the following:

==== Extensions ====
Extensions are software plugins that conform to the extensions API.<BR>
Each extension has a configuration file.<BR>
When engine starts it scans filesystem directories defined by the entry of ENGINE_EXTENSION_PATH<BR>
at the configuration file ovirt-engine.conf<BR><BR>

For example:
<BR>
ovirt-engine.conf:ENGINE_EXTENSION_PATH="${ENGINE_USR}/extensions.d:${ENGINE_ETC}/extensions.d"

Each configuration file will contain the following entries: 
<BR>
# ovirt.engine.extension.name - the name of the extension
# ovirt.engine.extension.class - the class implementing the extension
# ovirt.engine.extension.module - jboss module name containing the extension
# ovirt.engine.extension.enabled - whether the extension is enabled or not
# ovirt.engine.extension.sensitiveKeys - list of sensitive keys not to be logged.
# ovirt.engine.extension.provides - type of service that the extension provides (For example, in case of AAA - org.ovirt.engine.authentication, or org.ovirt.engine.authorization)
<BR>
In addition, specific entries per extension may be included.
For authenticators (extensions dealing with authentication) the following keys also must be presented -
<BR>
ovirt.engine.aaa.authn.profile.name - A profile is a combination of authentication and authorization(directory) extensions
ovirt.engine.aaa.authn.authz.plugin - Name of the authorization extension to which the authentication is associated with.

A developer of the extensions should work with the API and pack the extensions developed as a Jboss module.

==== Flows ====

* Engine starts
# Once engine starts, the directories containing configuration files are scanned, the extensions are created, and profiles are created for matching authentication and authorization extensions (bare in mind that each authorization extension may be associated with more than one authentication extension).
# All profiles are kept in a profiles repository.
<BR><BR>
* Login
# GetDomainsListQuery presents the user the list of the profiles to select the profile to login with.
# The selected profile name is passed as parameter to the Login command.
# The proper profile is obtained from the profiles repository.
# It is checked that the authentication extension supports credentials based login - if it does,  the login is carried out using the authentication extension.
# The login returns an authentication record.
# The record is used by the authorization extension in order to fetch a principal.
#  If the principal is fetched, the ID of the principal record is used in order to retrieved the associated DB record (if does not exists - a new record is inserted to the users table).
# The ID of the DB record is used in order to perform the MLA check.
<BR><BR>
* Logout
# The authentication extension is retrieved based on the command parameters.
# If the authentication extension supports logout, logout is carried by the extension.
<BR><BR>
*Search
# The search string generated by the UI (or REST-API) is being translated to an authorization query structure.
# The authorization extension invokes a query open command which returns an opaque object to be used with the query
# The authorization extension invokes a query execution command as long as there are results returned
# The results are mapped to the entities recognized by BLL layer (DirectoryUser and DirectoryGroup).
# The query is closed by the extension once there are no more results.
Please notice this is not  a recursive search - for principals (users) only the principal records are returned, without the groups that the principal is a member of.
<BR><BR>
*Sync
Sync (AKA DbUserCacheManager)  is configured to run once in an hour (configurable by changing the config option of 'UserRefreshRate') <BR>
# All users fetched from the database and are classified according to their authorization plugin.
# For each authorization plugin, a search query structure that is based on the IDs of the relevant users is being constructed and invoked using the authorization extension, similar to the search flow. The search query is recursive - for each principal (user) the groups it is a member of are also being collected. 
# For each returned principal it is checked if its data matches the data of the corresponding user obtained from the database - if there is a change, the principal is added to a list of principcals to update the database.

==== UI ====

The getDomainsList query that populates the "domains" in the login screen now receives a list of profiles.

==== REST-API ====

The following changes are introcued:

For a domain user - the ID is now a hex representation of the ID of the user within the directory (as the directory may be a non LDAP now, it may not always be GUID).
The domain users can be retrieved from /api/domains/<DOMAIN_IDENTIFIER>/users

When a domain user is being added to the DB , by sending a POST reques to /api/users ,
Based on the user name and the domain provided, a query is run against the directory, and the user is retrieved from it, and added to the DB.
When observing users in the DB, by issuing GET /api/users , the ID of the user in the directory is represented by
<domain_entry_id><HEX_VALUE></domain_entry_id>

All of the above is correct for domain groups as well, with the relevant changes to URLs.

=== Backend and extensions work ===
* Changing existing (built-in) extensions to support the Extensions API
** The current LdapKerberos Authenticator/Directory code, and the Internal Authenticator/Code should be aligned with the new API.
** A separate jboss module containing the existing code (builtin.jar) is being introduced.
** A clear separation between bll code that is not involved directly with authentication and authorization has been done.
** The built in extensions are being initialized from the InitOnStartup bean (in order not to include configuration files for them).
** All relevant code to search was changed to support passing a flag to enabled/disable recursive search for groups.
** BLL code was changed to conform to new extensions API.

* Introducing a generic LDAP provider
** A generic LDAP provider conforming to the new API is being developed.
*** The code of the generic LDAP provider will be based on JNDI java SDK (not on spring ldap)
*** For each ldap provider (OpenLdap, ActiveDirectory, RHDS, IPA) there will be a a "template" file which will contain information such as query/search mapping and mapping of
attributes to users/groups

=== Tools ===
* engine-manage-domains
engine-manage-domains will be kept to support the "built-in" (AKA "legacy") providers.

* ovirt-engine-role
This tool will be used in order to assign role to an entry of a user from an authorization provider (AKA directory).
In order to run the tool, the user of the tool will have to provide the following parameters:
#  user name
# provider
# id of user within the provider
# role (for example  "SuperUser")

The tool will create the user in the database and allocate a system permissions based on the role and the user .

=== Open Issues ===
* Introduction of accounting
** Add relevant calls at BLL to the accounting API (Login, logout, session expiration)
* Format for generic ldap configuraton
** To be determined soon
* Format of generic ldap template file.
** To be determined soon, the queries will look similar to the ones at org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryMetadataFactoryImpl

=== Testing ===
* Verify that after upgrade from 3.4 no regressions are introduced: It is possible to query users,groups in the already added domains, the permissions mechanism is working as expected
(users can perform same operations as they did in 3.4), it is possible to add new users/groups from the already added domains.
* Manage-domains utility should still work and be able to add new domains.
* Add the generic ldap provider , restart engine, have the ability to query for users/groups from the generic provider , add them to the system, assign them permissions , etc...

=== Comments and Discussion ===

=== Future Work ===
