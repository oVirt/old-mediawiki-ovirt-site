<big><font color="lightgray" style="background-color: darkred">ATTENTION: This page is obsoleted for >=ovirt-engine-3.3 by [[OVirt_Engine_Development_Environment|oVirt Engine Development Environment]]</font></big>

== Introduction ==
This page contains some notes regarding oVirt engine build system.

Please visit [[Building_oVirt_engine]] for basic step by step instructions how to build oVirt engine.


== Local Settings ==
Maven supports local settings by creating a local <code>settings.xml</code> file that should be placed inside your <code>$HOME/.m2</code> directory.

You can find instructions how to create a basic <code>settings.xml</code> file in Building oVirt Engine in the [[Building_oVirt_engine#Maven_personal_settings|Maven Personal Settings]] section.

== GWT Compilation Configuration ==
oVirt engine UI is based on GWT technology,
Below are instructions how to tweak GWT compiler in order to speed up the development cycle.


=== Compiling GWT for specific browser(s) ===
GWT compiler generates an application instance per supported browsers per locale,
Since compiling to web mode takes a long time it is possible during development to compile to a specific browser (e.g Firefox) to speed up the compilation of WebAdmin web module,

This can be done by overriding the <code>gwt.userAgent</code> property. We recommend setting the <code>gwt.userAgent</code> property within the <code>gwtdev</code> profile. Edit <code>$HOME/.m2/settings.xml</code> file and add the following lines:

<pre>
<profiles>
  <profile>
    <id>gwtdev</id>
    <properties>
      <gwt.userAgent>gecko1_8</gwt.userAgent>
    </properties> 
  </profile>
</profiles>
</pre>

* Build oVirt Engine and enable the <code>gwtdev</code> profile:

<pre>
$ mvn install -Pdep,gwtdev,gwt-admin
</pre>

This will instruct GWT to generate 1 permutation for Firefox browser only. If you need to build for other browsers you can use the following values inside the <code>gwt.userAgent</code> property:

* For Firefox: <code>gecko1_8</code>
* For Internet Explorer 6: <code>ie6</code>
* For Internet Explorer 8: <code>ie8</code>
* For Internet Explorer 9: <code>ie9</code>
* For Safari and Chrome: <code>safari</code>
* For Opera: <code>opera</code>

For example, if you want to build for both Firefox and Chrome you can use the following:

<pre>
<profiles>
  <profile>
    <id>gwtdev</id>
    <properties>
      <gwt.userAgent>gecko1_8,safari</gwt.userAgent>
    </properties> 
  </profile>
</profiles>
</pre>

Alternatively, if you don't want to modify your <code>$HOME/.m2/settings.xml</code> file, you can set the property in the command line. For example to build WebAdmin for Firefox and Chrome you can use the following command:

<pre>
$ mvn install -Dgwt.userAgent=gecko1_8,safari -Pgwt-admin
</pre>

== Testing DAOs  ==
By default, the DAO tests are not run during <code>mvn install</code>, since they require an actual PostgreSQL database to run on.
In order to run them, you should follow these instructions.

First, you must create a database to use for the tests. This database's credentials are defined in <code>$OVIRT_GIT/backend/manager/modules/dal/src/test/filters/pgsql.properties</code>. By default the tests are run on a database called <code>engine_test</code> by the <code>postgres</code> user (you can, of course, change these details in your own environment.
To create this database, perform the following:
<pre>
$ cd $OVIRT_GIT/backend/manager/dbscripts
$ ./create_db_devel.sh -d engine_test -u postgres
</pre>

In order to run the tests, you will have to enable the <code>enable-dao-tests</code> profile:
<pre>
$ cd $OVIRT_GIT/backend/manager/modules/dal
$ mvn install -Penable-dao-tests
</pre>

Note: you may use the <code>enable-dao-tests</code> profile on higher levels than the <code>dal</code> module, such as when building the engine's root.

== Skipping Unit Tests ==
It is possible during development to speed up the build process by skipping the execution of unit tests,
This can be done by adding the <code>-DskipTests</code> to your build command:

<pre>
$ mvn install -DskipTests
</pre>

== Log Configuration ==
Engine logging is done with log4j.<BR>
the configuration is done with jboss-log4j.xml file which can be found under <jboos profile dir>/conf/<BR>
this file contains categories for main components, and log level can be changed there.<BR>
also 3rd parties components are configured in this file (like apache http client).<BR>
it is also possible to add appenders which allow logging some components to different files.<BR>
(this is useful when logging debug messages of component that may create a lot of 'noise' in the regular log).

[[Category:Draft documentation]]
[[Category:Engine]]
[[Category:How to]]
