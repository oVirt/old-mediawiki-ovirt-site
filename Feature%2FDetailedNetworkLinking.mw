<!-- {{autolang|base=yes}} -->

<!-- The actual name of your feature page should look something like: "Your feature name". Use natural language to name the pages. -->

== Network Wiring ==

=== Summary ===
The network wiring feature is an enhancement for the VM Network Interface management.
It supports the following actions without unplugging the Vnic, maintaining the address of the Vnic:
:* Dynamically changing the network of a running VM (without unplugging the Vnic) <br>
:* Unwiring a network of a VM without unplugging the vnic <br>
[http://ovirt.org/wiki/Feature/NetworkWiring Network Wiring Feature Page]

=== Owner ===
* Name: [[User:alkaplan| Alona Kaplan]]
* Email: <alkaplan@redhat.com>

=== Current status ===
* On Design
* Last update date: 11/11/2012

=== Detailed Description ===

==== Rest API ====
 Enum LinkState{
  up,
  down
 }

* The user will enter link_state as a string ("up"/"down").
* The link_state string will be translated to LinkState Enum before sending the entity to the backend.

==== Engine API ====
 VmNetworkInterface:
   LinkState linkState;

 Enum LinkState{
  up,
  down
 }

==== Database Changes ====

<span style="color:Teal">'''VM_INTERFACE'''</span><BR>
{|class="wikitable"
!border="1"| Column Name ||Column Type ||Null? / Default ||Definition 
|-
|link_state || boolean ||not null ||Indicates wether the vnic's link state is "up" or "down"
|-
|}

<span style="color:Teal">'''VM_INTERFACE_VIEW'''</span><BR>
{|class="wikitable"
!border="1"| Column Name ||Column Type ||Definition 
|-
|link_state || boolean ||Indicates wether the vnic's link state is "up" or "down"
|-
|}

==== Engine Flows ====

===== Add Vnic =====
* canDoAction- allow 'null' network just for 3.2 or upper cluster compatibility version.
* 'linkState' property of VmNetworkInterface should be stored in the DB
 VmNetworkInterfaceDAODbFacadeImpl- save
* The 'linkState' property is sent to the VDSM by ActivateDeactivateVmNicCommand command (for running VMs with the nic set to plugged)

===== Update Vnic =====
*'''shouldn't''' throw canDo when trying to update a nic when the vm is running and the nic is plugged.
* canDoAction- allow 'null' network.
* 'linkState' property of VmNetworkInterface should also be stored in the DB
 VmNetworkInterfaceDAODbFacadeImpl- update
* If the vm is up
:* plugged --> unplugged ('plugged' property was changed to false)
:** Unplug should be sent to the VDSM
:* unplugged --> plugged
:** Plug should be sent to the VDSM
:* plugged --> plugged
:** If MAC Address or Driver Type were update
:*** Unplug followed by Plug should be sent to VDSM.
:** Otherwise, if network is changed or disconnected
:*** If cluster c. version is 3.2 or upper updateDevice should be sent to the VDSM.
:*** Otherwise, throw canDoAction
:* unplugged --> unplugged
:** nothing should be sent to VDSM

===== Remove Vnic =====
* no change (can be done only if the VM is down or the Vnic is unplugged)

===== Run VM =====
* When running a VM, the VM's Vnics' 'linkState' property should also be passed to the VDSM, for 3.2 cluster and above.
 VmInfoBuilder.addNetworkInterfaceProperties

===== Plug nic =====
* no change.

===== Unplug nic =====
* no change.

===== Error codes =====
Add translation to VDSM error codes:
UPDATE_VNIC_FAILED = 'Failed to update VM Network Interface.'

==== VDSM API ====

===== New API =====
A new API is added for this feature.

<pre>
updateVmDevice (vmId, params)
</pre>

<pre>
params = {
        'type': 'interface',
        'network': 'network name',                      <--- bridge name
        'linkState': 'up/down',
        'alias': <string>,      
        'promisc': <blue,red>,                          <--- promisc mirror mode, the interface will mirror all red and blue bridge traffic
 }
</pre>

Vdsm would implement this using http://libvirt.org/html/libvirt-libvirt.html#virDomainUpdateDeviceFlags .

If the vnic doesn't have a network, the network will be omitted from the params sent to the vdsm.

===== Updated APIs =====
* '''hotplugNic''' - the vdsm should connect the Vnic's Network according to the 'linkState' property passed on the Vnic. <BR>
* '''createVm''' - the vdsm should connect each of the Vm's Vnics according to the 'linkState' property passed on the each Vnic. <BR>

In both cases, 'linkState' property would be implemented by setting libvirt's <link state> element http://libvirt.org/formatdomain.html#elementLink .
New vdsm errors will be added: 
<pre>
UPDATE_VNIC_FAILED- code 51
</pre>

==== Events ====
<!-- What events should be reported when using this feature. -->

==== Open Issues ====
# Should we deprecate the invocation of ActivateDeactivateVmNic command by the clients as we managed it by UpdateVmNetworkInterface command ?
# Should ActivateDeactivateVmNic be renamed to PlugUnplug ?

=== Documentation / External references ===
<!-- Is there upstream documentation on this feature, or notes you have written yourself?  Link to that material here so other interested developers can get involved. Links to RFEs. -->

=== Stretch Goals ===
* Enable hot changes in port mirroring (without plugging and unplugging)

=== Comments and Discussion ===
<!-- Add a link to the "discussion" tab associated with your page.  This provides the ability to have ongoing comments or conversation without bogging down the main feature page -->

=== Comment ===
<!-- Issues that we haven't decided how to take care of yet. These are issues that we need to resolve and change this document accordingly. -->
* After the VM is connected to a new network, no one on that network is aware of the change. It was suggested, that much like in vm migration, the VM should emit a gratuitous arp packet, to notify the world about its existence. However note that in vm migration, the vm does not change its layer-2 subnet and telling the switch of its new location is all that is needed. This is NOT the case when the VM is connected to a different network, with its own vlan and ip limitations. One cannot assume that a guest server application would continue to operate uninterrupted.

[[Category:Template]]
[[Category:Feature]]
