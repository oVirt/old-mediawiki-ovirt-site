= Definitions =

== Network ==
<!-- A network is a logical entity that represents a profile of network related properties.
--Roles can be assigned to a network. A network role stands for a network usage: management, migration,storage, Vm network, display.
-->

= The big picture =

{| class="wikitable"
! Area
! Action
! Internal impl.
! Quantum API
! Notes
|-
|rowspan="3"| Logical network
| Create network
| AddNetwork
| http://wiki.openstack.org/Quantum/APIv2-specification#Create_Network
| Quantum API accept network name returns id, needs to be persisted in the engine
|-
| Update network
| UpdateNetwork
| http://wiki.openstack.org/Quantum/APIv2-specificationv#Update_Network
| Quantum API updates network name, admin. state and sharing status
|-
| Delete network
| RemoveNetwork
| http://wiki.openstack.org/Quantum/APIv2-specification#Delete_Network
|
|-
|rowspan="3"| Attachment of network to cluster
| Attach to cluster
| AttachNetworkToVdsGroup
| ?
|
|-
| Update attachment
| UpdateNetworkOnCluster
| ?
|
|-
| Detach from cluster
| DetachNetworkToVdsGroup
| ?
|
|-
|rowspan="2"| Apply networking on host
| Apply network
| SetupNetworks<br>
<br>
Deprecated:<br>
UpdateNetworkToVdsInterface<br>
AttachNetworkToVdsInterface<br>
DetachNetworkFromVdsInterface<br>
AddBond<br>
RemoveBond
| http://wiki.openstack.org/ConfigureOpenvswitch
| This is specific to OVS plugin, need to figure out for other plugin types.
|-
| Commit changes on host
| CommitNetworkChanges
| ?
| Perhaps same rollback mechanism used today can be used for plugin configuration as well?
|-
|rowspan="3"| vNICs on VM Templates
| Create vNIC on Template
| AddVmTemplateInterface
|
|
|-
| Update vNIC on Template
| UpdateVmTemplateInterface
|
|
|-
| Delete vNIC on Template
| RemoveVmTemplateInterface
|
|
|-
|rowspan="5"| vNICs on VMs
| Create vNIC on VM
| AddVmInterface
|
|
|-
| Update vNIC on VM
| UpdateVmInterface
|
|
|-
| Delete vNIC on VM
| RemoveVmInterface
|
|
|-
| Activate vNIC on running VM
| RunVm<br>
HotPlugUnplugVmNic
| http://wiki.openstack.org/Quantum/APIv2-specification#Create_Port
|
|-
| Deactivate vNIC on running VM
| StopVm (on callback)<br>
HotPlugUnplugVmNic
| http://wiki.openstack.org/Quantum/APIv2-specification#Delete_Port
|
|}


= What Quantum has to offer =

* VM-network centric.
* Connectivity to a variety of networking (L2) solutions (bridge, OVS, UCS, etc).
* IPAM (IP Address Mmanagement, L3) for vNICs.

= How can this be integrated into oVirt =

* Need to have proprietary L2 network implementations live side by side with Quantum plugin.

* In engine, there should be a designation of network type, either 'oVirt internal' style, or 'Quantum: OVS' (or drop the quantum?)

** It should be possbile to mix & match ovirt internal network with others, but not sure the others can be mixed.

** Some functionality, such as bond management, will have to remain in oVirt network management since it is not part of quantum API.

* Quantum will be installed on the oVirt-engine host machine.

* Plugin needs to be installed (either part of bootstrap or part of VDSM command) on the Hosts.

* VDSM would need to support configuration of the quantum plugin on the Hosts,

* VDSM would need to support sending port data to libvirt on run VM/hot-plug vNIC.



* We can utilize Quantum's IPAM for vNICs:

** Should we define a "subnet" entity to be under a logical network, which corresponds to Quantum's "subnet" entity?



== Integrating UCSM into oVirt ==

<!--
=== Network Provider entity ===

This entity represents a network provider, and will exist (currently) on a system-wide level (is this wise?),

The "Built-In" provider can be created by default to indicate the network is provided by whatever technology is used (Linux Bridge, OVS, etc).

The new Network Provider entity should have these properties: 
* Type (Built-in, UCSM, etc)
* For UCSM:
** Management IP
** User
** Password

If the provider is Quantum based, then the definitions provided within should be provisioned to the quantum plugin as part of the provider creation process.

Note: The Quantum Cisco plugin seems to support multiple UCSMs, but it's not obvious how this would work so to KISS we should support only one UCSM for now if using quantum.


=== Network entity ===
Network entity should have additional properties added: 
* Network provider

The network should be created on Quantum as part of the "create network" operation in case a quantum provider was chosen. 

Alternatively, we would create the port profile on UCSM directly & configure the VLAN for it.

It is possible that we would need to get the port profile name from Quantum to use in several scenarios, i.e. when determining which networks are available on a host. 

In this case, we would need to get this info from Quantum after the network has been created there. Quantum should have this API available.

Question: How would we allow to configure the network on more than one UCSM?

Answer: It is possible to have the network linked to several UCSMs, in this case the port profile of the network should be created on each one.

Question: How would UCSM support MTU?

Answer: It is possible to set at the UCSM level, for the entire fabric, at the "QoS System Class"es.

Question: Does Quantum support setting VLAN ID?

Answer: Doesn't seem to do that, just use the fixed IP in the plugin conf.

Question: Does this mean the network now has a state (Locked, OK, etc)?


=== Network to Cluster attachment ===
The network can then be attached to a cluster as any other network would. No change is necessary at this level.


=== Host provisioning ===
A host that has the Palo Adapter (M81KR) installed will reveal itself as part of the vdsCaps.

Info that need to be supplied as part of the adapter info: 
* Which or How many virtual NICs are available (perhaps we can also calculate this from regular nics list)
** Which vNICs are static vs. dynamic?
* Which networks (or port profiles) are available (?)

The Palo adapter will appear as a "NIC" of the host in the setup networks dailog, this will allow to attach VM networks to it as part of Setup Networks.
* Identified by vendor id 0x1137 device id 0x0023

We should verify that the Palo adapter indeed has this network defined, or fail the operation.

The dynamic virtual NICs exposed by the Palo adapter should NOT be assignable in setup networks.
* Identified by vendor id 0x1137 device id 0x0044

The static virtual NICs exposed by the Palo adapter should appear as "regular" NICs which allow "non-vm" networks attached to them.

This allows the "Logical Network" to be implemented one way on one host, and another way on another, depending on how it is set-up.

Even if the host has the network available on the Palo adapter, the user might implement it using another technology.

Note: A host that is moved from one cluster to the other won't necessarily fail the network checks, but will have to be se-synched in order to provision the network correctly.


=== VM Network relation ===

If the network is optional (& not Build-in?) then the schedueling algorithm should ignore it when picking a host to run the VM on (or migrate the VM to).

Scheduieling should, however, make sure that the selected host has a free dynamic vNIC.


=== Example ===

In the DC we have "prod" & "staging" clusters, and a "red" network.

On the "prod" cluster, we use 'Interconnect' switches + UCSM to manage the network traffic.

On the "staging" cluster, we use regular 'Linux Bridge' to manage the network traffic.

-->
