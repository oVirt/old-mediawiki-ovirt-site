== How to debug Frontend applications ==
This document contains instructions and tips for debugging oVirt Frontend web applications. Although it focuses on debugging applications in Eclipse IDE, it should be easy to adapt within your own development environment.

oVirt Frontend comprises following web applications:
* WebAdmin: <code>$OVIRT_HOME/frontend/webadmin/modules/webadmin/</code>
* UserPortal: <code>$OVIRT_HOME/frontend/webadmin/modules/userportal-gwtp/</code>

oVirt Frontend applications use [https://developers.google.com/web-toolkit/ Google Web Toolkit], an open source set of tools for building JavaScript web applications using Java programming language. One GWT tool we'll use in particular is [https://developers.google.com/web-toolkit/doc/latest/DevGuideCompilingAndDebugging#DevGuideDevMode Development Mode], which allows debugging an application without having to translate (compile) it to JavaScript.

=== Prerequisites ===
This document assumes that you've successfully [http://wiki.ovirt.org/wiki/Building_oVirt_engine cloned and built oVirt from source] and [http://wiki.ovirt.org/wiki/Building_Ovirt_Engine/IDE configured Eclipse for development].

=== Development Mode ===
Launching Development Mode spawns a separate JVM instance (Java application) that executes GWT application code as bytecode, providing a bridge between web browser and Java IDE:
* Java IDE connects to Development Mode to debug GWT application code, allowing to set breakpoints and debug code as Java
* web browser connects to Development Mode via GWT Developer Plugin, passing instructions to Development Mode which executes them and sends the result back to web browser

=== Step 0 - Things to check ===
Make sure to have appropriate oVirt-related environment variables exported, for example:
<pre>
$ export OVIRT_HOME=$HOME/workspace/ovirt-engine
$ export JBOSS_HOME=/usr/local/dev/ovirt-jboss-as
$ export ENGINE_DEFAULTS=$OVIRT_HOME/backend/manager/conf/engine.conf.defaults
</pre>

You should also do full oVirt build prior to debugging, with WebAdmin and/or UserPortal GWT compilation enabled<code>*</code>:
<pre>
$ cd $OVIRT_HOME
$ mvn clean install -Pdep,gwt-admin,gwt-user -Dgwt.compiler.localWorkers=8
</pre>

<code>*</code> You'll be able to debug given Frontend application via Development Mode only if the application was compiled for at least 2 different browsers.

Notes:
* <code>dep</code> profile deploys oVirt Engine to JBoss AS, e.g. <code>$JBOSS_HOME/standalone/deployments/engine.ear</code>
* <code>gwt-admin</code> profile enables WebAdmin GWT compilation (optional)
* <code>gwt-user</code> profile enables UserPortal GWT compilation (optional)
* <code>gwt.compiler.localWorkers</code> should match the number of processors available for parallelizing GWT compilation (optional)

=== Step 1 - Launching Development Mode ===
Make sure JBoss AS is running and launch Development Mode for the given Frontend application:
<pre>
$ cd $GWT_APP_DIR
$ mvn gwt:debug -Pgwtdev,gwt-admin,gwt-user -Dgwt.noserver=true
</pre>

Notes:
* <code>gwt:debug</code> launches Development Mode via gwt-maven-plugin
* <code>gwtdev</code> profile adds extra Java sources and resources necessary for debugging, so that changes in related Frontend projects (<code>uicommonweb</code>, <code>gwt-common</code> etc.) are reflected in Development Mode for new debugging sessions
* <code>gwt.noserver</code> tells Development Mode that the application is already deployed on JBoss AS (don't use embedded Jetty instance to serve application content)

You should see following output in console: <code>Listening for transport dt_socket at address: 8000</code>

=== Step 2 - Connecting to Development Mode from Java IDE ===
In Eclipse, create new debug configuration via "Run | Debug Configurations | Remote Java Application | New launch configuration":
* In Connect tab:
** Project: choose WebAdmin or UserPortal project that you previously imported into Eclipse
** Host: <code>localhost</code>
** Port: <code>8000</code>
* In Source tab:
** Click "Add | Java Project" and choose related Frontend projects: <code>uicommonweb</code>, <code>gwt-common</code>

Click "Apply" and "Debug", so that Eclipse now connects to Development Mode, which spawns Development Mode GUI.

[[File:GWT_Development_Mode.png|GWT Development Mode]]

=== Step 3 - Launching the application in web browser ===
Open your favorite web browser and navigate to one of debug URLs below:
* WebAdmin: http://127.0.0.1:8700/webadmin/webadmin/WebAdmin.html?gwt.codesvr=127.0.0.1:9997
* UserPortal: http://127.0.0.1:8700/UserPortal/org.ovirt.engine.ui.userportal.UserPortal/UserPortal.html?gwt.codesvr=127.0.0.1:9997

Notes:
* <code>gwt.codesvr</code> points to Development Mode, port 9997 is used internally by GWT Developer Plugin to communicate with Development Mode
* This means you're debugging the application in your favorite web browser!

Navigating to debug URLs mentioned above for the first time, you will be prompted to install GWT Developer Plugin for the given web browser. Just proceed with plugin installation and restart the browser.

The next time you navigate to debug URLs mentioned below, GWT Developer Plugin will connect to Development Mode and new debugging session will be started for the given browser. This can take some time, please be patient and wait while the application gets loaded.

You can switch to Development Mode GUI and see a new tab representing the debugging session. Note that each session has its own client-side logs displayed within the given tab.

== Typical development cycle ==
Development Mode allows you to "code-test-debug" running GWT application, without having to compile it to JavaScript or even restart Development Mode.

Whenever you make code changes while debugging:
* Eclipse might complain that changes cannot be hot-swapped, in this case just click "Terminate" and reconnect again
* Reload (refresh) the application in web browser, this will start new Development Mode session

== Compiling Frontend applications for specific browser(s) ==

In order to speed up GWT compilation, you can compile Frontend applications only for specific browser(s).

For example, to compile WebAdmin and UserPortal only for Firefox:
<pre>
$ cd $OVIRT_HOME
$ mvn clean install -Pdep,gwt-admin,gwt-user -Dgwt.userAgent=gecko1_8
</pre>

User agents supported by GWT compiler:
* <code>ie8</code> - Microsoft Internet Explorer 8
* <code>ie9</code> - Microsoft Internet Explorer 9 and above
* <code>gecko1_8</code> - Mozilla Firefox
* <code>safari</code> - Safari
* <code>opera</code> - Opera

Notes:
* Accessing the application in browser that wasn't specified for GWT compilation results in blank page being shown.
* Never use <code>ie6</code> with <code>gwt.userAgent</code>, Microsoft Internet Explorer 6 and 7 are not supported by oVirt Frontend applications<code>*</code>.

<code>*</code> Even though GWT technically supports <code>ie6</code> user agent, trying to run Frontend applications in Microsoft Internet Explorer 6 or 7 results in terrible performance and user experience. This is because Frontend applications leverage the "browser as a platform" philosophy, using JavaScript to drive user interface as a single-page web application. Unfortunately, Microsoft Internet Explorer's JavaScript engine (as well as its rendering engine) are suboptimal to handle such kind of applications.

== Compiling Frontend applications for specific locale(s) ==

By default, Frontend applications are compiled only for English (en) locale.

For example, to compile WebAdmin and UserPortal for English, French and Japanese:
<pre>
$ cd $OVIRT_HOME
$ mvn clean install -Pdep,gwt-admin,gwt-user -Dgwt.locale=en,fr,ja
</pre>

To compile Frontend applications for all supported locales, just use the <code>all-langs</code> profile:
<pre>
$ cd $OVIRT_HOME
$ mvn clean install -Pdep,gwt-admin,gwt-user,all-langs
</pre>

See <code>all-langs</code> profile in <code>$OVIRT_HOME/frontend/webadmin/modules/pom.xml</code> for a full list of supported locales.

== Compiling Frontend applications in detailed mode ==

Sometimes it's necessary to profile or analyze GWT applications, e.g. fixing memory leaks or identifying performance bottlenecks in different web browsers. GWT compiler produces optimized and obfuscated JavaScript by default, which is hard to work with.

To compile Frontend applications in detailed mode, reducing the level of code optimization and preventing obfuscation, you can do full oVirt build with <code>gwtdev</code> profile:
<pre>
$ cd $OVIRT_HOME
$ mvn clean install -Pdep,gwt-admin,gwt-user,gwtdev
</pre>

''Use detailed mode only when profiling or analyzing GWT application code, don't use it for regular oVirt builds.''

== Frequently asked questions ==
''Q: My web browser doesn't prompt me to install GWT Developer Plugin.''

A: Make sure your browser is officially supported by GWT Developer Plugin. Alternatively, get it from [http://gwt.googleusercontent.com/samples/MissingPlugin/MissingPlugin.html here] and install the plugin manually into your browser.


''Q: The web page is blank after navigating to debug URL.''

A: Make sure to do full oVirt build prior to debugging for at least 2 different browsers, e.g. without specifying <code>gwt.userAgent</code> property (compile for all supported browsers).


''Q: Client-side logs are not persisted on Engine, e.g. <code>$JBOSS_HOME/standalone/log/engine/engine-ui.log</code>.''

A: Currently, client-side logs are enabled only when debugging the application via Development Mode.


''Q: I'm getting <code>-bindAddress host "0.0.0.0" unknown</code> error message when launching Development Mode.''

A: Using 0.0.0.0 means that Development Mode will listen for incoming connections on all network interfaces, as opposed to 127.0.0.1 which listens for incoming connections only on loopback interface available from local machine only. Make sure that host name is properly set in <code>/etc/hosts</code>. For Windows machines, check <code>%windir%\system32\drivers\etc\hosts</code>.


''Q: I'm getting <code>Exception: java.lang.OutOfMemoryError</code> or similar error during GWT compilation.''

A: You can tweak GWT compiler JVM arguments via <code>gwt-plugin.extraJvmArgs</code> property, for example:
<pre>
$ mvn clean install -Pdep,gwt-admin,gwt-user -Dgwt-plugin.extraJvmArgs="-Xms1024M -Xmx2048M -XX:PermSize=256M -XX:MaxPermSize=512M"
</pre>
