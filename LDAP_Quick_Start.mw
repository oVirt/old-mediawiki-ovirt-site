<span class="label label-warning"><big>ATTENTION: This page is obsoleted for >=ovirt-engine-3.5 by [[Features/AAA]]</big></span>

Ovirt manager uses external directory services for user authentication and information.
When a directory server is attached to the manger (using engine-manage-domain), existing users from it
can be added as ovirt users and assigned different roles and permissions.

The purpose of this page is
# Provide quick installation instructions of a simple a LDAP stack.
# Explain the basic concepts of LDAP with ovirt-engine context in mind.

This installation instructions provided here are for fedora 19.

=== Installation instructions ===
<nowiki>
# at the beginning of the command stands for execution as root.
</nowiki>

==== Installing OpenLDAP ====

Note that these instructions assume that you are using Fedora 19 and that the name of your domain is <code>f19.example.com</code>. If you are using a different domain make sure to use as well a different LDAP suffix instead of <code>dc=f19,dc=example,dc=com</code>. For example, if you are using <code>mycompany.com</code> as your domain then you should use <code>dc=mycompany,dc=com</code> for the LDAP suffix.

These are the steps required to install OpenLDAP and Kerberos so that the engine will be able to use them for authentication:

<ol>

<li>
Install OpenLDAP server & client, start the OpenLDAP service and optionally set it to run on init:

<pre>
# yum install -y openldap-{clients,servers}
# yum -y install cyrus-sasl-gssapi
# systemctl start slapd
# systemctl enable slapd
</pre>
</li>

<li>
Add the cosine and inetorgperson schemas:

<pre>
# ldapadd -H ldapi:/// -Y EXTERNAL -f /etc/openldap/schema/cosine.ldif
# ldapadd -H ldapi:/// -Y EXTERNAL -f /etc/openldap/schema/inetorgperson.ldif
</pre>

<li>
 Add the <code>memberof</code> overlay:

<pre>
# cat > memberof.ldif <<'.'
dn: cn={0}module,cn=config
objectClass: olcModuleList
cn: {0}module
olcModulePath: /usr/lib64/openldap
olcModuleLoad: {0}memberof.la

dn: olcOverlay={0}memberof,olcDatabase={2}hdb,cn=config
objectClass: olcConfig
objectClass: olcMemberOf
objectClass: olcOverlayConfig
objectClass: top
olcOverlay: {0}memberof
.
# ldapadd -H ldapi:/// -Y EXTERNAL -f memberof.ldif
</pre>

This overlay is an OpenLDAP plugin that manages automatically the set of members of a group. so when you add a member to a group it will automatically add the group to the list of groups of that member. You can also do this task manually, and other directory servers may do this in a different way.
</li>

<li>
Create a password for the directory administrator (I used <code>example123</code>, make sure to use an stronger password):

<pre>
# slappasswd 
New password: 
Re-enter new password: 
{SSHA}m0QjuHcKXOZwoL8H7LhZgQgj/+gjGje4
</pre>
</li>

<li>
Change the suffix and the credentians of the directory manager:

<pre>
# cat > config.ldif <<'.'
dn: cn=config
replace: olcSaslSecProps
olcSaslSecProps: noanonymous,noplain,minssf=1
-

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=f19,dc=example,dc=com
-
replace: olcRootDN
olcRootDN: cn=Manager,dc=f19,dc=example,dc=com
-
replace: olcRootPW
olcRootPW: {SSHA}0EAIzAxRBMZ1LP/XAhq4q80DLpNpDzr2
-
.
# ldapmodify -H ldapi:/// -Y EXTERNAL -f config.ldif
</pre>

Note that the <code>olcSaslSecProps</code> is very important in order to avoid a bug in the Java virtual machine. It 
should contain at least <code>minssf=1</code>.
</li>

<li>
Create the top level structure of the directory, with a branch for users and another for groups:
<pre>
# cat > structure.ldif <<'.'
dn: dc=f19,dc=example,dc=com
objectClass: dcObject
objectClass: organization
dc: f19
o: F19 Example Inc.

dn: ou=Users,dc=f19,dc=example,dc=com
objectClass: organizationalUnit
ou: Users

dn: ou=Groups,dc=f19,dc=example,dc=com
objectClass: organizationalUnit
ou: Groups
.
# ldapadd -H ldapi:/// -D 'cn=Manager,dc=f19,dc=example,dc=com' -x -W -f structure.ldif
</pre>
</li>

</li>

<li>
Create some users:
<pre>
# cat > users.ldif <<'.'
dn: uid=user0,ou=Users,dc=f19,dc=example,dc=com
objectclass: inetOrgPerson
objectclass: uidObject
uid: user0
cn: User2
givenName: User
title: User
mail: user0@f19.example.com
sn: 0

dn: uid=user1,ou=Users,dc=f19,dc=example,dc=com
objectclass: inetOrgPerson
objectclass: uidObject
uid: user1
cn: User1
givenName: User
title: User
mail: user1@f19.example.com
sn: 1
.
# ldapadd -H ldapi:/// -D 'cn=Manager,dc=f19,dc=example,dc=com' -x -W -f users.ldif
</pre>

Note that the users don't need to have a <code>memberof</code> attribute, as this will be calculated and assigned by the <code>memberof</code> overlay when the group is created or modified.
</li>

<li>
Create some groups:
<pre>
# cat > groups.ldif <<'.'
dn: cn=Group0,ou=Groups,dc=f19,dc=example,dc=com
objectclass: groupOfNames
cn: Group0
member: uid=user0,ou=Users,dc=f19,dc=example,dc=com
member: uid=user1,ou=Users,dc=f19,dc=example,dc=com
.
# ldapadd -H ldapi:/// -D 'cn=Manager,dc=f19,dc=example,dc=com' -x -W -f groups.ldif
</pre>
</li>

Once this is done the directory should return the memberOf attributes
when quering users:

<pre>
# ldapsearch -H ldapi:/// -b 'dc=f19,dc=example,dc=com' -x '(uid=user0)' memberOf -LLL
dn: uid=user0,ou=Users,dc=f19,dc=example,dc=com
memberOf: cn=Group0,ou=Groups,dc=f19,dc=example,dc=com
</pre>
</li>

<li>
Install the Kerberos server packages:
<pre>
# yum -y install krb5-{workstation,server}
</pre>
</li>

<li>
Adjust the <code>/etc/krb5.conf</code> file, should be something like this:
<pre>
[logging]
 default = FILE:/var/log/krb5libs.log
 kdc = FILE:/var/log/krb5kdc.log
 admin_server = FILE:/var/log/kadmind.log

[libdefaults]
 dns_lookup_realm = false
 ticket_lifetime = 24h
 renew_lifetime = 7d
 forwardable = true
 default_realm = F19.EXAMPLE.COM

[realms]
 F19.EXAMPLE.COM = {
  kdc = f19.example.com
  admin_server = f19.example.com
 }

[domain_realm]
 .f19.example.com = F19.EXAMPLE.COM
 f19.example.com = F19.EXAMPLE.COM
</pre>
</li>

<li>
Create the kerberos database:

<pre>
# cd /var/kerberos/krb5kdc
# kdb5_util create -s
</pre>

Modify the <code>/var/kerberos/krb5kdc/kdc.conf</code> and <code>/var/kerberos/krb5kdc/kadm5.acl</code> and replace <code>EXAMPLE.COM</code> with your realm name.
</li>

<li>
Create the a Kerberos admin user, for root, for example:

<pre>
# kadmin.local
Authenticating as principal root/admin@F19.EXAMPLE.COM with password.
kadmin.local:  add_principal root/admin
WARNING: no policy specified for root/admin@F19.EXAMPLE.COM; defaulting to no policy
Enter password for principal "root/admin@F19.EXAMPLE.COM":
Re-enter password for principal "root/admin@F19.EXAMPLE.COM":
Principal "root/admin@F19.EXAMPLE.COM" created.
</pre>
</li>

<li>
Start and enable the <code>krb5kdc</code> and <code>kadmin</code> services:

<pre>
# systemctl start krb5kdc
# systemctl enable krb5kdc
# systemctl start kadmin
# systemctl enable kadmin
</pre>
</li>

<li>
Check that you can login with the admin user:

<pre>
# kadmin
Authenticating as principal root/admin@F19.EXAMPLE.COM with password.
Password for root/admin@F19.EXAMPLE.COM:
kadmin:  list_principals
K/M@F19.EXAMPLE.COM
kadmin/admin@F19.EXAMPLE.COM
</pre>
</li>

<li>
Add the users to the Kerberos database and verify that they can login:

<pre>
# kadmin
kadmin: add_principal user0
kadmin: add_principal user1

# kinit user0
Password for user0@F19.EXAMPLE.COM:
</pre>
</li>

<li>
Create a password for the LDAP server and extract it to a keytab file with read permissions for the user running the LDAP server (usually the <code>ldap</code> user):

<pre>
# kadmin
kadmin:  add_principal -randkey ldap/f19.example.com
kadmin:  ktadd -keytab /etc/openldap/ldap.keytab ldap/f19.example.com

# chgrp ldap /etc/openldap/ldap.keytab
# chmod 640 /etc/openldap/ldap.keytab
</pre>
</li>

<li>
Make sure that the LDAP server is using the keytab file created in the previous step, adding the <code>KRB5_KTNAME</code> to the <code>/etc/sysconfig/slapd</code> file (it is already there, just uncomment it):

<pre>
KRB5_KTNAME="FILE:/etc/openldap/ldap.keytab"
</pre>

Then restart the LDAP server:

<pre>
# systemctl restart slapd
</pre>
</li>

<li>
Test that users can do LDAP queries using the Kerberos credentials:

<pre>
# kinit user0
# Password for user0@F19.EXAMPLE.COM:

# ldapsearch -H ldap://f19.example.com -Y GSSAPI -b 'dc=f19,dc=example,dc=com' '(uid=user0)' memberOf
</pre>

The query should succeed without asking any password.
</li>

<li>
Add DNS SRV records for the LDAP and Kerberos servers, something like this in the zone file:

<pre>
_kerberos._tcp.f19.example.com. SRV 0 100 88 f19.example.com.
_ldap._tcp.f19.example.com. SRV 0 100 389 f19.example.com.
</pre>
</li>

<li>
Register the domain with <code>engine-manage-domains</code>:

<pre>
# engine-manage-domains -action=add -domain=f19.example.com -provider=OpenLDAP -user=user0 -interactive
</pre>
</li>

</ol>
