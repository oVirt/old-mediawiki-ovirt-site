<!-- {{autolang|base=yes}} -->

== REST API session management ==

=== Summary ===
The purpose of the feature is to add session management to the oVirt REST API.

=== Owner ===

* Name: [[User:Ovedo| Oved Ourfali]]
* Email: <ovedo@redhat.com>

=== Current status ===
* Design phase

=== Requirements ===
#Provide a session management mechanism that would allow clients to use the oVirt API without requiring them to pass credentials on each call
#Reduce the overhead and also without the extra overhead of logging in and out in each request.
#Continue supporting the old mechanism, in which credentials are passed in every request (no login/logout optimization, just the same as today).

=== Detailed Description ===
Today, when working with the API (via the CLI, SDK, curl, browser or any other web client), the credentials must be passed in each and every request made to the API.
Also, in each such request the REST API initiates a login and logout to the engine core.
The purpose of this feature is to allow clients to perform some initial login phase, work with the same session for multiple requests, and then close it (or leave it open until it is closed for inactivity).

=== Implementation ===
The proposed implementation for that is to rely on cookies in the following way:
#First, the client does a request the same as today, providing credentials.
#The server logs in to the engine, and performs the required action. In addition, it returns a new cookie called "saveSession" with the value "true".
#The client get the cookie, and (if he wants to) in the second request he passes it to the server.
#The server gets the "saveSession" cookie was passed with the value "true", and it logs in, performs the request, and returns a new cookie called "sessionId", with the engine session ID as the value.
#The client gets the "sessionId" cookie, and passes it (with the "saveSession" cookie) in all the subsequent requests, without the need to pass credentials.
#The server gets the "sessionId" cookie, it checks the session and who is the logged-in user in this session.
#After few such requests the client can choose to close the session, using the "saveSession" cookie, with a value of "false" (note that if it isn't used then the session will be closed after some timeout).
#The server sees this cookie, and it closes the session.

IMPORTANT NOTE:
*Existing clients can continue working as they are working today. They just ignore the initial saveSession cookie, and pass credentials on each call. The API will then do login and logout on every such call.

Diagram of all phases:
 <nowiki>
Client                                           Server
  |                                                |
  | ------------initial request------------------> |
  |                                   [login+logout]
  | <----Set-Cookie:saveSession=true---------------|
  |                                                |
  | -----Cookie:saveSession=true------------------>|
  |                                     [login only]
  | <----Set-Cookie:saveSession=true;sessionId=X---|
  |                                                |
  | -----Cookie:saveSession=true;sessionId=X------>|
  |                             [uses the sessionID]
  | <----------------------------------------------|
  |                                                |
  | -----Cookie:saveSession=true;sessionId=X------>|
  |                             [uses the sessionID]
  | <----------------------------------------------|
  |                                                |
  |              ... time pases...                 |
  |                                                |
  | -----Cookie:sessionId=X;saveSession=false----->|
  |                     [uses the sessionID. logout]
  | <----------------------------------------------|
  |                                                |
 </nowiki>

=== Scope ===
The scope of the feature is as follows:
* Adding the mechanism to the REST API
* Using this mechanism in the CLI/SDK

=== Documentation / External references ===

=== Comments/Discussion/Issues ===
Several improvements that can be done in the protocol:
#Cookie expiration - use some expiration on the sessionId cookie. Upon expiration the API might renew it and return a new sessionId, or return an error and let the client do the procedure again.

Questions:
#Do we need encryption/decryption in these cookies? Looks like SSL is enough here. Also, we can restrict these cookies to be used only in a secured connection, resulting in not passing them to the client on a non-secured connection.
 
[[Category:Feature]]
[[Category:Template]]
