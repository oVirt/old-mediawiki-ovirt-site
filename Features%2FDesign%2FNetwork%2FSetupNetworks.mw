= Network features design =

== Abstract ==

Setup networks api shall enable complex network provisioning of a host i.e. add/remove/bond network at one call.<br>
Hereby we describe code POV changes for backend and also VDSM api implications.

=== Scope ===

# add/remove network/s
# add/remove bond/s
# attach/detach networks to/from bonds
# '''check connectivity & connectivity timeout:'''
#: after the new topology layed by VDSM, they test if any client(i.e engine) has interacted with them,  in the given period timeout.<br>  When no activity seen, they revert to the baked-up topology and fail the command.
# '''force:''' VDSM will not validate parameters passed to set the network configuration .

=== Backward compatibility ===

Cluster version is 3.1.  Add record in the action_version_map table:
{| class="wikitable"
|-
! action_id
! cluster_minimal_version
! storage_pool_minimal_version
|-
|158
|3.1
|3.1
|-
|}

=== Setup Networks sequence diagram ===
[[File:Diagram1.png]]

=== Added classes ===

# SetupNetworksCommand.java
# SetupNetworksVdsCommand.java
# SetupNetworksCommandParameters.java
# SetupNetworksVdsCommandParameters.java

==== Class Diagram ====
[[File:SetupNetworksClassDiagram.png]]

== Bridge-less Networks ==

=== Feature summary ===
 
All VMs today are connected through a software bridge, which has naturally performance take.<br>
Bridge-less nics can serve for heavy traffic channels like migration, export or the engine management network.

=== Code Change ===
  
# Add bridged : boolean to network entity
# Add deserialization to bridged field in VdsBrokerObjectsBuilder.java
# DB - add field in to vds_interface and vds_interface_view
# DAO - add field to VdsInterfaceDao CRUD actions

=== Backward Compatibility ===
 
Its compatibility version is 3.1 and enforced by the enclosed command as mentioned already.
Bridge-less network shall be edited throw SetupNetworks command only, which will  eventually deprecate add/edit networks commands.

== Jumbo frames ==

Typically, just another parameter for a network configuration to determine the [http://en.wikipedia.org/wiki/Maximum_transmission_unit MTU].

=== Code Change ===
# Add MTU : String to network entity
# Add deserialization to MTU field in VdsBrokerObjectsBuilder.java. Serialise as String and not Int.
# DB - add field in to vds_interface and vds_interface_view
# DAO - add field to VdsInterfaceDao CRUD actions

=== Backward Compatibility ===

Same as for bridge-less feature.

== VDSM changes ==

'''configNetwork.py'''
<code>
 def setupNetworks(networks={}, bondings={}, **options):
</code>

The changes we need to communicate are in the "network" structure for bridge and MTU fields

'''network business entity'''

[[File:Diagram2.png]]

 <span style="color:red">'''note:''' </span> integer types are serialized to an xml String type on the wire - its up to the VDSM network dict to handle.

== GUI ==

[[File:general.png]]
[[File:more_cases.png]]

== REST ==
 
=== Resource representation ===
 TODO Ori Liel
== Open issues ==
 
# input validation: whats the MTU max value? how do we calculate it?
